<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在vscode上使用clangd</title>
    <link href="/2022/03/28/%E5%9C%A8vscode%E4%B8%8A%E4%BD%BF%E7%94%A8clangd/"/>
    <url>/2022/03/28/%E5%9C%A8vscode%E4%B8%8A%E4%BD%BF%E7%94%A8clangd/</url>
    
    <content type="html"><![CDATA[<p>首先我们先明白一个概念LSP，额，当然不是老色批🤣</p><blockquote><p>LSP（Language Server Protocol）开源的语言服务器协定。由RedHat、Microsoft和 Codenvy 联合推出，可以让不同的程序编辑器与集成开发环境（IDE）方便嵌入各种程序语言，允许开发人员在最喜爱的工具中使用各种语言来撰写程序</p></blockquote><p>而C++的LSP有</p><ul><li>ms-vscode.cpptools</li><li>clangd</li><li>ccls</li></ul><p>visual studio code 中微软官方的C&#x2F;C++插件使用的是第一个，经常出现各种各样的问题，同时代码补全不是跟好用，例如C++ STL 在使用时无法使用括号补全。同时经常出现更新不及时，更改代码前出现的报错有时需要重新打开项目才会消失<span class="github-emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">&amp;#x1f622;</span>,就很烦，所以这里使用官方推荐的clangd插件进行C&#x2F;C++补全，静态检查，高亮功能。</p><h2 id="1-备份原有的配置文件"><a href="#1-备份原有的配置文件" class="headerlink" title="1. 备份原有的配置文件"></a>1. 备份原有的配置文件</h2><p>在Windows 10上使用 C&#x2F;C++调试时默认会自动生成<code>task.json</code>和<code>launch.json</code>文件，但有的时候会抽风无法生成<code>launch.json</code>，这里做一个备份，基本上官方配置复制下来更改一下安装的工具链地址就可以用：<a href="https://code.visualstudio.com/docs/cpp/config-mingw">配置地址</a>，我做了一些个性化配置。</p><p><strong>task.json 相当于输入一段g++命令，对一段C++代码进行编译和执行，launch.json 会每次调用tasks.json</strong></p><p>使用这个配置可以在调试的时候自动聚焦到终端，生成的二进制文件会出现在根目录的build文件夹</p><ul><li><code>task.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-std=c++20&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>launch.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\gdb.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-在Ubuntu中设置"><a href="#2-在Ubuntu中设置" class="headerlink" title="2. 在Ubuntu中设置"></a>2. 在Ubuntu中设置</h2><h3 id="2-1-安装包"><a href="#2-1-安装包" class="headerlink" title="2.1 安装包"></a>2.1 安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install g++ gcc gdb cmake make llvm clangd lldb<br></code></pre></td></tr></table></figure><h3 id="2-2-安装vscode-插件"><a href="#2-2-安装vscode-插件" class="headerlink" title="2.2 安装vscode 插件"></a>2.2 安装vscode 插件</h3><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203281106759.png" alt="image-20220328110618664"></p><p>在安装C&#x2F;C++和clangd插件后，会出现<strong>冲突问题</strong>，是两个插件补全出现冲突，在<code>setting.json</code>中添加，关闭自动补全</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 只第一个其实就可以</span><br><span class="hljs-attr">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;C_Cpp.autocomplete&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;C_Cpp.errorSquiggles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="2-3-使用clang-lldb"><a href="#2-3-使用clang-lldb" class="headerlink" title="2.3 使用clang++,lldb"></a>2.3 使用clang++,lldb</h3><p>配置方法与正常的配置差不多，有些许修改，需要注意在linux下，二进制文件没有“.exe后缀”</p><ul><li><code> tasks.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/clang++&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-std=c++20&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>launch.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-使用g-gdb"><a href="#2-4-使用g-gdb" class="headerlink" title="2.4 使用g++,gdb"></a>2.4 使用g++,gdb</h3><p>因为我们只关闭了C&#x2F;C++插件的自动补全功能，所以理论上我们是可以使用官方插件进行调试的，使用clangd写代码，C&#x2F;C++调试。官方的插件在调试上对内存断点上更加好用</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203281657632.png" alt="image-20220328165732579"></p><p><code>tasks.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/g++&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>launch.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;DEBUG&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>由于编译和调试所依赖的工具和插件是不同的，我甚至可以使用clang++编译，gdb调试，只需要将<code>tasks.json</code>的内容更换为使用clang++时即可</p><h3 id="2-5-使用Cmake进行多文件编译"><a href="#2-5-使用Cmake进行多文件编译" class="headerlink" title="2.5 使用Cmake进行多文件编译"></a>2.5 使用Cmake进行多文件编译</h3><p>打开一个CMake项目，这是一个简单的项目，只有一个头文件和源文件构成</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203282106596.png" alt="image-20220328210628497"></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>.<span class="hljs-number">0</span>)<br><span class="hljs-keyword">project</span>(CppClangd)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">20</span>)<br><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">add_executable</span>(CppClangd  main.cpp  MyFunction.h)<br></code></pre></td></tr></table></figure><h4 id="2-5-1-生成compile-command-json"><a href="#2-5-1-生成compile-command-json" class="headerlink" title="2.5.1 生成compile_command.json"></a>2.5.1 生成compile_command.json</h4><p>clangd需要根据该文件获取各个文件的include path，以及编译警告错误之类的，必须要有这个文件</p><ul><li>在CMakeList.txt中添加即可</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br></code></pre></td></tr></table></figure><ul><li>在build目录下</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES .<br></code></pre></td></tr></table></figure><h4 id="2-5-2-Debug配置"><a href="#2-5-2-Debug配置" class="headerlink" title="2.5.2 Debug配置"></a>2.5.2 Debug配置</h4><p>实际上，由于我们因为只禁用了C&#x2F;C++的自动补全功能(再次强调<span class="github-emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&amp;#x1f606;</span>),所以正常来讲可以忽略这个东西，但是如果完全不用官方这一套的话，还是需要的。我们只需要调试，所以只需要launch.json,将我们之前的launch.json根据<a href="https://github.com/microsoft/vscode-cmake-tools/blob/main/docs/debug-launch.md#debug-using-a-launchjson-file">Cmake Tools</a>官方文档改一改就可以了</p><ul><li>使用gdb</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;DEBUG&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,<br>            <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-string">&quot;program&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;command:cmake.launchTargetPath&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;args&quot;</span>: [],<br>            <span class="hljs-string">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;workspaceFolder&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;environment&quot;</span>: [],<br>            <span class="hljs-string">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;internalConsoleOptions&quot;</span>: <span class="hljs-string">&quot;neverOpen&quot;</span>,<br>            <span class="hljs-string">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,<br>            <span class="hljs-string">&quot;setupCommands&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span>,<br>                    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,<br>                    <span class="hljs-string">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span><br>                &#125;<br>            ],<br>            <span class="hljs-string">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用lldb</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;command:cmake.launchTargetPath&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-配置clangd"><a href="#3-配置clangd" class="headerlink" title="3. 配置clangd"></a>3. 配置clangd</h2><h3 id="3-1-setting-json"><a href="#3-1-setting-json" class="headerlink" title="3.1 setting.json"></a>3.1 setting.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot; --compile-commands-dir=$&#123;workspaceFold&#125;$/build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// clangd在创建索引使用的线程数</span><br>        <span class="hljs-string">&quot;-j=4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用 Clang-Tidy 以提供静态检查</span><br>        <span class="hljs-string">&quot;--clang-tidy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 建议风格：重载函数只会给出一个建议；反可以设置为detailed</span><br>        <span class="hljs-string">&quot;--completion-style=bundled&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用,补全函数时，将会给参数提供占位符</span><br>        <span class="hljs-string">&quot;--function-arg-placeholders=false&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span><br>        <span class="hljs-string">&quot;--header-insertion-decorators&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 补充头文件</span><br>        <span class="hljs-string">&quot;--header-insertion=iwyu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 让 Clangd 生成更详细的日志</span><br>        <span class="hljs-string">&quot;--log=verbose&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// pch存储在内存中，内存消耗更大，但是性能更优</span><br>        <span class="hljs-string">&quot;--pch-storage=memory&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输出的 JSON 文件更美观</span><br>        <span class="hljs-string">&quot;--pretty&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置项目，或者用户config</span><br>    <span class="hljs-string">&quot;--enable-config&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">// LLDB 指针显示解引用内容</span><br><span class="hljs-attr">&quot;lldb.dereferencePointers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 鼠标悬停在变量上时预览变量值</span><br><span class="hljs-attr">&quot;lldb.evaluateForHovers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 监视表达式的默认类型</span><br><span class="hljs-attr">&quot;lldb.launch.expressions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;simple&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 不显示汇编代码</span><br><span class="hljs-attr">&quot;lldb.showDisassembly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 生成更详细的日志</span><br><span class="hljs-attr">&quot;lldb.verboseLogging&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">// 保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，不自动配置 CMake 项目目录</span><br><span class="hljs-attr">&quot;cmake.configureOnEdit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// 在 CMake 项目目录打开时自动对其进行配置</span><br><span class="hljs-attr">&quot;cmake.configureOnOpen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// 成功配置后，将 compile_commands.json 复制到此位置</span><br><span class="hljs-attr">&quot;cmake.copyCompileCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="3-2-clang"><a href="#3-2-clang" class="headerlink" title="3.2 .clang"></a>3.2 .clang</h3><p><code>Ctrl+Shft+p</code>配置如下内容,<a href="https://clangd.llvm.org/config.html">官网配置</a></p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203282252474.png" alt="image-20220328225226433"></p><p><code>.clangd</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">CompileFlags:</span>                             <br>    <span class="hljs-attr">Add:</span> <br>      [<br>        <span class="hljs-string">-std=c++14</span>,<br>        <span class="hljs-string">-Wno-documentation</span>,<br>        <span class="hljs-string">-Wno-missing-prototypes</span>,<br>      ]<br><span class="hljs-attr">Diagnostics:</span><br>  <span class="hljs-attr">ClangTidy:</span><br>    <span class="hljs-attr">Add:</span><br>    [<br>        <span class="hljs-string">performance-*</span>,<br>        <span class="hljs-string">bugprone-*</span>,<br>        <span class="hljs-string">modernize-*</span>,<br>        <span class="hljs-string">clang-analyzer-*</span>,<br>        <span class="hljs-string">readability-identifier*</span>,<br>    ]<br>    <span class="hljs-attr">Remove:</span><br>    [<br>        <span class="hljs-string">abseil*</span>,<br>        <span class="hljs-string">fuchsia*</span>,<br>        <span class="hljs-string">llvmlib*</span>,<br>        <span class="hljs-string">zircon*</span>,<br>        <span class="hljs-string">altera*</span>,<br>        <span class="hljs-string">google-readability-todo</span>,<br>        <span class="hljs-string">readability-braces-around-statements</span>,<br>        <span class="hljs-string">hicpp-braces-around-statements</span>,<br>        <span class="hljs-string">modernize-use-trailing-return-type</span>,<br>    ]<br>    <span class="hljs-attr">CheckOptions:</span><br>      <span class="hljs-attr">readability-identifier-naming.VariableCase:</span> <span class="hljs-string">camelCase</span><br></code></pre></td></tr></table></figure><p><code>.clang-format</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto</span><br><span class="hljs-attr">Language:</span> <span class="hljs-string">Cpp</span><br><span class="hljs-comment"># BasedOnStyle: LLVM</span><br><br><span class="hljs-comment"># 访问说明符(public、private等)的偏移</span><br><span class="hljs-attr">AccessModifierOffset:</span> <span class="hljs-number">-4</span><br><br><span class="hljs-comment"># 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)</span><br><span class="hljs-attr">AlignAfterOpenBracket:</span> <span class="hljs-string">Align</span><br><br><span class="hljs-comment"># 连续赋值时，对齐所有等号</span><br><span class="hljs-attr">AlignConsecutiveAssignments:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 连续声明时，对齐所有声明的变量名</span><br><span class="hljs-attr">AlignConsecutiveDeclarations:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 右对齐逃脱换行(使用反斜杠换行)的反斜杠</span><br><span class="hljs-attr">AlignEscapedNewlines:</span> <span class="hljs-string">Right</span><br><br><span class="hljs-comment"># 水平对齐二元和三元表达式的操作数</span><br><span class="hljs-attr">AlignOperands:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 对齐连续的尾随的注释</span><br><span class="hljs-attr">AlignTrailingComments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 不允许函数声明的所有参数在放在下一行</span><br><span class="hljs-attr">AllowAllParametersOfDeclarationOnNextLine:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 不允许短的块放在同一行</span><br><span class="hljs-attr">AllowShortBlocksOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许短的case标签放在同一行</span><br><span class="hljs-attr">AllowShortCaseLabelsOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All</span><br><span class="hljs-attr">AllowShortFunctionsOnASingleLine:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 允许短的if语句保持在同一行</span><br><span class="hljs-attr">AllowShortIfStatementsOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许短的循环保持在同一行</span><br><span class="hljs-attr">AllowShortLoopsOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), </span><br><span class="hljs-comment"># AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)</span><br><span class="hljs-attr">AlwaysBreakAfterReturnType:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 总是在多行string字面量前换行</span><br><span class="hljs-attr">AlwaysBreakBeforeMultilineStrings:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 总是在template声明后换行</span><br><span class="hljs-attr">AlwaysBreakTemplateDeclarations:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># false表示函数实参要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">BinPackArguments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># false表示所有形参要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">BinPackParameters:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效</span><br><span class="hljs-attr">BraceWrapping:</span><br>  <span class="hljs-comment"># class定义后面</span><br>  <span class="hljs-attr">AfterClass:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 控制语句后面</span><br>  <span class="hljs-attr">AfterControlStatement:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># enum定义后面</span><br>  <span class="hljs-attr">AfterEnum:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 函数定义后面</span><br>  <span class="hljs-attr">AfterFunction:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 命名空间定义后面</span><br>  <span class="hljs-attr">AfterNamespace:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># struct定义后面</span><br>  <span class="hljs-attr">AfterStruct:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># union定义后面</span><br>  <span class="hljs-attr">AfterUnion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># extern之后</span><br>  <span class="hljs-attr">AfterExternBlock:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># catch之前</span><br>  <span class="hljs-attr">BeforeCatch:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># else之前</span><br>  <span class="hljs-attr">BeforeElse:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 缩进大括号</span><br>  <span class="hljs-attr">IndentBraces:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分离空函数</span><br>  <span class="hljs-attr">SplitEmptyFunction:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分离空语句</span><br>  <span class="hljs-attr">SplitEmptyRecord:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分离空命名空间</span><br>  <span class="hljs-attr">SplitEmptyNamespace:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)</span><br><span class="hljs-attr">BreakBeforeBinaryOperators:</span> <span class="hljs-string">NonAssignment</span><br><br><span class="hljs-comment"># 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似), </span><br><span class="hljs-comment">#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似), </span><br><span class="hljs-comment">#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom</span><br><span class="hljs-comment">#   注：这里认为语句块也属于函数</span><br><span class="hljs-attr">BreakBeforeBraces:</span> <span class="hljs-string">Custom</span><br><br><span class="hljs-comment"># 在三元运算符前换行</span><br><span class="hljs-attr">BreakBeforeTernaryOperators:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在构造函数的初始化列表的冒号后换行</span><br><span class="hljs-attr">BreakConstructorInitializers:</span> <span class="hljs-string">AfterColon</span><br><br><span class="hljs-comment">#BreakInheritanceList: AfterColon</span><br><br><span class="hljs-attr">BreakStringLiterals:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 每行字符的限制，0表示没有限制</span><br><span class="hljs-attr">ColumnLimit:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">CompactNamespaces:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 构造函数的初始化列表要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">ConstructorInitializerAllOnOneLineOrOnePerLine:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 构造函数的初始化列表的缩进宽度</span><br><span class="hljs-attr">ConstructorInitializerIndentWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 延续的行的缩进宽度</span><br><span class="hljs-attr">ContinuationIndentWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 去除C++11的列表初始化的大括号&#123;后和&#125;前的空格</span><br><span class="hljs-attr">Cpp11BracedListStyle:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 继承最常用的指针和引用的对齐方式</span><br><span class="hljs-attr">DerivePointerAlignment:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 固定命名空间注释</span><br><span class="hljs-attr">FixNamespaceComments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 缩进case标签</span><br><span class="hljs-attr">IndentCaseLabels:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">IndentPPDirectives:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 缩进宽度</span><br><span class="hljs-attr">IndentWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 函数返回类型换行时，缩进函数声明或函数定义的函数名</span><br><span class="hljs-attr">IndentWrappedFunctionNames:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 保留在块开始处的空行</span><br><span class="hljs-attr">KeepEmptyLinesAtTheStartOfBlocks:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 连续空行的最大数量</span><br><span class="hljs-attr">MaxEmptyLinesToKeep:</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All</span><br><span class="hljs-attr">NamespaceIndentation:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 指针和引用的对齐: Left, Right, Middle</span><br><span class="hljs-attr">PointerAlignment:</span> <span class="hljs-string">Right</span><br><br><span class="hljs-comment"># 允许重新排版注释</span><br><span class="hljs-attr">ReflowComments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许排序#include</span><br><span class="hljs-attr">SortIncludes:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 允许排序 using 声明</span><br><span class="hljs-attr">SortUsingDeclarations:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在C风格类型转换后添加空格</span><br><span class="hljs-attr">SpaceAfterCStyleCast:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在Template 关键字后面添加空格</span><br><span class="hljs-attr">SpaceAfterTemplateKeyword:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在赋值运算符之前添加空格</span><br><span class="hljs-attr">SpaceBeforeAssignmentOperators:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># SpaceBeforeCpp11BracedList: true</span><br><br><span class="hljs-comment"># SpaceBeforeCtorInitializerColon: true</span><br><br><span class="hljs-comment"># SpaceBeforeInheritanceColon: true</span><br><br><span class="hljs-comment"># 开圆括号之前添加一个空格: Never, ControlStatements, Always</span><br><span class="hljs-attr">SpaceBeforeParens:</span> <span class="hljs-string">ControlStatements</span><br><br><span class="hljs-comment"># SpaceBeforeRangeBasedForLoopColon: true</span><br><br><span class="hljs-comment"># 在空的圆括号中添加空格</span><br><span class="hljs-attr">SpaceInEmptyParentheses:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在尾随的评论前添加的空格数(只适用于//)</span><br><span class="hljs-attr">SpacesBeforeTrailingComments:</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 在尖括号的&lt;后和&gt;前添加空格</span><br><span class="hljs-attr">SpacesInAngles:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在C风格类型转换的括号中添加空格</span><br><span class="hljs-attr">SpacesInCStyleCastParentheses:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格</span><br><span class="hljs-attr">SpacesInContainerLiterals:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在圆括号的(后和)前添加空格</span><br><span class="hljs-attr">SpacesInParentheses:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响</span><br><span class="hljs-attr">SpacesInSquareBrackets:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 标准: Cpp03, Cpp11, Auto</span><br><span class="hljs-attr">Standard:</span> <span class="hljs-string">Auto</span><br><br><span class="hljs-comment"># tab宽度</span><br><span class="hljs-attr">TabWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always</span><br><span class="hljs-attr">UseTab:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="4-Windows上配置"><a href="#4-Windows上配置" class="headerlink" title="4. Windows上配置"></a>4. Windows上配置</h2><h3 id="4-1-工具链安装"><a href="#4-1-工具链安装" class="headerlink" title="4.1 工具链安装"></a>4.1 工具链安装</h3><p>不知道大家有没有注意过自己用的工具链版本</p><p>较为知名的几个项目:</p><ul><li>MinGW-w64项目多年不更新，gcc版本停留在8.1,与linux下ubuntu20.04 LTS 9.0 ,Arch 11.2差的很远；</li><li>tdm-gcc在停更了好多年之后，更新了10.0版本</li></ul><p>推荐以下两种方式</p><ul><li><p><a href="https://winlibs.com/">Winlib</a> 主要提供GCC 和 LLVM 在windows下的 使用 基本上上游更新，作者就会编译发布</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203301905350.png" alt="image-20220330190524242" style="zoom:67%;" /><p>因为是个人编译，所以很可能存在问题</p></li><li><p><a href="https://www.msys2.org/">MYSY2</a> 模拟Linux环境，使用pacman 作为包管理器，pacman 的强大谁用谁知道，永远不需要担心依赖和编译问题，OpenGL,OpenCV,Eigen的安装只需要一条命令，已经有人为你做好了一切，包管理器让更新变得十分容易</p></li></ul><h3 id="4-2-json配置"><a href="#4-2-json配置" class="headerlink" title="4.2 json配置"></a>4.2 json配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang++ build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\clang++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-std=c++20&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\gdb.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>未完 待续</code></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p><code>参考链接:</code></p><ul><li>Bilibili</li></ul><p><a href="https://www.bilibili.com/video/BV1sW411v7VZ?p=1"> VS Code + Clangd + CMake 搭建 C&#x2F;C++开发环境</a></p><ul><li>CSDN:</li></ul><p><a href="https://blog.csdn.net/tyKuGengty/article/details/120119820">VSCode 配置 C&#x2F;C++：VSCode + Clang + Clangd + LLDB + CMake + Git</a></p><p><a href="https://blog.csdn.net/weixin_43862847/article/details/119274382">vscode + clangd 开发 c&#x2F;c++</a></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>环境配置</tag>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算作业2</title>
    <link href="/2022/03/19/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A2/"/>
    <url>/2022/03/19/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A2/</url>
    
    <content type="html"><![CDATA[<h2 id="列举威胁作用者有哪些并简要说明">1.列举威胁作用者有哪些，并简要说明</h2><p>威胁作用者是引发威胁的实体，因为与它能够实施攻击。云安全威胁可能来自内部也可以来自外部，可能来自于软件程序。相对于漏洞、威胁和风险以及安全策略和安全机制建立起来的保护措施而言，威胁作用者所承担的角色，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261332978.png" alt="202203191834094" style="zoom:50%;" /></p><ul><li><p><strong>匿名攻击者</strong>匿名攻击者是云中没有权限、不被信任的云服务用户，它通常是一个外部软件程序，通过公网发动网络攻击。当匿名攻击者对安全策略和防护所致有限时，这会抑制它们形成有效攻击的能力。因此，匿名攻击者往往诉诸绕过账号或窃取用户证书的手段，同时使用能够确保匿名性或需要大量资源才能被检举的方法。</p></li><li><p><strong>恶意服务作用者</strong>恶意服务作用者能截取并转发云内的网络流量。它通常是带有被损害的或恶意逻辑的服务代理或伪装成服务代理的程序，也有可能是能够远程截取并破坏消息内容的外部程序。</p></li><li><p><strong>授信的攻击者</strong>授信的攻击者与同意云环境中的云用户共享IT资源，试图利用合法的证书来把云提供者以及它们共享IT资源的云租户作为攻击目标。不同匿名攻击者（它们是非授权的），授信的攻击者通常滥用合法的证书或通过挪用敏感和保密的信息，在云的信任边界内部发动攻击。</p></li><li><p><strong>恶意的内部人员</strong>恶意的内部人员是人为的威胁作用者，它们的行为代表云提供者或者与之有关。它们通常是现任或前任雇员，或是能够访问云提供者资源范围的第三方。这种类型的威胁作用者会带来极大的破坏可能性，因为恶意的内部人员可能拥有访问云用户IT资源的管理特权。</p></li></ul><h2 id="列举云安全威胁有哪些并简要说明">2.列举云安全威胁有哪些，并简要说明</h2><p>云安全威胁可能来自内部也可以来自外部，可能来自于人也可能来自于软件程序。</p><ul><li><p><strong>流量窃听</strong></p><p>流量窃听是指当数据在传输到云中或在云内部传输时（通常是从云用户到云提供者）被恶意的服务作用者被动地截获，用于非法的信息收集之目的，这种攻击的目的就是直接破坏数据的保密性，可能也破坏了云用户和云提供者之间关系的保密性。由于这种攻击被动的本质，这种攻击更容易长时间进行而不被发现。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261333111.png"alt="202203191837611" /><figcaption aria-hidden="true">202203191837611</figcaption></figure></li><li><p><strong>恶意媒介</strong></p><p>恶意媒介威胁是指消息被恶意服务作用者截获并且被篡改，因此可能会被破坏消息的保密性和完整性。它还有可能在把消息转发到目的地之前插入有害的数据。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261333056.png"alt="202203191838726" /><figcaption aria-hidden="true">202203191838726</figcaption></figure></li><li><p><strong>拒绝服务</strong></p><p>拒绝服务（Dos）攻击的目标是使IT资源过载至无法正确运行。这种形式的攻击通过是以以下方式之一发起的：</p><ul><li><p>云服务上的负载由于伪造的消息或重复的通信请求不正常地增加。</p></li><li><p>网络流量过载，降低了响应性，性能下降。</p></li><li><p>发出多个云服务请求，每个请求都设计成消耗过量的内存和处理资源。</p></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261334487.png"alt="202203191840953" /><figcaption aria-hidden="true">202203191840953</figcaption></figure></li><li><p><strong>授权不足</strong></p><p>授权不足攻击是指错误地授予攻击者访问权限或是授权太宽泛，导致攻击者能够访问到本应该受到保护的IT资源。通常结果就是攻击者获得了对某些IT资源的直接访问的权利，这些资源实现的时候是假设只能是授信的用户程序才能访问的。这种攻击的一种变种称为弱认证，如果用弱密码或共享来保持IT资源就可能导致这种攻击</p></li><li><p><strong>虚拟化攻击</strong></p><p>虚拟化攻击利用的是虚拟化环境中的漏洞，获得了对底层物理硬件未被授权的访问</p></li><li><p><strong>信任边界重叠</strong></p><p>重叠的信任边界潜藏了一种威胁，攻击者可以利用多个云用户共享的、基于云的IT资源</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题优化</title>
    <link href="/2022/03/17/fluid%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <url>/2022/03/17/fluid%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>虽然fluid主题已经非常好看了，但我依旧可以通过一些简单的操作，让你的博客更加易用（更花里胡哨和装逼）<spanclass="github-emoji" data-alias="smile" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="fluid-页脚增加网站运行时长">1. Fluid 页脚增加网站运行时长</h2><p>主题预览网站中有了很详细的介绍，这里就不在重复了</p><p><ahref="https://hexo.fluid-dev.com/posts/fluid-footer-custom/">配置链接</a>，效果如下：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261337892.png"alt="202203172342237" /><figcaption aria-hidden="true">202203172342237</figcaption></figure><h2 id="markdown-使用emoji">2. markdown 使用emoji</h2><p>默认不支持输入emoji表情，我们可以通过hexo-filter-emoji插件实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-emoji<br></code></pre></td></tr></table></figure><p>之后在hexo配置文件，_config.html中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">## hexo-filter-emoji</span><br><span class="hljs-attr">emoji:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure><p>效果如下<span class="github-emoji" data-alias="thumbsup" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span>:</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261338900.png"alt="202203172346789" /><figcaption aria-hidden="true">202203172346789</figcaption></figure><h2 id="使用tidio进行实时交流">3. 使用Tidio进行实时交流</h2><p>Tidio是一个客服服务平台，可以在blog中实现LiveChat,存在网页端和移动端，可以及时回复消息，同时免费功能足够我们使用，效果如下：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261337746.png"alt="202203191703130" /><figcaption aria-hidden="true">202203191703130</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261338806.png"alt="202203191703265" /><figcaption aria-hidden="true">202203191703265</figcaption></figure><ul><li><p>首先进入 <a href="https://www.tidio.com/">Tidio 官网</a>进行注册，可能需要魔法上网</p></li><li><p>选择live chat 在settings 中调整自己的语句和外观</p></li><li><p>在setting-&gt;developver中复制public key</p><p><img src="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203191711294.png" alt="image-20220319171101114" style="zoom: 50%;" /></p></li><li><p>在主题的配置文件中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Tidio online chat</span><br><span class="hljs-attr">tidio:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">your</span> <span class="hljs-string">public</span> <span class="hljs-string">key</span><br></code></pre></td></tr></table></figure></li><li><p>更改主题文件</p><p>/hexo-theme-fluid/layout_partials/footer.ejs中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 在线通讯Tidio --&gt;<br>&lt;% if (theme.tidio.enable)&#123; %&gt;<br>&lt;script src=&quot;//code.tidio.co/your_public_key.js&quot;&gt;&lt;/script&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure></li><li><p>重新部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算小于等于N的质数的并行算法</title>
    <link href="/2022/03/17/%E8%AE%A1%E7%AE%97%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EN%E7%9A%84%E8%B4%A8%E6%95%B0%E7%9A%84%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/"/>
    <url>/2022/03/17/%E8%AE%A1%E7%AE%97%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EN%E7%9A%84%E8%B4%A8%E6%95%B0%E7%9A%84%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="遍历每一个数判断是否是质数">1. 遍历每一个数，判断是否是质数</h2><h3 id="朴素方法-是否可以被整除">朴素方法 是否可以被整除</h3><p>我们判断<spanclass="math inline">\(N\)</span>是否是质数时，不选要考虑<spanclass="math inline">\(\leq N\)</span>的所有情况,只需要考虑<spanclass="math inline">\(N\)</span>是否可以被小于等于<spanclass="math inline">\(\sqrt{N}\)</span>的数整除就可以了，因此代码如下(此时不考虑并行情况)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ifprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-built_in">sqrt</span>(n); k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % k == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">long</span>&gt; &amp;prime)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= SIZE; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ifprime(i))<br>            prime.<span class="hljs-built_in">emplace_back</span>(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">long</span>&gt; prime;<br>    <span class="hljs-type">double</span> t = <span class="hljs-built_in">omp_get_wtime</span>();<br>    <span class="hljs-comment">// add your codes begin</span><br>    <span class="hljs-built_in">getPrime</span>(prime);<br>    <span class="hljs-comment">// add your codes end</span><br>    t = <span class="hljs-built_in">omp_get_wtime</span>() - t;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;time %f %ld\n&quot;</span>, t, <span class="hljs-built_in">long</span>(SIZE));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nsize %ld\n&quot;</span>, prime.<span class="hljs-built_in">size</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.477831</p></blockquote><p>时间后的1000000时参数SIZE，含义是<span class="math inline">\(\leq1000000\)</span>中有78498个质数</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261347360.png"alt="202203171647230" /><figcaption aria-hidden="true">202203171647230</figcaption></figure><p>而在使用openmp并行后，从2-SIZE，每个线程分配一部分，判断是否为质数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ifprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-built_in">sqrt</span>(n); k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % k == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">long</span>&gt; &amp;prime)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 并行的写入vector</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel</span><br>    &#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; vec_private;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for nowait schedule(static)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= SIZE; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ifprime(i))<br>                vec_private.<span class="hljs-built_in">emplace_back</span>(i);<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical</span><br>        prime.<span class="hljs-built_in">insert</span>(prime.<span class="hljs-built_in">end</span>(), vec_private.<span class="hljs-built_in">begin</span>(), vec_private.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.033235</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261348208.png"alt="202203171651834" /><figcaption aria-hidden="true">202203171651834</figcaption></figure><h3 id="优化判断质数函数">优化判断质数函数</h3><p>首先，我们应该知道一个关于质数分布的规律：<strong>大于等于5的质数一定和6的倍数相邻</strong>。例如5和7，11和13,17和19,<strong>反之是不一定成立的</strong></p><p>证明：令x≥1，将大于等于5的自然数表示如下：···6x-1，6x，6x+1，6x+2，6x+3，6x+4，6x+5，6(x+1），6(x+1)+1 ···</p><p>可以看到，不和6的倍数相邻的数为6x+2，6x+3，6x+4，由于2(3x+1)，3(2x+1)，2(3x+2)，所以它们一定不是素数，再除去6x本身，显然，素数要出现只可能出现在6x的相邻两侧。因此在5到<spanclass="math inline">\(\sqrt{n}\)</span>中每6个数只判断2个，时间复杂度O(<spanclass="math inline">\(\frac{\sqrt{n}}{3}\)</span>),C++代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ifprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span> || n == <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">6</span> != <span class="hljs-number">1</span> &amp;&amp; n % <span class="hljs-number">6</span> != <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">5</span>; k &lt;= <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">sqrt</span>(n)); k += <span class="hljs-number">6</span>)<br>        <span class="hljs-keyword">if</span> (n % k == <span class="hljs-number">0</span> || n % (k + <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>串行 <strong>此时运行时间为</strong></p><blockquote><p>time=0.156363</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261348573.png"alt="202203171659060" /><figcaption aria-hidden="true">202203171659060</figcaption></figure><p>并行 <strong>此时运行时间为</strong></p><blockquote><p>time=0.015401</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261348471.png"alt="202203171713716" /><figcaption aria-hidden="true">202203171713716</figcaption></figure><h2 id="使用筛法">2. 使用筛法</h2><p>我们可以标记所有合数，然后求质数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">long</span> sign[SIZE + <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">long</span>&gt; &amp;prime)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> N = <span class="hljs-built_in">sqrt</span>(SIZE);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!sign[i])<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= SIZE / i; j++)<br>        sign[i * j] = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>sign[i]=true表示i为合数，当一个数i是质数时，我们标记<spanclass="math inline">\(i*j\)</span>为合数，<spanclass="math inline">\(i*j\leq SIZE\)</span></p><h3 id="串行">串行</h3><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.021131</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261349127.png"alt="202203171712942" /><figcaption aria-hidden="true">202203171712942</figcaption></figure><h3 id="在遍历时并行">在遍历时并行</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">  <span class="hljs-type">int</span> N = <span class="hljs-built_in">sqrt</span>(SIZE);<br>  <span class="hljs-comment">// 并行的使用筛法找出所有合数</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for num_threads(NUM_THREADS)</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!sign[i])<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= SIZE / i; j++)<br>        sign[i * j] = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.012204</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261349515.png"alt="202203171716363" /><figcaption aria-hidden="true">202203171716363</figcaption></figure><h3 id="在寻找合数时并行">在寻找合数时并行</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">  <span class="hljs-type">int</span> N = <span class="hljs-built_in">sqrt</span>(SIZE);<br><span class="hljs-comment">// 并行的使用筛法找出所有合数</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!sign[i])<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for num_threads(NUM_THREADS)</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= SIZE / i; j++)<br>        sign[i * j] = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.006109</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261349256.png"alt="202203171718941" /><figcaption aria-hidden="true">202203171718941</figcaption></figure><h2 id="时间对比">3. 时间对比</h2><table><thead><tr class="header"><th>方法</th><th>时间</th></tr></thead><tbody><tr class="odd"><td>朴素方法 串行</td><td>0.477831</td></tr><tr class="even"><td>朴素方法 并行</td><td>0.033235</td></tr><tr class="odd"><td>优化判断质数 串行</td><td>0.156363</td></tr><tr class="even"><td>优化判断质数 并行</td><td>0.015401</td></tr><tr class="odd"><td>筛法 串行</td><td>0.021131</td></tr><tr class="even"><td>筛法 遍历时并行</td><td>0.012204</td></tr><tr class="odd"><td>筛法 寻找合数时并行</td><td>0.006109</td></tr></tbody></table><h2 id="多线程写入vector">4. 多线程写入vector</h2><p>在完成上述问题时，遇到过循环中多线程无法对同一个vector进行写操作，有以下几种解决方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel</span><br>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec_private;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for nowait <span class="hljs-comment">//fill vec_private in parallel</span></span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>        vec_private.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical</span><br>    vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">end</span>(), vec_private.<span class="hljs-built_in">begin</span>(), vec_private.<span class="hljs-built_in">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>OpenMP 4.0允许使用reduction</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp declare reduction (merge : std::vector<span class="hljs-string">&lt;int&gt;</span> : omp_out.insert(omp_out.end(), omp_in.begin(), omp_in.end()))</span><br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for reduction(merge: vec)</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) <br>    vec.<span class="hljs-built_in">push_back</span>(i);<br></code></pre></td></tr></table></figure><p>较为详细的可以这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel</span><br>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec_private;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for nowait schedule(static)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123; <br>        vec_private.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for schedule(static) ordered</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">omp_get_num_threads</span>(); i++) &#123;<br>        <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp ordered</span><br>        vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">end</span>(), vec_private.<span class="hljs-built_in">begin</span>(), vec_private.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>并行计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算作业1</title>
    <link href="/2022/03/13/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A1/"/>
    <url>/2022/03/13/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A1/</url>
    
    <content type="html"><![CDATA[<h2id="一云使能技术主要包括哪些技术组件简要说明其关键特征">一、云使能技术主要包括哪些技术组件？简要说明其关键特征。</h2><h4 id="数据中心技术">1. 数据中心技术</h4><p>一种特殊的IT基础设施，用于集中放置IT资源，包括服务器、数据库、网络与通信设备以及软件系统。数据中心是全球协作的特定设备网络，用来在因特网上传递、加速、展示、计算、存储数据信息。数据中心大部分电子元件都是由低直流电源驱动运行的。数据中心的产生致使人们的认识从定量、结构的世界进入到不确定和非结构的世界中，它将和交通、网络通讯一样逐渐成为现代社会基础设施的一部分，进而对很多产业都产生了积极影响。不过数据中心的发展不能仅凭经验，还要真正的结合实践，促使数据中心发挥真正的价值作用，促使社会的快速变革。</p><h3 id="虚拟化技术">2. 虚拟化技术</h3><p>是将物理IT资源转换为虚拟IT资源的过程，虚拟服务器使用自己的客户操作系统，独立于创建虚拟服务器的操作系统，在虚拟服务器上运行的客户操作系统和应用软件，都不会感知到虚拟化的过程。</p><h3 id="web技术">3. web技术</h3><p>Web是一种典型的分布式应用结构。Web应用中的每一次信息交换都要涉及客户端和服务端。因此，Web开发技术大体上也可以被分为客户端技术和服务端技术两大类。Web客户端的主要任务是展现信息内容。Web客户端设计技术主要包括HTML语言、JavaApplets、脚本程序、CSS、DHTML、插件技术以及VRML技术。与Web客户端技术从静态向动态的演进过程类似，Web服务端的开发技术也是由静态向动态逐渐发展、完善起来的。Web服务器技术主要包括服务器、CGI、PHP、ASP、ASP.NET、Servlet和JSP技术。</p><h3 id="多租户技术">4. 多租户技术</h3><p>多租户简单来说是指一个单独的实例可以为多个组织服务。多租户技术为共用的数据中心内如何以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。一个支持多租户技术的系统需要在设计上对它的数据和配置进行虚拟分区，从而使系统的每个租户或称组织都能够使用一个单独的系统实例，并且每个租户都可以根据自己的需求对租用的系统实例进行个性化配置。多租户技术可以实现多个租户之间共享系统实例，同时又可以实现租户的系统实例的个性化定制。通过使用多租户技术可以保证系统共性的部分被共享，个性的部分被单独隔离。通过在多个租户之间的资源复用，运营管理维护资源，有效节省开发应用的成本。而且，在租户之间共享应用程序的单个实例，可以实现当应用程序升级时，所有租户可以同时升级。同时，因为多个租户共享一份系统的核心代码，因此当系统升级时，只需要升级相同的核心代码即可。</p><h3 id="服务技术">5. 服务技术</h3><p>基于Web的服务(如Web服务和REST服务)依靠非专有通信和技术接口定义来建立基于Web技术的标准通信框架，服务代理提供事件驱动运行时处理，适用于云中大量的功能。许多代理都自动部署在操作系统和基于云的产品中，服务中间件(如ESB和业务流程平台)可以在云上部署。</p><h2id="二列举至少3种虚拟化软件并概括其特点">二、列举至少3种虚拟化软件，并概括其特点。</h2><ul><li><p>VMware ESXi侧重于服务器虚拟化，技术较成熟，功能也多，支持虚机系统多。</p></li><li><p>Xenserver重点在于桌面虚拟化，性价比高，网络性能好，适用于快速与大规模部署，支持系统也相对较多。</p></li><li><p>Hype-V 微软开发，起步相对较晚，对于MS的系统较为支持。</p></li><li><p>Oracle VM VirtualBox 开源，支持的系统种类繁多。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将hexo源码上传github</title>
    <link href="/2022/03/11/%E5%B0%86hexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0github/"/>
    <url>/2022/03/11/%E5%B0%86hexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0github/</url>
    
    <content type="html"><![CDATA[<p>在将博客部署在github后，因为仓库的默认分支中存储的是静态html，而不是源码，所以在重新部署时会非常麻烦，需要重新配置。因为本身是一个喜欢折腾的人，为了防止某一天环境搞乱后追悔莫及，也为了方便查看配置文件更改了什么内容，所以使用版本控制是十分必要的。（额。。每个主题config不同，而我未来换主题的次数可能有辣么一点点多。)</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261340923.png" alt="202203112113312" style="zoom:50%;" /></p><p>网上的教程挺多的，但是有点过程十分繁琐而且没有必要。在尝试后，我总结了相对简单的步骤，使用vscode进行图形化git操作，因为我身边的大部分人可能只会git clone</p><h3 id="新建分支">1. 新建分支</h3><p>一般来说，hexo生成的静态html文件都保存在master分支，我们需要新建一个分支用来存储源代码，我新建了source分支</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261341357.png" alt="202203112044392" style="zoom:50%;" /></p><p>然后把source设置为默认分支</p><p><strong>Settings-&gt;Branches-&gt;Default branches</strong></p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261341110.png" alt="202203112047709" style="zoom:67%;" /></p><h3 id="本地操作">2. 本地操作</h3><p>将仓库克隆到本地，使用vscode打开，左下角应该显示source分支</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261342795.png" alt="202203112051236" style="zoom:80%;" /></p><p>把里边的东西删掉，因为source是从master clone过来的静态html我们并不需要这些东西，保留.git文件夹</p><p>然后将你的hexo文件夹下的所有内容复制到该文件下(执行hexo clean &amp; g&amp;s 的目录) 如果主题是clone下来的，删除主题文件夹下的.git文件夹</p><p><img src="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203112054538.png" alt="image-20220311205410479" style="zoom: 67%;" /></p><p>一般来说在初始化会自己有.gitignore文件，没有的话就自己新建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br>_multiconfig.yml<br></code></pre></td></tr></table></figure><p>这样的目的是把无关的内容去掉，因为我们只需要config以及博客.md，npm依赖包和生成的静态html我们并不需要</p><p>再次确定<strong>博客是部署在非source分支</strong>，一般在_config.yml文件下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h3 id="推送">3. 推送</h3><p>将更改提交，并且推送到github</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261345221.png"alt="202203112104237" /><figcaption aria-hidden="true">202203112104237</figcaption></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261346720.png" alt="202203112106897" style="zoom:67%;" /></p><p>这时我们就成功了，在本地做更改时，我们会将更改的config文件和md文件推送到source分支</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261346277.png" alt="202203112109311" style="zoom:67%;" /></p><p>而执行hexo d 会部署在master分支</p><p><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261346698.png"alt="202203112110969" /><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261347781.png"alt="202203112110060" /></p><p>至此我们的目的就达到了，这样在弄些花里胡哨的东西时就不用担心出现错误无法回退了。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>准备考研有感</title>
    <link href="/2022/03/11/%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/"/>
    <url>/2022/03/11/%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="之前">之前</h3><p>基本上大家对学习的态度，你拉着我走，我也不想走：</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261335384.png" alt="202203111547111" style="zoom:67%;" /></p><h3 id="现在">现在</h3><p>上课到处都是拿着考研书籍的人，图书馆也都是熟人，这让躺在床上的我很难啊</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261335500.png"alt="202203111549187" /><figcaption aria-hidden="true">202203111549187</figcaption></figure><p>争取努力努力，拼搏9个月，我要有学上 <span class="github-emoji"data-alias="muscle" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/09/hello-world/"/>
    <url>/2022/03/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 笔记</title>
    <link href="/2022/03/08/LeetCode-%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/08/LeetCode-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="两数之和">1. 两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案 <imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261329962.png"alt="202203021820930" /></p><p>链接：https://leetcode-cn.com/problems/two-sum</p><h3 id="解法">解法：</h3><p>常规思路是使用两个for循环，遍历数组中的组合方式，返回满足结果的答案；</p><p>时间复杂度是<span class="math inline">\(O(n^2)\)</span>;</p><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numslength; i++)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; numslength; j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(nums[i]+nums[j]==target &amp;&amp; i!=j)<br>        &#123;<br>            res.<span class="hljs-built_in">emplace_back</span>(i);<br>            res.<span class="hljs-built_in">emplace_back</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种解法，使用map数据结构，&lt;key,value&gt;=&lt;nums[i],index&gt;;遍历数组，使用count();计算target-nums[i]的个数，使用map在<spanclass="math inline">\(O(1)\)</span>的时间复杂度内找到taget-nums[i]的index;</p><p>因为count()函数时间复杂度为<span class="math inline">\(O(\log^{n})\)</span>,总的时间复杂度为<spanclass="math inline">\(O(n\log{n})\)</span>;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; M;<br>    <span class="hljs-type">int</span> numslength = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numslength;++i)&#123;<br>        M.<span class="hljs-built_in">insert</span>(&#123;nums[i], i&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numslength;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> numsOfOther = M.<span class="hljs-built_in">count</span>(target - nums[i]);<br>        <span class="hljs-keyword">if</span>(numsOfOther&gt;<span class="hljs-number">0</span>&amp;&amp;(M[target - nums[i]]!=i))&#123;<br>            res.<span class="hljs-built_in">emplace_back</span>(i);<br>            res.<span class="hljs-built_in">emplace_back</span>(M[target - nums[i]]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="两数相加">2.两数相加</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261330735.png"alt="202203021937657" />链接：https://leetcode-cn.com/problems/add-two-numbers</p><h3 id="解题">解题</h3><p>难点在于返回的是一个指针</p><p>建立一个头节点，使用while循环，遍历两个数组，对应数字相加，mod10放入新链表，、10与下一组累加；同时在循环外判断最后一个数在/10是否大于0，如果大于0，新加一个节点；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span><br>&#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function">ListNode *<span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode *l1, ListNode *l2)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    ListNode *prehead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>    ListNode *cur = prehead;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l1 || l2)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (l1)<br>            t += l1-&gt;val, l1 = l1-&gt;next;<br>        <span class="hljs-keyword">if</span> (l2)<br>            t += l2-&gt;val, l2 = l2-&gt;next;  <span class="hljs-comment">// 一般情况下 t += (A[i] + B[i])后是一个0-19大的数字，个位push到当前位，而十位只有0和1作为进位继续后面的加法</span><br>        cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t % <span class="hljs-number">10</span>); <span class="hljs-comment">// t % 10 是 t的个位</span><br>        cur = cur-&gt;next;<br>        t /= <span class="hljs-number">10</span>; <span class="hljs-comment">// t/=10，计算是否有进位，并更新t, 在下一轮继续 t += (A[i] + B[i])</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (t)<br>    &#123;<br>        cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t);<br>    &#125; <span class="hljs-comment">// 别忘了如果最后一位加法完成后，还得考虑进位</span><br>    <span class="hljs-keyword">return</span> prehead-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无重复字符的最长字串">3. 无重复字符的最长字串</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong> 的长度。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261330085.png"alt="202203021951814" /><figcaption aria-hidden="true">202203021951814</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261331174.png"alt="202203021952737" /><figcaption aria-hidden="true">202203021952737</figcaption></figure><h3 id="解题-1">解题：</h3><p>使用滑动数组解决</p><p>定义一个数组numOfCha用来记录每种字母与空格的数量，定义leftIndex标记子串的左界</p><p>使用for循环遍历字符串：如果遍历到的字符已出现次数为0,子串向右加一，numOfCha更新，计算长度(i-letIndex+1)，更新最大长度；否则不断弹出最左侧的字符，leftIndex++,相当于向右滑动；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> leftIndex=<span class="hljs-number">0</span>, maxLength=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> numOfCha[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">memset</span>(numOfCha, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(numOfCha));<br>    set&lt;<span class="hljs-type">char</span>&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len;i++)<br>    &#123;<br>      <span class="hljs-keyword">while</span> (numOfCha[s[i]-<span class="hljs-string">&#x27; &#x27;</span>]!=<span class="hljs-number">0</span>)<br>      &#123;<br>          numOfCha[s[leftIndex] - <span class="hljs-string">&#x27; &#x27;</span>]--;<br>          leftIndex++;<br>      &#125;<br>      maxLength = <span class="hljs-built_in">max</span>(maxLength, i - leftIndex + <span class="hljs-number">1</span>);<br>      numOfCha[s[i] - <span class="hljs-string">&#x27; &#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLength;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最长回文子串">5. 最长回文子串</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code>中最长的回文子串</p><figure><imgsrc="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203022141480.png"alt="image-20220302214119440" /><figcaption aria-hidden="true">image-20220302214119440</figcaption></figure><h3 id="解法-1">解法：</h3><ul><li><p>扩展中心</p><p>我们知道字符串一定是对称的，所以我们可以每次循环的时候选择一个中心，进行左右扩展，判断新扩展的字符是否相等。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261331315.png"alt="202203041856092" /><figcaption aria-hidden="true">202203041856092</figcaption></figure><p>因为存在奇数的字符串或者偶数的字符串，所以我们需要从一个字符开始扩展，或者两个连续的字符开始扩展，所以共有n+ (n-1)个中心。</p><p>时间复杂度：O(<span class="math inline">\(n^2\)</span>）O(<spanclass="math inline">\(n^2\)</span>）。</p><p>空间复杂度：O(1）O(1）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">expendAroundCenter</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> lef, <span class="hljs-type">int</span> rig)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> subLef = lef;<br>    <span class="hljs-type">int</span> subRig = rig;<br>    <span class="hljs-comment">// 左界应该在大于等于0，右界应当小于字符串的长度，同时新扩展的两个字符应当相等</span><br>    <span class="hljs-keyword">while</span> ((subLef &gt;= <span class="hljs-number">0</span>) &amp;&amp; (subRig &lt; s.<span class="hljs-built_in">length</span>()) &amp;&amp; (s[subLef] == s[subRig]))<br>    &#123;<br>        subLef--;<br>        subRig++;<br>    &#125;<br>    <span class="hljs-comment">//返回的是以s[lef,rig]为中心的回文子串长度</span><br>    <span class="hljs-keyword">return</span> subRig - subLef + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//如果S是空，则返回空</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;&quot;</span> || s.<span class="hljs-built_in">length</span>() &lt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//用来标记最长回文子串的左右界</span><br>    <span class="hljs-type">int</span> strStart = <span class="hljs-number">0</span>, strEnd = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">int</span> strLen = s.<span class="hljs-built_in">length</span>();<br><span class="hljs-comment">//遍历每一个字符</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; strLen; i++)<br>    &#123;<br>        <span class="hljs-comment">//以该字符为中心，或者连续两个字符为中心</span><br>        <span class="hljs-type">int</span> len1 = <span class="hljs-built_in">expendAroundCenter</span>(s, i, i);<br>        <span class="hljs-type">int</span> len2 = <span class="hljs-built_in">expendAroundCenter</span>(s, i, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">max</span>(len1, len2);<br>        <span class="hljs-comment">//如果长度大于我们标记的，更新左右界</span><br>        <span class="hljs-keyword">if</span> (len &gt; strEnd - strStart + <span class="hljs-number">1</span>)<br>        &#123;<br>            strStart = i - (len - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            strEnd = i + len / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(strStart, strEnd - strStart + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="字符串转整数">8. 字符串转整数</h2><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><p>函数 myAtoi(string s) 的算法如下：</p><ol type="1"><li>读入字符串并丢弃无用的前导空格</li><li>读入下一个字符，确定正负号，若不存在假定为正</li><li>读入数字转化为整数，无数字则为0</li><li>若溢出int,则截断整数</li></ol><hr /><p>输入: s=“ -42 akkk”</p><p>输出: -42</p><p>输入: s="-2147483648"</p><p>输出: -2147483648</p><p>输入: s=“ 2147483648”</p><p>输出: 2147483648</p><p>链接：https://leetcode-cn.com/problems/string-to-integer-atoi</p><h3 id="解法-2">解法：</h3><p>思路较为清晰和明确，整体是遍历一遍字符串</p><p>首先去除开头的空格，index++;</p><p>如果index==len,全是空格，则返回0；</p><p>之后判断正负，使用sign标定</p><p>转化数字时因为只能使用32位，所以判断时应该与INT_MAX/10比较，因为INT数字范围是<spanclass="math inline">\(\left[ -2^{32},2^{32}-1\right]\)</span>，所以在判断个位数时应该使用大于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>, sign = <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//如果是空格，索引向后</span><br>    <span class="hljs-keyword">while</span> (s[index] == <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; index &lt; len)<br>    &#123;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index == len)<br>    &#123; <span class="hljs-comment">//整个字符串都是空格</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[index] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#123; <span class="hljs-comment">//是否为负数</span><br>            sign = <span class="hljs-number">-1</span>;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[index] == <span class="hljs-string">&#x27;+&#x27;</span>)<br>        &#123; <span class="hljs-comment">//是否为正数</span><br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (index &lt; len &amp;&amp; s[index] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s[index] &gt;= <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> curDigit = s[index] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (res &gt; INT_MAX / <span class="hljs-number">10</span> || ((res == INT_MAX / <span class="hljs-number">10</span>) &amp;&amp; (curDigit &gt; INT_MAX % <span class="hljs-number">10</span>)))<br>            &#123;<br>                <span class="hljs-keyword">return</span> sign==<span class="hljs-number">1</span>?INT_MAX:INT_MIN;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                res = res * <span class="hljs-number">10</span> + curDigit;<br>            &#125;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sign * res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最长公共前缀">14. 最长公共前缀</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>""</code></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203151519386.png"alt="image-20220315151908284" /><figcaption aria-hidden="true">image-20220315151908284</figcaption></figure><p>题目链接：https://leetcode-cn.com/problems/longest-common-prefix/</p><h3 id="解法-3">解法：</h3><h5 id="暴力">1. 暴力</h5><p>首先，我们可以找到最短串的长度minStrLen，这样在比较每个字母是就不用担心会溢出</p><p>然后，遍历每个字符串，当同一index的字母相同时，res加上该字母，否则break</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>       string res = <span class="hljs-string">&quot;&quot;</span>;<br>       <span class="hljs-type">int</span> minStrLen = <span class="hljs-number">300</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; strs.<span class="hljs-built_in">size</span>(); i++)<br>       &#123;<br>           <span class="hljs-type">int</span> indexLen = strs[i].<span class="hljs-built_in">size</span>();<br>           <span class="hljs-keyword">if</span> (indexLen &lt; minStrLen)<br>           &#123;<br>               minStrLen = indexLen;<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; minStrLen; i++)<br>       &#123;<br>           <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; strs.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; j++)<br>           &#123;<br>               <span class="hljs-keyword">if</span>(strs[j][i]!=strs[j+<span class="hljs-number">1</span>][i])<br>               &#123;<br>                   flag = <span class="hljs-literal">false</span>;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(flag)<br>               res += strs[<span class="hljs-number">0</span>][i];<br>           <span class="hljs-keyword">else</span><br>               <span class="hljs-keyword">break</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的结果为</p><h5 id="image-20220315161954911"><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203151619970.png"alt="image-20220315161954911" /></h5><h5 id="字典序排序">2. 字典序排序</h5><p>在对字符串进行sort时，是按照字典序，所以我们完全可以在排序后比较第一个和最后一个的公共前缀子串，这样就可以省去比较每一个字符串的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt; &amp;strs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(strs.<span class="hljs-built_in">begin</span>(), strs.<span class="hljs-built_in">end</span>());<br>    string res;<br>    string first = strs.<span class="hljs-built_in">front</span>();<br>    string end = strs.<span class="hljs-built_in">back</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; first.<span class="hljs-built_in">size</span>() &amp;&amp; i &lt; end.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(first[i]!=end[i])&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        res += first[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203151624701.png"alt="image-20220315162405643" /><figcaption aria-hidden="true">image-20220315162405643</figcaption></figure><p>这样极大的缩短了代码量，大佬们的脑洞太大了</p><h2 id="三数之和">15. 三数之和</h2><h3 id="题目描述">题目描述</h3><p>给定一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断<code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b +c =</em> 0 ？找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><h4 id="示例">示例</h4><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs inform7">给定数组 nums = <span class="hljs-comment">[-1, 0, 1, 2, -1, -4]</span>，<br><br>满足要求的三元组集合为：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[-1, 0, 1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[-1, -1, 2]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><h3 id="题目解析">题目解析</h3><p>最容易想到的就是三重循环暴力法搜索，时间复杂度为 <code>O(n^3)</code>.有点高啊，优化一下.</p><p>通过题目我们了解到，主要问题在于 <code>搜索所有满足条件的情况</code>和 <code>避免重复项</code>，那么我们可以使用<code>升序数组 + 双指针</code> 有效处理问题并降低时间复杂度.</p><p>你可能想知道为啥会选择使用这个方案 ？</p><p>首先数组排序时间复杂度可以达到<code>O(NlogN)</code>，这点时间消耗我们是能接受的，另外根据有序数组的特性，数组重复项会挨在一起，不需要额外的空间存储就能跳过重复项，由于是升序，当发现最左边的数值大于0，就可以及时跳出来结束运算.</p><p>双指针可以用来<code>降维</code>.通过遍历数组，取当前下标值为<code>定值</code>，双指针代表<code>定值</code>后面子数组的<code>首尾数值</code>，通过不断靠近双指针来判断三个值的和。</p><p>具体算法流程如下：</p><ol type="1"><li>特判：对于数组长度 <code>n</code>，如果数组为 <code>null</code>或者数组长度小于 <code>3</code>，返回<code>[ ]</code> ;</li><li>数组升序排序；</li><li>遍历数组：<ul><li>若<code>num[i] &gt; 0</code>：因为是升序，所以结果不可能等于0，直接返回结果；</li><li>令左指针 <code>L = i + 1</code>，右指针 <code>R = n - 1</code>，当<code>L &lt; R</code> 时，执行循环：<ul><li>当 <code>nums[i] + nums[L] + nums[R] == 0</code>，执行循环，判断左指针和右指针是否和下一位置重复，<code>去除重复解</code>。并同时将<code>L,R</code> 移到下一位置，寻找新的解；</li><li>若<code>和</code>大于 <code>0</code>，说明 <code>nums[R]</code>太大，<code>R指针</code> 左移</li><li>若<code>和</code>小于 <code>0</code>，说明 <code>nums[L]</code>太小，<code>L指针</code> 右移</li></ul></li></ul></li></ol><h3 id="参考代码">参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)<br>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> || nums.<span class="hljs-built_in">back</span>() &lt; <span class="hljs-number">0</span> || nums.<span class="hljs-built_in">front</span>() &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; nums.<span class="hljs-built_in">size</span>(); k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums[k] &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//去重操作，如果是nums[k]==nums[k+1],会忽略-1，-1，2这样的情况</span><br>        <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span> &amp;&amp; nums[k] == nums[k - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> target = <span class="hljs-number">0</span> - nums[k];<br>        <span class="hljs-type">int</span> i = k + <span class="hljs-number">1</span>, j = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target)<br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(&#123;nums[k], nums[i], nums[j]&#125;);<br>                <span class="hljs-comment">//因为返回的是数组中的数，所以相同的数我们只需要一个</span><br>                <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i] == nums[i + <span class="hljs-number">1</span>])<br>                    ++i;<br>                <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>])<br>                    --j;<br>                ++i;<br>                --j;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[j] &lt; target)<br>                ++i;<br>            <span class="hljs-keyword">else</span><br>                --j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除链表的倒数第-n-个节点">19 删除链表的倒数第 N 个节点</h2><h3 id="题目描述-1">题目描述</h3><p>给定一个链表，删除链表的倒数第 <em>n</em>个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">给定一个链表: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>, 和 n = <span class="hljs-number">2.</span><br><br>当删除了倒数第二个节点后，链表变为 <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5.</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><p><strong>进阶：</strong></p><p>你能尝试使用一趟扫描实现吗？</p><h3 id="题目解析-1">题目解析</h3><p>采取双重遍历肯定是可以解决问题的，但题目要求我们一次遍历解决问题</p><h3 id="解法一-两次遍历">解法一 两次遍历</h3><p>这也是最naive的解法，第一次遍历找到链表的长度，第二次遍历到需要删除节点的前一个节点，使用next指针将所需要删掉的节点绕过。</p><p>需要考虑只存在一个节点或者删除的就是头节点的特殊情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        ListNode *cur = head;<br>        <span class="hljs-type">int</span> nums = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (cur-&gt;next != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            cur = cur-&gt;next;<br>            nums++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums==<span class="hljs-number">1</span>||nums-n==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> head-&gt;next;<br>        <span class="hljs-comment">// 到删除节点的前一个</span><br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (index &lt; (nums - n))<br>        &#123;<br>            cur = cur-&gt;next;<br>            index++;<br>        &#125;<br><br>        ListNode *ptr = cur-&gt;next;<br>        cur-&gt;next = ptr-&gt;next;<br>        <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解法二-快慢指针">解法二 快慢指针</h3><p>很容易就可以想到我们何不声明一个快慢指针，快指针比慢指针领先n个进度，当快指针指向最后一个时，慢指针指向我们需要删掉的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//无节点或者只有一个头节点</span><br>        <span class="hljs-keyword">if</span>(!head | !head -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode * fast = head, *slow = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            fast = fast -&gt; next;<br>        &#125;<br>        <span class="hljs-comment">//链表长度小于n时，相当于删掉头节点</span><br>        <span class="hljs-keyword">if</span>(!fast)&#123;<br>            <span class="hljs-keyword">return</span> head -&gt; next;    <br>        &#125;<br>        <span class="hljs-comment">//找到我们需要的节点</span><br>        <span class="hljs-keyword">while</span>(fast -&gt; next)&#123;<br>            fast = fast -&gt; next;<br>            slow = slow -&gt; next;<br>        &#125;<br>        slow -&gt; next = slow -&gt; next -&gt; next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="解法三-递归">解法三 递归</h3><p>因为递归过程，所以我们实际上首先找到的是链表的最后一个，并向前回溯，回溯过程中cur++；当找到我们应该删掉的节点时，返回的实际上是next指针，相当于返回了下一个节点，等价于删除操作；正常应该返回的是当前节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>;<br><span class="hljs-function">ListNode *<span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode *head, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!head)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    head-&gt;next = <span class="hljs-built_in">removeNthFromEnd</span>(head-&gt;next, n);<br>    cur++;<br>    <span class="hljs-keyword">if</span> (n == cur)<br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有效的括号">20. 有效的括号</h2><h3 id="题目描述-2">题目描述</h3><p>给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul><h3 id="样例">样例</h3><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261453024.png" alt="image-20220326142418796" style="zoom: 67%;" /></p><p>链接：https://leetcode-cn.com/problems/valid-parentheses</p><h3 id="思路">思路</h3><p>这是一道栈的经典题型</p><p>这道题让我们验证输入的字符串是否为括号字符串，包括大括号，中括号和小括号。我们使用<strong>栈</strong>来存储括号</p><ul><li>遍历输入字符串</li><li>如果当前字符为左半边括号时，则将其压入栈中</li><li>如果遇到右半边括号时，<strong>分类讨论：</strong></li><li>1）如栈不为空且为对应的左半边括号，则取出栈顶元素，继续循环<br /></li><li>2）若此时栈为空，则直接返回false</li><li>3）若不为对应的左半边括号，反之返回false</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    stack&lt;<span class="hljs-type">char</span>&gt; brackets;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-comment">//遇到左括号压入栈</span><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] == <span class="hljs-string">&#x27;(&#x27;</span> || s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(s[i]);<br>        <span class="hljs-comment">//右括号分情况</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//情况1:栈为空，没有与右括号匹配，返回false</span><br>            <span class="hljs-keyword">if</span> (!brackets.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">char</span> cur = brackets.<span class="hljs-built_in">top</span>(), match;<br>            brackets.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">//匹配的左括号</span><br>            <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>                match = <span class="hljs-string">&#x27;(&#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;]&#x27;</span>)<br>                match = <span class="hljs-string">&#x27;[&#x27;</span>;<br>            <span class="hljs-keyword">else</span><br>                match = <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>            <span class="hljs-comment">//情况2:扫描到的右括号所匹配的左括号！= 栈顶括号</span><br>            <span class="hljs-keyword">if</span>(match !=cur)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br>    &#125;<br>    <span class="hljs-comment">// 扫描完字符串，是否清空栈</span><br>    <span class="hljs-keyword">return</span> brackets.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 第二种代码写法</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    stack&lt;<span class="hljs-type">char</span>&gt; brackets;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-comment">// 将左括号匹配的右括号压入栈</span><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br>        <span class="hljs-comment">// 扫描遇到右括号</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!brackets.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (brackets.<span class="hljs-built_in">top</span>() != s[i])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span><br>                brackets.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>     <span class="hljs-keyword">return</span> brackets.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="合并两个有序链表">21 合并两个有序链表</h2><h3 id="题目描述-3">题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261438672.png" alt="image-20220326143806602" style="zoom:67%;" /></p><h3 id="一般思路">一般思路</h3><ol type="1"><li>比较链表1和链表2的第一个结点的值，将值小的结点保存下来为合并后的第一个结点。并且把第一个结点为最小的链表向后移动一个元素。</li><li>继续在剩下的元素中选择小的值，连接到第一个结点后面，并不断next将值小的结点连接到第一个结点后面，直到某一个链表为空。</li><li>当两个链表长度不一致时，也就是比较完成后其中一个链表为空，此时需要把另外一个链表剩下的元素都连接到第一个结点的后面。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *list1, ListNode *list2)</span></span><br><span class="hljs-function"></span>&#123;<br>    ListNode *newList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>    ListNode *dummyhead = newList, *p = list1, *q = list2;<br>    <span class="hljs-keyword">while</span> (p &amp;&amp; q)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;val &lt;= q-&gt;val)<br>        &#123;<br>            newList-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(p-&gt;val);<br>            p = p-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            newList-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(q-&gt;val);<br>            q = q-&gt;next;<br>        &#125;<br>        newList = newList-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p)<br>        newList-&gt;next = p;<br>    <span class="hljs-keyword">else</span><br>        newList-&gt;next = q;<br>    <span class="hljs-keyword">return</span> dummyhead-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归实现">递归实现</h3><p>（1）对空链表存在的情况进行处理，假如 list1 为空则返回 list2 ，list2为空则返回 list1。 （2）比较两个链表第一个结点的大小，确定头结点的位置（3）头结点确定后，继续在剩下的结点中选出下一个结点去链接到第二步选出的结点后面，然后在继续重复（2）（3） 步，直到有链表为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *list1, ListNode *list2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (list1 == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> list2;<br>    <span class="hljs-keyword">if</span> (list2 == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> list1;<br>    <span class="hljs-keyword">if</span> (list1-&gt;val &lt; list2-&gt;val)<br>    &#123;<br>        list1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(list1-&gt;next, list2);<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        list2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(list1, list2-&gt;next);<br>        <span class="hljs-keyword">return</span> list2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算实验1-使用github,hexo搭建个人博客</title>
    <link href="/2022/03/08/%E9%85%8D%E7%BD%AEhexo/"/>
    <url>/2022/03/08/%E9%85%8D%E7%BD%AEhexo/</url>
    
    <content type="html"><![CDATA[<h1 id="山东大学-计算机科学与技术-学院-云计算技术-课程实验报告">山东大学计算机科学与技术 学院 云计算技术 课程实验报告</h1><h2 id="姓名学号">1. 姓名学号</h2><p>201900130128 冯子恺 数据19</p><h2 id="实验题目">2. 实验题目</h2><p>Github + Hexo搭建个人博客系统</p><h2 id="实验目的">3. 实验目的</h2><p>熟悉个人博客系统的搭建</p><h2 id="实验环境">4. 实验环境</h2><ul><li><p>硬件环境</p><p>Intel Core I5-8300H</p><p>Nvidia Geforce gtx1060</p></li><li><p>软件环境</p><p>Windows10 21H2</p></li></ul><h2 id="实验步骤与内容">5. 实验步骤与内容</h2><h3 id="注册github账号下载gitnode">5.1注册github账号，下载git，node</h3><p>之前已经做过，而且较为简单，这里不再重复</p><h3 id="新建一个仓库">5.2 新建一个仓库</h3><p>新建一个公共仓库，作为博客的部署的位置</p><h3 id="配置ssh-key">5.3 配置ssh key</h3><p>由于椭圆加密相同密钥长度下，安全性能更高同时计算量小，处理速度快，在私钥的处理速度上比RSA快的多，所以在生成密钥对时，使用ECC加密</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> ecdsa<br></code></pre></td></tr></table></figure><p>将公钥上传到github,测试连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh <span class="hljs-literal">-T</span> git@github.com<br></code></pre></td></tr></table></figure><p>连接成功</p><p><imgsrc="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203072016135.png" /></p><h3 id="配置hexo">5.4 配置hexo</h3><ul><li>安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo<br></code></pre></td></tr></table></figure><ul><li>新建一个文件夹,初始化博客</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><ul><li>安装依赖包，确保git部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>此时本地已经配置好博客</p><p>使用命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h3 id="更换主题">5.5 更换主题</h3><p>依据个人喜好更换主题，这里使用Aurora</p><h3 id="博客部署在github.io">5.6 博客部署在github.io</h3><ul><li><p>复制SSH链接</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261339219.png"alt="202203072023291" /><figcaption aria-hidden="true">202203072023291</figcaption></figure></li><li><p>编辑 config_yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:Fantastic-Feng/Fantastic-Feng.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>配置Deploy keys</p><p>与SSH配置方法相同，存在bug，添加后不显示，不过可以使用</p></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261339347.png"alt="202203072028743" /><figcaption aria-hidden="true">202203072028743</figcaption></figure></li></ul><h3 id="访问">5.7 访问</h3><p>https://f7kyyy.github.io/</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261340471.png"alt="202203072031185" /><figcaption aria-hidden="true">202203072031185</figcaption></figure><h3 id="添加一篇博客">5.7 添加一篇博客</h3><p>生成一个新的md文件，在 ./source/_posts文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;new article&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g     //生成静态页面<br>hexo s    //启动本地服务器进行查看<br>hexo d   //查看后没有问题即可部署到github上<br></code></pre></td></tr></table></figure><figure><img src="C:\Users\FengisZZZ\Desktop\demo\picgo\202203072055102.png"alt="202203072055102" /><figcaption aria-hidden="true">202203072055102</figcaption></figure><h2 id="结论分析与体会">6. 结论分析与体会</h2><p>网络上程序员好像人手一个博客，之前想过用java 和vue自己实现一个博客项目，太麻烦了就一直没弄</p><p>hexo还是比较方便的，同时有各种主题可以选择，还是很不错的</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>云计算</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
