<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vscode 配置msvc编译器 使用vcpkg进行C++包管理</title>
    <link href="/2022/06/27/vscode%20%E9%85%8D%E7%BD%AEmsvc%E7%BC%96%E8%AF%91%E5%99%A8-%E4%BD%BF%E7%94%A8vcpkg%E8%BF%9B%E8%A1%8CC++%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/2022/06/27/vscode%20%E9%85%8D%E7%BD%AEmsvc%E7%BC%96%E8%AF%91%E5%99%A8-%E4%BD%BF%E7%94%A8vcpkg%E8%BF%9B%E8%A1%8CC++%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>主要是还在考试的过程中，完全不想准备考研，在知乎刷到了一篇关于现代c++的介绍，介绍了一些流行的第三方库，如google 的 <code>abseil</code>,facebook 的<code>folly</code>,所以想安装试一试。一般都需要编译安装，非常的麻烦，所以考虑使用msys2来安装，但是<code>folly</code>库msys2居然都没有,果然Windows 还是老老实实的用MSVC吧<span class="github-emoji" alias="dog" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8">&amp;#x1f436;</span>。Vcpkg经过几年的发展已经完全可用了，开源库都有Vcpkg的安装方式。</p></blockquote><h3 id="1-安装Visual-Studio-2022"><a href="#1-安装Visual-Studio-2022" class="headerlink" title="1. 安装Visual Studio 2022"></a>1. 安装Visual Studio 2022</h3><p>我们可以选择只安装<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">MS Build Toos</a>,但是当我们选择最基本的C++开发组件，大概需要4G左右存储空间，语言包需要额外选上英文，这是Vcpkg依赖。</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220627223858130.png" alt="image-20220627223858130" style="zoom:50%;" /><p>不过，我们为什么不选择直接安装Visual Studio 2022 ，体验一下宇宙第一IDE，毕竟完整安装也只要8G左右空间。<strong>强烈建议直接安装完整版，因为只安装开发工具的话想要再次完整安装会重新下载另外一份开发工具，十分扯淡</strong>，同样的<code>语言包需要额外选上英文</code></p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220627224405597.png" alt="image-20220627224405597" style="zoom:50%;" /><h3 id="2-安装Vcpkg"><a href="#2-安装Vcpkg" class="headerlink" title="2. 安装Vcpkg"></a>2. 安装Vcpkg</h3><p><a href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B-windows">Github 官网有完整教程</a></p><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><p>官方文档建议安装在<code>C:\src</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/microsoft/vcpkg<br>.\vcpkg\bootstrap-vcpkg.bat<br></code></pre></td></tr></table></figure><p>建议将<code>C:\src\vcpkg</code>加入环境变量，这样就可以在任意位置使用vcpkg命令</p><h4 id="2-2-基本操作"><a href="#2-2-基本操作" class="headerlink" title="2.2 基本操作"></a>2.2 基本操作</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 搜索</span><br>vcpkg search [<span class="hljs-type">search</span> <span class="hljs-type">term</span>]<br><span class="hljs-comment"># 安装</span><br>vcpkg install [<span class="hljs-type">packages</span> <span class="hljs-type">to</span> <span class="hljs-type">install</span>]<br></code></pre></td></tr></table></figure><p>例如安装格式化库<code>fmt</code>，因为C++编译器的变化，直接下载二进制包是无法使用的，所以vcpkg相当于是将依赖源码全都下载然后编译，所以比较大的库时间还是比较长，比如OpenCV就需要可能20分钟，小的库也就几十秒</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">vcpkg search fmt<br><span class="hljs-comment"># 指定系统版本</span><br>vcpkg install fmt:x64<span class="hljs-literal">-windows</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220627225537803.png" alt="image-20220627225537803" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220627225902749.png" alt="image-20220627225902749" style="zoom:50%;" /><h3 id="3-集成在VS中"><a href="#3-集成在VS中" class="headerlink" title="3.集成在VS中"></a>3.集成在VS中</h3><h4 id="3-1-全局集成"><a href="#3-1-全局集成" class="headerlink" title="3.1 全局集成"></a>3.1 全局集成</h4><p>执行下命令，直接新建一个VS项目，即可使用。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">vcpkg integrate install<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220627231533379.png" alt="image-20220627231533379" style="zoom: 40%;" /><h4 id="3-2-工程集成和CMake集成"><a href="#3-2-工程集成和CMake集成" class="headerlink" title="3.2 工程集成和CMake集成"></a>3.2 工程集成和CMake集成</h4><p>详见github</p><h3 id="4-在VS-code-Clion中使用"><a href="#4-在VS-code-Clion中使用" class="headerlink" title="4. 在VS code Clion中使用"></a>4. 在VS code Clion中使用</h3><p>这个项目是同时使用<code>OpenCV</code>,<code>fmt</code>库</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220627233132298.png" alt="image-20220627233132298" style="zoom: 40%;" /><p><code>测试代码</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/core/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/core/utils/logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fmt/format.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cv::utils::logging::<span class="hljs-built_in">setLogLevel</span>(cv::utils::logging::LOG_LEVEL_ERROR);<br>    cv::Mat myMat = cv::<span class="hljs-built_in">imread</span>(<span class="hljs-string">&quot;C:/Users/f7ky/Pictures/Saved Pictures/R.jpg&quot;</span>);<br>    std::string s = fmt::format(<span class="hljs-string">&quot;&#123;0&#125; is &#123;1&#125;&quot;</span>, <span class="hljs-string">&quot;abra&quot;</span>, <span class="hljs-number">12</span>);<br>    std::cout &lt;&lt; s &lt;&lt; std::endl;<br>    fmt::<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Elapsed time: &#123;0:.2f&#125; seconds&quot;</span>, <span class="hljs-number">1.23</span>);<br>    cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;picture&quot;</span>, myMat);<br>    cv::<span class="hljs-built_in">waitKey</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-1-必须"><a href="#4-1-必须" class="headerlink" title="4.1 必须"></a>4.1 必须</h4><ul><li><p><strong>VScode setting.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;cmake.configureSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:/src/vcpkg/scripts/buildsystems/vcpkg.cmake&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li><li><p><strong>CMakeLists.txt</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">project</span>(TestOpenCV)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">find_package</span>(OpenCV REQUIRED)<br><span class="hljs-keyword">find_package</span>(fmt REQUIRED)<br><br><span class="hljs-keyword">add_executable</span>(TestOpenCV main.cpp )<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-variable">$&#123;OpenCV_LIBRARIES&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> fmt::fmt)<br></code></pre></td></tr></table></figure><p><strong>将 vcpkg 作为一个子模块</strong></p><p>当您希望将vcpkg作为一个子模块加入到您的工程中时， 您可以在第一个 <code>project()</code> 调用之前将以下内容添加到 CMakeLists.txt 中， 而无需将 <code>CMAKE_TOOLCHAIN_FILE</code> 传递给cmake调用。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span>(CMAKE_TOOLCHAIN_FILE <span class="hljs-comment">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/vcpkg/scripts/buildsystems/vcpkg.cmake&quot;</span><br>  CACHE <span class="hljs-comment">STRING</span> <span class="hljs-comment">&quot;Vcpkg toolchain file&quot;</span><span class="hljs-comment">)</span><br></code></pre></td></tr></table></figure><p>使用此种方式可无需设置 <code>CMAKE_TOOLCHAIN_FILE</code> 即可使用vcpkg，且更容易完成配置工作。</p><p>这种方法可能存在问题，建议直接设置Cmake Path</p></li><li><p><code>Clion中</code>， 在<code>CMake Setting</code>中设置 ，在 <code>CMake options</code>添加一行, </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-DCMAKE_TOOLCHAIN_FILE=[vcpkg root]<span class="hljs-regexp">/scripts/</span>buildsystems/vcpkg.cmake<br></code></pre></td></tr></table></figure><p>每个项目都要添加</p></li></ul><h4 id="4-2-优化"><a href="#4-2-优化" class="headerlink" title="4.2 优化"></a>4.2 优化</h4><ul><li><p>setting.json(全局)</p><ul><li>使用MSVC的工具链，但是生成Ninja更加简洁,生成compile_commands.json，为clangd插件提供补全</li><li>CMAKE_TOOLCHAIN_FILE 可以加载Vcpkg的包</li><li>clangd插件使用插件自己安装的clangd，同时提供了某些头文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;cmake.configureSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:/src/vcpkg/scripts/buildsystems/vcpkg.cmake&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cmake.generator&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ninja&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;clangd.path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c:\\Users\\f7ky\\AppData\\Roaming\\Code\\User\\globalStorage\\llvm-vs-code-extensions.vscode-clangd\\install\\14.0.3\\clangd_14.0.3\\bin\\clangd.exe&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>setting.json (工作区) </p><ul><li>clangd配置；</li><li>在使用cmake插件debug时将结果输出在终端中；</li><li>关闭C&#x2F;C++语言功能，减少冲突；</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// 在后台自动分析文件（基于complie_commands)</span><br>        <span class="hljs-string">&quot;--background-index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">//cmake生成json位置</span><br>        <span class="hljs-string">&quot;--compile-commands-dir=$&#123;workspaceFold&#125;$/build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// clangd在创建索引使用的线程数</span><br>        <span class="hljs-string">&quot;-j=6&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用 Clang-Tidy 以提供静态检查</span><br>        <span class="hljs-string">&quot;--clang-tidy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 建议风格：重载函数只会给出一个建议；反可以设置为detailed</span><br>        <span class="hljs-string">&quot;--completion-style=bundled&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用,补全函数时，将会给参数提供占位符</span><br>        <span class="hljs-string">&quot;--function-arg-placeholders=false&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 是否添加头文件</span><br>        <span class="hljs-string">&quot;--header-insertion=never&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span><br>        <span class="hljs-comment">// &quot;--header-insertion-decorators&quot;,</span><br>        <span class="hljs-comment">// 让 Clangd 生成更详细的日志</span><br>        <span class="hljs-string">&quot;--log=verbose&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// pch存储在内存中，内存消耗更大，但是性能更优</span><br>        <span class="hljs-string">&quot;--pch-storage=memory&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输出的 JSON 文件更美观</span><br>        <span class="hljs-string">&quot;--pretty&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 设置项目，或者用户config</span><br>        <span class="hljs-string">&quot;--enable-config&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// cmake-tools图形化 debug 结果输出在integratedTerminal</span><br>    <span class="hljs-comment">// 因为只有使用MSVC工具链才有&quot;console&quot;选项，使用Mingw-64可能是&quot;integratedTerminal&quot;,与launch.json相同</span><br>    <span class="hljs-attr">&quot;cmake.debugConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;console&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;integratedTerminal&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>launch.json</p><ul><li>快捷键调试的参数</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MSVC&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppvsdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;command:cmake.launchTargetPath&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integratedTerminal&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-VScode使用MSVC单文件编译"><a href="#5-VScode使用MSVC单文件编译" class="headerlink" title="5. VScode使用MSVC单文件编译"></a>5. VScode使用MSVC单文件编译</h3><p><strong>正常使用需要从VS命令行窗口打开</strong></p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202206302219889.png" alt="image-20220629141805160" style="zoom: 40%;" /><p>观察到从命令实际上上启动了一个批处理命令，相当于配置了MSVC的环境变量,图中的命令需要使用<code> &quot;type&quot;: &quot;shell&quot;</code></p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220629142144595.png" alt="image-20220629142144595" style="zoom: 40%;" /><p><code>&quot;type&quot;: &quot;cppbuild&quot;</code>需要此目录下的</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220630220746980.png" alt="image-20220630220746980" style="zoom: 67%;" /><p>所以我们只需要tasks.json执行这个命令</p><h4 id="5-1-tasks-json"><a href="#5-1-tasks-json" class="headerlink" title="5.1 tasks.json"></a>5.1 tasks.json</h4><p><code>vcvarsall.bat</code>相当于是配置环境变量；<code>x64</code>生成64位的可执行文件；添加位置是指定中间文件的输出位置</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220629144006206.png" alt="image-20220629144006206"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Compile&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\&quot; x64 &amp;&amp; cl.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;/std:c++20&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/Zi&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/EHsc&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/nologo&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/O2&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/W1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/Fd$&#123;workspaceFolder&#125;\\bin\\&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/Fo$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.obj&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/Fe$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;/openmp:llvm&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$msCompile&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>也可以直接指定规定的模式,不需要指定x64</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/image-20220629144457736.png" alt="image-20220629144457736" style="zoom: 80%;" /><p><code>args</code>是编译选项，在<a href="https://docs.microsoft.com/zh-cn/cpp/build/reference/align-section-alignment?view=msvc-170">官方网站</a>，可以查看每个编译选项的含义，中文版的，非常nice</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> c++标准是c++<span class="hljs-number">20</span><br><span class="hljs-string">&quot;/std:c++20&quot;</span>,<br><span class="hljs-regexp">//</span> 保留完整的调试信息，不加的化没办法打断点<br><span class="hljs-string">&quot;/Zi&quot;</span>,<br><span class="hljs-regexp">//</span> 标准 c + + 异常处理模型的完全编译器<br><span class="hljs-string">&quot;/EHsc&quot;</span>,<br><span class="hljs-regexp">//</span> 在编译器启动时禁止显示版权横幅，在编译过程中显示信息性消息<br><span class="hljs-string">&quot;/nologo&quot;</span>,<br><span class="hljs-regexp">//</span> 编译器选项是一次设置多个特定优化选项的一种快速方法<br><span class="hljs-string">&quot;/O2&quot;</span>,<br><span class="hljs-regexp">//</span> W1 显示等级 <span class="hljs-number">1</span> (严重) 警告。 /W1 是命令行编译器中的默认设置。<br><span class="hljs-string">&quot;/W1&quot;</span>,<br><span class="hljs-regexp">//</span> 没有 /Fd，PDB 文件名默认为 VCx0.pdb，其中 x 是当前Visual C++版本,指定输出位置<br><span class="hljs-string">&quot;/Fd$&#123;workspaceFolder&#125;\\bin\\&quot;</span>,<br><span class="hljs-regexp">//</span> 为 CL 编译器命令生成的所有对象文件设置输出目录<br><span class="hljs-string">&quot;/Fo$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.obj&quot;</span>,<br><span class="hljs-regexp">//</span> 指定编译器创建的 .exe或 DLL 的名称和目录<br><span class="hljs-string">&quot;/Fe$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,<br><span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,<br><span class="hljs-regexp">//</span> 并行计算课程使用openmp，llvm openmp支持，使用的是vscode clangd插件安装的omp.h<br><span class="hljs-string">&quot;/openmp:llvm&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-launch-json"><a href="#5-2-launch-json" class="headerlink" title="5.2 launch.json"></a>5.2 launch.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(Windows) DEBUG&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppvsdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integratedTerminal&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Compile&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>环境配置</tag>
      
      <tag>Visual Studio Code</tag>
      
      <tag>Visual Studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决wsl2使用遇到的问题</title>
    <link href="/2022/05/08/%E8%A7%A3%E5%86%B3wsl2%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/08/%E8%A7%A3%E5%86%B3wsl2%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1-更新系统提示"><a href="#1-更新系统提示" class="headerlink" title="1. 更新系统提示"></a>1. 更新系统提示</h2><h3 id="1-1-安装cuda前"><a href="#1-1-安装cuda前" class="headerlink" title="1.1 安装cuda前"></a>1.1 安装cuda前</h3><p>你会发现没有这个文件夹</p><p><code>/usr/lib/wsl/lib/libcuda.so.1 is not a symbolic link</code></p><p>解决方法：</p><ol><li><p>从<code>C:\Windows\System32\lxss\lib</code> 删除<code>libcuda.so</code> and <code>libcuda.so.1</code> </p></li><li><p>以管理员打开powershell，输入<code>wsl</code>,进入wsl环境,执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -sr /mnt/c/Windows/System32/lxss/lib/libcuda.so.1.1 /mnt/c/Windows/System32/lxss/lib/libcuda.so.1<br>sudo <span class="hljs-built_in">ln</span> -sr /mnt/c/Windows/System32/lxss/lib/libcuda.so.1.1 /mnt/c/Windows/System32/lxss/lib/libcuda.so<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-安装cuda后"><a href="#1-2-安装cuda后" class="headerlink" title="1.2 安装cuda后"></a>1.2 安装cuda后</h3><p>不同的系统安装位置不一样，一般来说会安装在<code>/usr/local/cuda/</code>文件夹下，但是我使用的是arch linux，使用pacman 直接安装会安装在<code>/opt/cuda</code>文件夹中</p><p>使用以下命令建立软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /usr/lib/wsl/lib/libcuda.so.1 /opt/cuda/lib64/libcuda.so<br></code></pre></td></tr></table></figure><h2 id="2-系统代理"><a href="#2-系统代理" class="headerlink" title="2. 系统代理"></a>2. 系统代理</h2><p>wsl1没有独立的IP,可以直接给<code>127.0.0.1:port</code>，进行代理</p><p>更新wsl2后，需要使用正则获取IP地址</p><p>在.<code>bashrc</code>,<code>.zshrc</code>中加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;&gt;&gt; setproxy &gt;&gt;&gt;</span><br><span class="hljs-built_in">export</span> hostip=$(<span class="hljs-built_in">cat</span> /etc/resolv.conf |grep -oP <span class="hljs-string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)<br><span class="hljs-built_in">alias</span> setproxy=<span class="hljs-string">&#x27;export https_proxy=&quot;http://$&#123;hostip&#125;:10811&quot;;export http_proxy=&quot;http://$&#123;hostip&#125;:10811&quot;;&#x27;</span><br><span class="hljs-built_in">alias</span> unsetproxy=<span class="hljs-string">&#x27;unset all_proxy&#x27;</span><br><span class="hljs-comment"># &lt;&lt;&lt; setproxy &lt;&lt;&lt;</span><br></code></pre></td></tr></table></figure><p>config.fish</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置代理</span><br><span class="hljs-keyword">function</span> unsetproxy<br>    <span class="hljs-built_in">set</span> -e ALL_PROXY<br>end<br><br><span class="hljs-keyword">function</span> setproxy<br>    <span class="hljs-built_in">set</span> hostip $(<span class="hljs-built_in">cat</span> /etc/resolv.conf |grep -oP <span class="hljs-string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)<br>    <span class="hljs-built_in">set</span> -xg ALL_PROXY http://<span class="hljs-variable">$hostip</span>:10811<br>end<br></code></pre></td></tr></table></figure><p>注意端口，在windows代理软件中打开<code>allow LAN</code>，或者<code>允许局域网代理</code></p><p><em>测试</em>：</p><p>执行<code>setproxy</code>后，<code>curl google.com</code>,返回html文件</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205081643996.png" alt="image-20220508164357859"></p><h2 id="3-为git设置代理"><a href="#3-为git设置代理" class="headerlink" title="3. 为git设置代理"></a>3. 为git设置代理</h2><p>写一个简单的python 脚本<code>setgitproxy.py</code>，为git设置代理</p><p>先使用pip安装<code>IPy</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> fcntl<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> IPy <span class="hljs-keyword">import</span> IP<br><br><span class="hljs-comment"># 本地代理端口，你的和我不一定一样，按照自己的设置改动一下</span><br>PORT = <span class="hljs-number">10811</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ip_address</span>(<span class="hljs-params">ifname</span>):<br>    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    <span class="hljs-keyword">return</span> socket.inet_ntoa(fcntl.ioctl(<br>        s.fileno(),<br>        <span class="hljs-number">0x8915</span>,  <span class="hljs-comment"># SIOCGIFADDR</span><br>        struct.pack((<span class="hljs-string">&#x27;256s&#x27;</span>).encode(<span class="hljs-string">&quot;utf-8&quot;</span>), (ifname[:<span class="hljs-number">15</span>]).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    )[<span class="hljs-number">20</span>:<span class="hljs-number">24</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_windows_ip</span>(<span class="hljs-params">wsl_ip</span>):<br>    ip = IP(wsl_ip).make_net(<span class="hljs-string">&quot;20&quot;</span>).strNormal()<br>    ip = ip.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>][:-<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">return</span> ip<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">config_git_proxy</span>(<span class="hljs-params">ip</span>):<br>    config_str = (<br>        <span class="hljs-string">&quot;git config --global https.proxy &#x27;https://%s:%d&#x27;&quot;</span> % (ip, PORT))<br>    <span class="hljs-comment"># print(config_str)</span><br>    ret = os.system(config_str)<br>    <span class="hljs-keyword">if</span> ret:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set git porxy fail&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        config_str = (<br>            <span class="hljs-string">&quot;git config --global http.proxy &#x27;http://%s:%d&#x27;&quot;</span> % (ip, PORT))<br>        <span class="hljs-comment"># print(config_str)</span><br>        ret = os.system(config_str)<br>    <span class="hljs-keyword">if</span> ret:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set git porxy fail&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set git porxy success&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    wsl_ip = get_ip_address(<span class="hljs-string">&#x27;eth0&#x27;</span>)<br>    windows_ip = get_windows_ip(wsl_ip)<br>    <span class="hljs-comment"># print(windows_ip)</span><br>    config_git_proxy(windows_ip)<br><br></code></pre></td></tr></table></figure><p>使用git 命令或者其他git GUI客户端前，执行<code>python setgitproxy.py</code>为git添加代理</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205081641462.png" alt="image-20220508164137335"></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>heroku配置v2ray</title>
    <link href="/2022/04/19/heroku%E9%85%8D%E7%BD%AEv2ray/"/>
    <url>/2022/04/19/heroku%E9%85%8D%E7%BD%AEv2ray/</url>
    
    <content type="html"><![CDATA[<p><strong>注意！本教程仅且只能用于研究与学习，只是做一个记录</strong></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><em>Heroku免费套餐每月只有<strong>550小时</strong>的免费时间，限量<strong>2TB</strong>，适合在非常时期当做备胎使用</em></li><li><em>Heroku对流量检测有些严格，请避免大流量消耗</em></li><li><em>引用项目原作者的话：Heroku提供给我们免费的服务，<strong>我们不应该滥用它</strong></em></li><li><em><strong>绝大部分的Heroku服务器节点都被twitter屏蔽了</strong>，可能是我新建的暂时还没有</em></li><li><em>Heroku免费容器未使用超过一段时间（三十分钟左右）就会休眠</em></li></ol><p><strong>2022.5.9更新，Cloud flare 的work.dev凉了，设置反代看<a href="https://my.freenom.com/domains.php">链接</a></strong></p><h2 id="必要的准备"><a href="#必要的准备" class="headerlink" title="必要的准备"></a>必要的准备</h2><ol><li><p>一个非国内邮箱地址，gmail 或者 outlook</p></li><li><p>Heroku与Cloudflare国内访问速度并不理想，可使用非国内网络环境</p><p>(也就是说必须有一个机场，机场的免费时间一般来说就够用了)</p></li><li><p>翻译工具，也可以使用Google Chrome浏览器</p></li><li><p>V2Ray软件，如果没有安装过请下载core版本，自带V2ray-Core<a href="https://github.com/2dust/v2rayN/releases">点击下载</a></p></li></ol><h2 id="一、服务端部署"><a href="#一、服务端部署" class="headerlink" title="一、服务端部署"></a>一、服务端部署</h2><h3 id="1-1-注册Heroku账户"><a href="#1-1-注册Heroku账户" class="headerlink" title="1.1 注册Heroku账户"></a>1.1 注册Heroku账户</h3><p>很简单，根据官网的提示操作就行:<a href="https://signup.heroku.com/">点击注册</a></p><p>注意：请使用外网IP注册，且请准备好翻译工具，并在收到邮件后激活账户；注册时不能使用QQ邮箱</p><h3 id="1-2-在Heroku部署v2ray"><a href="#1-2-在Heroku部署v2ray" class="headerlink" title="1.2 在Heroku部署v2ray"></a>1.2 在Heroku部署v2ray</h3><p>点击下方按钮部署应用<a href="https://dashboard.heroku.com/new?template=https://github.com/F7kyyy/heroku-v2ray"><img src="https://www.herokucdn.com/deploy/button.png" alt="Deploy"></a></p><p>ps: （2022.01.16）最近大佬们的仓库都被heroku给ban了，所以想要使用可以自建一个仓库，<del>然后import大佬Fbclswl0827的heroku-v2ray项目自行部署</del></p><p>ps: 上面部署方式是我自己的仓库</p><h4 id="Extra-创建github项目仓库"><a href="#Extra-创建github项目仓库" class="headerlink" title="Extra 创建github项目仓库"></a>Extra 创建github项目仓库</h4><p>1、打开 <a href="https://github.com/">github</a> 登录你自己的账号</p><p>2、点击左边的 <code>New</code> 创建一个仓库</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191901306.png" alt="img" style="zoom:67%;" /><p>3、在打开的页面中填写仓库名称，然后点击 <code>Create repository</code> 创建仓库</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191901796.png" alt="img" style="zoom:67%;" /><p>4、在新打开的页面下翻找到 <code>import</code></p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191905575.png" alt="img" style="zoom:67%;" /><p>5、在 <code>Your old repository’s clone URL</code> 中填入 <code>https://github.com/bclswl0827/v2ray-heroku.git</code>, 随后点击 <code>Begin import</code> 导入</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191901228.png" alt="img" style="zoom:67%;" /><p><strong>这位大佬的github仓库已经被disable了，可以选择其他人的，搜索一下应该很容易找到</strong></p><p>6、导入完成后，进入仓库，修改 <code>README.md</code> ，修改完成后点击下方 <code>Commit changes</code> 提交</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191901430.png" alt="img" style="zoom:67%;" /><p>7、最后进入仓库点击 <code>Deploy to Heroku</code> 图标开始部署</p><p>App name随便填写，可用就行；Choose a region就是你的服务器地区；UUID可自行修改（建议修改，使用默认UUID会使节点暴露在危险下）；然后点击<code>Deploy app</code>系统会自动部署</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191901573.png" alt="1.png" style="zoom:67%;" /><p>稍微等待一会儿，几秒的样子，直到全部打勾变绿</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191902144.png" alt="2.png" style="zoom:67%;" /><h2 id="二、客户端使用"><a href="#二、客户端使用" class="headerlink" title="二、客户端使用"></a>二、客户端使用</h2><h3 id="2-1-相关配置信息"><a href="#2-1-相关配置信息" class="headerlink" title="2.1 相关配置信息"></a>2.1 相关配置信息</h3><p>点击Manage App进入你的项目；或者在<a href="https://dashboard.heroku.com/apps%E4%B8%AD%E6%89%BE%E7%9A%84%E5%88%B0%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%9B%E5%85%A5">https://dashboard.heroku.com/apps中找的到你的项目并进入</a></p><p>注意：你会看到一个项目，点击上方的<code>Settings</code>进入，查看你的V2Ray具体配置，如图</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191902864.png" alt="img" style="zoom:67%;" /><p>点击<code>Reveal Config Vars</code>显示V2RrayN相关配置信息，如图</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191902242.png" alt="img" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191906266.png" alt="img" style="zoom:67%;" /></p><h3 id="2-2-配置v2rayN"><a href="#2-2-配置v2rayN" class="headerlink" title="2.2 配置v2rayN"></a>2.2 配置v2rayN</h3><p>开始配置V2Ray，如果你记好了以上两个（那串字母UUID和二级域名xxxx.herokuapp.com）</p><p>ps: 二级域名不用加<code>https://</code>，直接填域名就好</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191902011.png" alt="img" style="zoom:67%;" /><p>最基础的配置完成了，可以发现节点的速度慢的令人发指，接下来我们利用cloudflare + 自选ip进行加速</p><h2 id="三、Cloudflare-Workers反代加速"><a href="#三、Cloudflare-Workers反代加速" class="headerlink" title="三、Cloudflare Workers反代加速"></a>三、Cloudflare Workers反代加速</h2><p>对速度有要求的人群（强迫症患者）可以看一下；主要是使用Cloudflare Workers加速，虽然免费套餐有调用限制，但是一般个人使用不可能用完</p><h3 id="3-1-创建Cloudflare-Workers"><a href="#3-1-创建Cloudflare-Workers" class="headerlink" title="3.1 创建Cloudflare Workers"></a>3.1 创建Cloudflare Workers</h3><p>在<a href="https://dash.cloudflare.com/">Cloudflare Workers</a>中创建一个Workers</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191902438.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191902747.png" alt="img"></p><p>点击<code>快速编辑</code>进入项目编辑<br><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191903865.png" alt="img"><br>将原有的示例代码全部删除，复制如下代码，并将第四行的xxx.herokuapp.com 替换为你的V2Ray的地址 ps: 不需要<code>https://</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">VBSCRIPT</span><br><span class="hljs-title function_">addEventListener</span>(<br><span class="hljs-string">&quot;fetch&quot;</span>,<span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> url=<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>);<br>url.<span class="hljs-property">hostname</span>=<span class="hljs-string">&quot;xxxx.herokuapp.com&quot;</span>;<br><span class="hljs-keyword">let</span> request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(url,event.<span class="hljs-property">request</span>);<br>event. <span class="hljs-title function_">respondWith</span>(<br><span class="hljs-title function_">fetch</span>(request)<br>)<br>&#125;<br>)<br></code></pre></td></tr></table></figure><p>点击右侧的<code>发送</code>按钮，看最后一行是否出现了<code>Bad Request</code>，出现则代表成功</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191903829.png" alt="img"></p><p>成功后，点击<code>保存并部署</code>，并记下你的Workers二级域名</p><h3 id="3-2-修改V2rayN中的配置"><a href="#3-2-修改V2rayN中的配置" class="headerlink" title="3.2 修改V2rayN中的配置"></a>3.2 修改V2rayN中的配置</h3><p>把V2RayN中原来的域名改为现在的Workers域名就行了，其实利用Cloudflare Workers进行反代以后速度已经可以了，但是优选ip以后速度会更加快<br><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191903475.png" alt="img" style="zoom:67%;" />](<a href="https://gitee.co/">https://gitee.co</a></p><p><strong>对速度有更高追求以及不怕折腾的人可以接着往下看，我个人测试，这个没什么太大的效果</strong></p><h2 id="四、Cloudflare自选IP"><a href="#四、Cloudflare自选IP" class="headerlink" title="四、Cloudflare自选IP"></a>四、Cloudflare自选IP</h2><p>点击下载<a href="https://github.com/badafans/better-cloudflare-ip/releases/lastest/download/batch.zip">IP自选程序</a>，解压，在Windows系统下运行</p><p>其他的<code>使用说明.txt</code>文件中都有说，在此就不过多赘述</p><p>最后，配置V2Ray：</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191903472.png" alt="img" style="zoom:67%;" /><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于各地的网络情况每天都不同，所以每天（甚至是每半天）的最优节点都不尽相同；但对于一个应急用的已经足够了</p><h2 id="五、移动端使用"><a href="#五、移动端使用" class="headerlink" title="五、移动端使用"></a>五、移动端使用</h2><p>iOS端需要外区apple ID 平且基本移动端v2ray工具都需要付费下载，而这也需要信用卡较为麻烦，淘宝代充很多是盗刷信用卡，慎重考虑</p><h3 id="5-1-下载apk"><a href="#5-1-下载apk" class="headerlink" title="5.1 下载apk"></a>5.1 下载apk</h3><p>可以选择google play 直接下载v2rayNG,可能存在困难，所以推荐<a href="https://github.com/2dust/v2rayNG">github下载apk</a> 直接选择release版本</p><p>如果想使用最新版，也可以自己使用Android Studio 编译安装</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204191903746.png" alt="image-20220322195545604" style="zoom:67%;" /><h3 id="5-2-复制订阅"><a href="#5-2-复制订阅" class="headerlink" title="5.2 复制订阅"></a>5.2 复制订阅</h3><p>v2rayN 右键点击服务器-&gt;导出url到剪贴板-&gt;发送到手机</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203221958180.png" alt="image-20220322195844002" style="zoom:67%;" /><h3 id="5-3-移动端使用"><a href="#5-3-移动端使用" class="headerlink" title="5.3 移动端使用"></a>5.3 移动端使用</h3><p>点击右上角加号，从剪贴板导入，即可使用</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203222004855.png" alt="image-20220322200417813" style="zoom:67%;" /><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>实际使用效果图：</p><ul><li>4320P不要想了可以选择白嫖谷歌云3个月，但是需要国外信用卡，比较麻烦</li><li>2160P看情况</li><li>1440P，1080P没什么问题，Youtube码率比B站高得多 (当然你想看的视频可能还没有720P<span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&amp;#x1f604;</span>)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203211707537.png" alt="image-20220321170725117"></p><p>比某些大部分的机场免费套餐都好，甚至直逼少数机场的初级付费套餐；和我自己买的流量包10块30GB（他涨价了，之前50GB）差不太多，至少上个github，stackoverflow没什么太大问题。<strong>在这个越来越严格的大环境下，在你的机场时不时抽风的时候，作为备选还是不错的。</strong></p><h2 id="六、2022-x2F-5-x2F-9-cloudflare-worker-dev被封"><a href="#六、2022-x2F-5-x2F-9-cloudflare-worker-dev被封" class="headerlink" title="六、2022&#x2F;5&#x2F;9 cloudflare worker.dev被封"></a>六、2022&#x2F;5&#x2F;9 cloudflare worker.dev被封</h2><p>[问题链接<span class="github-emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">&amp;#x1f622;</span>][<a href="https://github.com/XIU2/CloudflareSpeedTest/issues/205]">https://github.com/XIU2/CloudflareSpeedTest/issues/205]</a></p><p>需要绑定一个自己的域名，才可以继续使用</p><h3 id="6-1-免费域名申请"><a href="#6-1-免费域名申请" class="headerlink" title="6.1 免费域名申请"></a>6.1 免费域名申请</h3><p><a href="https://zhuanlan.zhihu.com/p/109553641">参考链接</a></p><ul><li>输入想要的<code>域名带后缀</code>，点击查询 例如： <code>abcd.tk</code></li><li>加入购物车， 默认3个月。修改成 12个月free</li><li>结算 填入邮件，然后邮箱收到邮件</li><li>点开邮箱连接，然后填写信息，网上找个美国人的信息详细填写上去,电话也是假的</li><li>注册成功</li></ul><p>注：</p><ol><li>信息：网上有美国人信息生成器；</li><li>要用美国的IP地址，节点设置为美国；</li><li>freenom免费域名很少可以撑到一年的，大概几个月就不行了</li></ol><h3 id="6-2-在cloudflare-上绑定刚才申请的域名"><a href="#6-2-在cloudflare-上绑定刚才申请的域名" class="headerlink" title="6.2 在cloudflare 上绑定刚才申请的域名"></a>6.2 在cloudflare 上绑定刚才申请的域名</h3><ul><li><p>点击 网站→添加站点</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111041954.png" alt="image-20220511104027760" style="zoom:67%;" /></li><li><p>填入网址</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111041615.png" alt="image-20220511104130570" style="zoom:80%;" /></li><li><p>选择 free计划 创建</p></li><li><p>会先扫描以前的 dns, 扫描完成后。手动添加 记录。</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111042042.png" alt="image-20220511104205909" style="zoom: 50%;" /></li><li><p>填写 名称 和 ip地址随便写 点击保存 这里地址写成了422，是错误的。最大不超过255</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111042849.png" alt="image-20220511104237731" style="zoom:67%;" /></li><li><p>点击 继续</p></li><li><p>提示：更改域名的 服务器</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111044379.png" alt="image-20220511104400265" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111043039.png" alt="image-20220511104338930" style="zoom:50%;" /></li><li><p>然后打开 域名所在的管理网站 这里是 <a href="https://www.freenom.com/">https://www.freenom.com/</a> 添加这两条记录</p><p>具体操作见下面6.3</p></li></ul><h3 id="6-3-在freenom-更换dns-服务器"><a href="#6-3-在freenom-更换dns-服务器" class="headerlink" title="6.3 在freenom 更换dns 服务器"></a>6.3 在freenom 更换dns 服务器</h3><ul><li><p>选择 我的站点</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111046635.png" alt="image-20220511104649550" style="zoom:50%;" /></li><li><p>点击 管理</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111047193.png" alt="image-20220511104724133"></p></li><li><p>点击 name server</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111048537.png" alt="image-20220511104828464" style="zoom:50%;" /></li><li><p>把上面的复制的dns服务器 添加到 这里</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111048755.png" alt="image-20220511104850657" style="zoom:50%;" /></li><li><p>然后点击  下面的按钮 change name 完成。</p></li></ul><h3 id="6-4-在cloudflare-添加-worker路由并绑定"><a href="#6-4-在cloudflare-添加-worker路由并绑定" class="headerlink" title="6.4 在cloudflare 添加 worker路由并绑定"></a>6.4 在cloudflare 添加 worker路由并绑定</h3><ul><li><p>查看是否有效，点击域名</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111050724.png" alt="image-20220511105018690" style="zoom:67%;" /></li><li><p>先点击主页的这个域名，这个域名的下添加 worker 路由</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111051692.png" alt="image-20220511105129561" style="zoom: 33%;" /></li><li><p>设置路由 ，选择自己的worker 绑定</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205111052241.png" alt="image-20220511105208172" style="zoom:50%;" /></li><li><p>v2ray上替换</p><p>将原有地址，替换为设置的路由(不加 &#x2F; )</p></li></ul><p><strong>其实直接是用heroku速度上个github也够了<span class="github-emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&amp;#x1f606;</span></strong></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置docker</title>
    <link href="/2022/04/18/%E9%85%8D%E7%BD%AEdocker/"/>
    <url>/2022/04/18/%E9%85%8D%E7%BD%AEdocker/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><ul><li>使用脚本安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://get.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042241275.png" alt="image-20220404224134678" style="zoom: 67%;" /><ul><li>更改权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod 666 /var/run/docker.soc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111623506.png" alt="image-20220411162329378"></p><ul><li>查看版本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111624567.png" alt="image-20220411162445405"></p><ul><li>更改镜像源</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>docker<br>sudo vim daemon.json<br></code></pre></td></tr></table></figure><p>​    写入以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://ghcr.io&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>​    重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service docker restart<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111629166.png" alt="image-20220411162942084"></p><h2 id="2-docker部署mysql"><a href="#2-docker部署mysql" class="headerlink" title="2 docker部署mysql"></a>2 docker部署mysql</h2><h3 id="2-1-拉取镜像"><a href="#2-1-拉取镜像" class="headerlink" title="2.1 拉取镜像"></a>2.1 拉取镜像</h3><ul><li>在<a href="https://registry.hub.docker.com/_/mysql?tab=tags">dockerhub</a>选合适版本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111635301.png" alt="image-20220411163511252"></p><ul><li>拉取镜像</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker pull mysql:<span class="hljs-number">8.0</span>.<span class="hljs-number">28</span>-oracle<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111637821.png" alt="image-20220411163721573"></p><ul><li>查看镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111638702.png" alt="image-20220411163851617"></p><h3 id="2-2-启动实例"><a href="#2-2-启动实例" class="headerlink" title="2.2 启动实例"></a>2.2 启动实例</h3><ul><li>启动mysql实例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111643276.png" alt="image-20220411164304227"></p><ul><li>进入docker环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -ti xxx(容器<span class="hljs-built_in">id</span>) /bin/bash<br></code></pre></td></tr></table></figure><ul><li>登录mysql</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>​        输入密码，登陆成功</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111653219.png" alt="image-20220411165314050"></p><ul><li>创建数据库，插入数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database dockertest;<br>use dockertest;<br>create table dt(name varchar(20), ID varchar(20));<br>insert into dt values(&#x27;mysql 8.0.28&#x27;,&#x27;0ca4d64ca878&#x27;);<br>select * from dt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111703656.png" alt="image-20220411170318569"></p><h2 id="3-打包新镜像"><a href="#3-打包新镜像" class="headerlink" title="3 打包新镜像"></a>3 打包新镜像</h2><ul><li>退出镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">quit();<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111706145.png" alt="image-20220411170653064"></p><ul><li>获得容器ID</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111708916.png" alt="image-20220411170809761"></p><ul><li>打包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker commit 容器<span class="hljs-built_in">id</span> 要保存的镜像名称<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111710251.png" alt="image-20220411171027162"></p><ul><li>查看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204111711817.png" alt="image-20220411171108709"></p><h2 id="4-wsl2部署docker"><a href="#4-wsl2部署docker" class="headerlink" title="4 wsl2部署docker"></a>4 wsl2部署docker</h2><h3 id="4-1-原生部署"><a href="#4-1-原生部署" class="headerlink" title="4.1 原生部署"></a>4.1 原生部署</h3><p>即使用上述方法，原生部署linux docker</p><h3 id="4-2-docker-desktop-for-windows"><a href="#4-2-docker-desktop-for-windows" class="headerlink" title="4.2 docker desktop for windows"></a>4.2 docker desktop for windows</h3><p><strong>Windows 安装docker desktop ,wsl2可以使用</strong></p><ul><li><p>下载应用</p><p><a href="https://www.docker.com/products/docker-desktop/">下载链接</a></p></li><li><p>默认安装，一路下一步</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204182008720.png" alt="image-20220418200802552"></p></li><li><p>在wsl2中启用</p><ul><li><p>启用基于<code>WSL2</code>的引擎</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204182009968.png" alt="image-20220418200924854"></p></li><li><p>允许安装的linux发行版使用</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204182010263.png" alt="image-20220418201010181"></p><h2 id="5-docker-配置"><a href="#5-docker-配置" class="headerlink" title="5 docker 配置"></a>5 docker 配置</h2><h3 id="5-1-为容器配置代理"><a href="#5-1-为容器配置代理" class="headerlink" title="5.1 为容器配置代理"></a>5.1 为容器配置代理</h3><p>更改<code>C:\Users\UserName\.docker\config.json</code>文件，更改之后，新建立的容器就会默认使用代理</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;credsStore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desktop&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;httpProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://host.docker.internal:10811&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;httpsProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://host.docker.internal:10811&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;noProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker-registry.somecorporation.com,*.test.example.com,.example2.com&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>不能使用127.0.0.1,Port应该使用局域网的端口，V2rayN 就是10811，clash就是7890</code></p><h3 id="5-2-安装常见容器"><a href="#5-2-安装常见容器" class="headerlink" title="5.2 安装常见容器"></a>5.2 安装常见容器</h3><h4 id="5-2-1-Ubuntu-20-04"><a href="#5-2-1-Ubuntu-20-04" class="headerlink" title="5.2.1 Ubuntu 20.04"></a>5.2.1 Ubuntu 20.04</h4><ul><li><p>安装</p><p><code>挂载</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dock"># 拉取镜像<br>docker pull ubuntu:latest<br># -p 端口转发 -v 将/root挂载到本地<br>docker run -it -p 50022:22 --name ubuntu -v C:\Users\FengisZZZ\Documents\DockerFiles\DockerUbuntu\root\:/root/ -d ubuntu:latest<br></code></pre></td></tr></table></figure><ul><li><p>换源</p><p>需要安装<code>ca-certificates</code>,之后正常换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install ca-certificates<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-3-2-Mysql"><a href="#5-3-2-Mysql" class="headerlink" title="5.3.2 Mysql"></a>5.3.2 Mysql</h4><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>docker pull mysql:latest<br><span class="hljs-comment"># 启动</span><br>docker run --name=mysql -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=040057 -v C:\Users\FengisZZZ\Documents\DockerFiles\DockerMysql\data:/var/lib/mysql-files <br>-v C:\Users\FengisZZZ\Documents\DockerFiles\DockerMysql\conf:/etc/mysql -v C:\Users\FengisZZZ\Documents\DockerFiles\DockerMysql\<span class="hljs-built_in">log</span>:/var/log/mysql -d mysql<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>环境配置</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>实验报告</tag>
      
      <tag>wsl</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算作业3</title>
    <link href="/2022/04/18/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A3/"/>
    <url>/2022/04/18/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A3/</url>
    
    <content type="html"><![CDATA[<h3 id="简述网络通信的四个安全要素">简述网络通信的四个安全要素</h3><ul><li><p><strong>保密性</strong></p><p>保密性是网络信息不被泄露给非授权的用户、实体或过程，或供其利用的特性。即，防止信息泄漏给非授权个人或实体，信息只为授权用户使用的特性。保密性是在可靠性和可用性基础之上，保障网络信息安全的重要手段。</p></li><li><p><strong>完整性</strong></p><p>完整性是网络信息未经授权不能进行改变的特性。即网络信息在存储或传输过程中保持不被偶然或蓄意地删除、修改、伪造、乱序、重放、插入等破坏和丢失的特性。完整性是一种面向信息的安全性，它要求保持信息的原样，即信息的正确生成和正确存储和传输。</p></li><li><p><strong>真实性</strong></p><p>在信息传递的过程中，我们需要保证信息从源头开始的真实；现实世界中的例子：身份证、护照、信用卡、驾照；网络世界中的例子：数字证书、数字签名。</p></li><li><p><strong>不可抵赖性</strong></p><p>不可抵赖性也称作不可否认性，在网络信息系统的信息交互过程中，确信参与者的真实同一性。即，所有参与者都不可能否认或抵赖曾经完成的操作和承诺。利用信息源证据可以防止发信方不真实地否认已发送信息，利用递交接收证据可以防止收信方事后否认已经接收的信息。</p></li></ul><h3id="简述各类加密方法哈希和数字签名的基本概念以及所能保证的安全特性">简述各类加密方法、哈希和数字签名的基本概念，以及所能保证的安全特性</h3><h4 id="对称加密">1. 对称加密</h4><h5 id="基本概念">基本概念</h5><p>加密和解密使用同一个密钥</p><h5 id="能保证的安全特性">能保证的安全特性</h5><ol type="1"><li>算法公开，计算量小，加密速度快，加密效率高</li><li>由于用一个密钥加密的消息只能用同一个密钥解密，因此拥有密钥的被授权方才能创建消息，因此保证了数据的保密性。</li><li>对称加密不具备不可否认性，当有多方使用同一个密钥时，无法判断是哪一方执行的加密和解密</li></ol><h4 id="非对称加密">2. 非对称加密</h4><h5 id="基本概念-1">基本概念</h5><p>使用两个不同的密钥，称为公钥和私钥；私钥为所有者私钥，公钥共享。​算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂,而使得加密解密速度没有对称加密解密的速度快</p><h5 id="能保证的安全特性-1">能保证的安全特性</h5><ol type="1"><li>私钥加密只能通过对应的公钥解密，因此私钥加密提供了真实性、不可否认性和完整性保护。​</li><li>公钥加密只能用对应的私钥进行解密，因此提供了保密性保护，但不提供完整性和真实性的保护。</li></ol><h4 id="哈希">3. 哈希</h4><h5 id="基本概念-2">基本概念</h5><p>哈希是一种单向、不可逆的数据保护机制，这种机制常见于密码的存储，常见的算法包括：MD5和SHA</p><h5 id="能保证的安全特性-2">能保证的安全特性</h5><ol type="1"><li>利用哈希可以用来获得消息摘要，消息摘要附加在消息后面，用于验证消息是否发生篡改。​</li><li>哈希可以用于保护存储数据、减轻恶意媒介和授权不足带来的云威胁，保证数据完整性。</li></ol><h4 id="数字签名">4. 数字签名</h4><h5 id="基本概念-3">基本概念</h5><p>数字签名是一种通过身份验证和不可否认性来提供数据真实性和完整性的手段,常见的算法有：RSA，DSA，ECDSA​发送消息时，附加一个数字签名，如果消息被篡改，数字签名就会变得非法</p><h5 id="能保证的安全特性-3">能保证的安全特性</h5><ol type="1"><li>用私钥对消息摘要进行加密，附加到消息摘要后面。</li><li>接受者收到后对消息进行哈希得到一个消息摘要，用公钥对加密后的消息摘要进行解密，如果一致则​保证了消息的完整性。</li></ol>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 配置hadoop伪分布式</title>
    <link href="/2022/04/18/ubuntu-%E9%85%8D%E7%BD%AEhadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    <url>/2022/04/18/ubuntu-%E9%85%8D%E7%BD%AEhadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><code>这里选择安装伪分布式的形式</code><ahref="https://www.jianshu.com/p/f5a6c4d888e0">原文链接</a></p><h2 id="安装前准备">1 安装前准备</h2><p>下载hadoop和jdk安装包，因为伪分布式版本要求，我们选择hadoop2.7.3与java 1.8</p><p>下载链接：<ahref="http://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/?C=S;O=A">hadoop</a>,<ahref="https://www.openlogic.com/openjdk-downloads?field_java_parent_version_target_id=416&amp;field_operating_system_target_id=426&amp;field_architecture_target_id=391&amp;field_java_package_target_id=396">jdk</a></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181620856.png"alt="image-20220418162025511" /><figcaption aria-hidden="true">image-20220418162025511</figcaption></figure><h2 id="安装-ssh-server">2 安装 ssh server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh localhost<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181622284.png" alt="image-20220418162251454" style="zoom:67%;" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 注销</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181623321.png"alt="image-20220418162356263" /><figcaption aria-hidden="true">image-20220418162356263</figcaption></figure><h2 id="生成密钥对">3 生成密钥对</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br>ssh-keygen -t rsa<br><span class="hljs-built_in">cat</span> ./id_rsa.pub &gt;&gt; ./authorized_keys<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181625708.png" alt="image-20220418162526500" style="zoom:67%;" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 测试免密登录</span><br>ssh localhost<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181626156.png"alt="image-20220418162640904" /><figcaption aria-hidden="true">image-20220418162640904</figcaption></figure><h2 id="安装jdk">4 安装jdk</h2><ul><li><p>创建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /usr/lib/jvm<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181630012.png"alt="image-20220418163001936" /><figcaption aria-hidden="true">image-20220418163001936</figcaption></figure></li><li><p>解压jdk到/usr/lib/jvm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar zxvf jdk-8u101-linux-x64.tar.gz -C /usr/lib/jvm<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181632450.png"alt="image-20220418163216346" /><figcaption aria-hidden="true">image-20220418163216346</figcaption></figure></li><li><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#set java environment</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jvm/openjdk8<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181633362.png"alt="image-20220418163326224" /><figcaption aria-hidden="true">image-20220418163326224</figcaption></figure></li><li><p>查看安装版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment">## 查看java版本</span><br>java -verison<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181636936.png"alt="image-20220418163641795" /><figcaption aria-hidden="true">image-20220418163641795</figcaption></figure></li></ul><h2 id="配置hadoop">5 配置hadoop</h2><h3 id="解压重命名">5.1 解压重命名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 解压</span><br>sudo tar zxvf hadoop-2.7.3.tar.gz -C /usr/local<br><span class="hljs-comment">## 重命名</span><br>sudo <span class="hljs-built_in">mv</span> /usr/local/hadoop-2.7.3 /usr/local/hadoop<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181641233.png"alt="image-20220418164137152" /><figcaption aria-hidden="true">image-20220418164137152</figcaption></figure><h3 id="配置环境变量">5.2 配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#set hadoop path</span><br><span class="hljs-built_in">export</span> HADOOP_HOME=/usr/local/hadoop<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HADOOP_HOME</span>/bin<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181642843.png"alt="image-20220418164255774" /><figcaption aria-hidden="true">image-20220418164255774</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="更改配置文件">5.3 更改配置文件</h3><ul><li><p>修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## feng 是我的用户名</span><br>sudo <span class="hljs-built_in">chown</span> -R feng /usr/local/hadoop/<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181646959.png"alt="image-20220418164607904" /><figcaption aria-hidden="true">image-20220418164607904</figcaption></figure></li><li><p>修改JAVA_HOME</p><p>可以直接使用vscode 远程连接虚拟机，对vim命令不太熟悉的我们更方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/hadoop/etc/hadoop/<br>vim hadoop-env.sh<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181653183.png"alt="image-20220418165328146" /><figcaption aria-hidden="true">image-20220418165328146</figcaption></figure></li><li><p>core-site.xml</p><p>添加内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181655882.png"alt="image-20220418165512841" /><figcaption aria-hidden="true">image-20220418165512841</figcaption></figure></li><li><p>hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181657389.png"alt="image-20220418165702338" /><figcaption aria-hidden="true">image-20220418165702338</figcaption></figure></li><li><p>mapred-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> mapred-site.xml.template mapred-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;property&gt;<br>     &lt;name&gt;mapreduce.framework.name&lt;/name&gt;<br>     &lt;value&gt;yarn&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181659157.png"alt="image-20220418165927102" /><figcaption aria-hidden="true">image-20220418165927102</figcaption></figure></li><li><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181702228.png"alt="image-20220418170204186" /><figcaption aria-hidden="true">image-20220418170204186</figcaption></figure></li></ul><h2 id="格式化">6 格式化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop namenode -format<br></code></pre></td></tr></table></figure><p>成功的话，会看到 “successfully formatted” 和 “Exitting with status 0”的提示，若为 “Exitting with status 1” 则是出错</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181705171.png"alt="image-20220418170547835" /><figcaption aria-hidden="true">image-20220418170547835</figcaption></figure><h2 id="启动">7 启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/hadoop<br>sbin/start-all.sh<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181709333.png"alt="image-20220418170911109" /><figcaption aria-hidden="true">image-20220418170911109</figcaption></figure><h2 id="查看jps">8 查看jps</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jps<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181709994.png"alt="image-20220418170952885" /><figcaption aria-hidden="true">image-20220418170952885</figcaption></figure><p>出现这个说明hadoop安装成功</p><h2 id="上传文件">9 上传文件</h2><ul><li><p>创建用户文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/hdfs dfs -<span class="hljs-built_in">mkdir</span> /user<br>./bin/hdfs dfs -<span class="hljs-built_in">mkdir</span> /user/feng<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181727300.png"alt="image-20220418172719186" /><figcaption aria-hidden="true">image-20220418172719186</figcaption></figure></li><li><p>本地新建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim hadooptest1.txt<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181738321.png"alt="image-20220418173843280" /><figcaption aria-hidden="true">image-20220418173843280</figcaption></figure></li><li><p>上传文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/hdfs dfs -put hadooptest1.txt<br></code></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/hdfs dfs -<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181728211.png"alt="image-20220418172816100" /><figcaption aria-hidden="true">image-20220418172816100</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/hdfs dfs -<span class="hljs-built_in">cat</span> hadooptest1.txt<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204181730556.png"alt="image-20220418173024463" /><figcaption aria-hidden="true">image-20220418173024463</figcaption></figure></li></ul><h2 id="总结">总结</h2><p>hadoop在一年前配置过环境，hadoop,hdfs,hbase,mapeduce,断断续续搞了一个月。</p><p>如今重新配置，也还是配置了一个多小时。</p><p>hadoop作为一个分布式系统基础架构，hdfs提供了安全可靠的分布式文件存储系统，mapreduce更是一个高效的超大规模数据处理方法。</p><p>可惜因为效率等种种原因，hadoop逐渐被淘汰了，不过其推广的mapreduce思想永不过时。</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>环境配置</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 配置Cloudfoundry</title>
    <link href="/2022/04/04/ubuntu-%E9%85%8D%E7%BD%AECloudfoundry/"/>
    <url>/2022/04/04/ubuntu-%E9%85%8D%E7%BD%AECloudfoundry/</url>
    
    <content type="html"><![CDATA[<p>没错，又到了每周一度痛苦的配环境环节，更痛苦的是配完的环境可能再也不会打开。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042355639.png"alt="image-20220404235500586" /><figcaption aria-hidden="true">image-20220404235500586</figcaption></figure><p><ahref="https://docs.cloudfoundry.org/cf-cli/install-go-cli.html">官方文档</a></p><h2 id="安装">1 安装</h2><ul><li><p>添加仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://packages.cloudfoundry.org/debian stable main&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/cloudfoundry-cli.list<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204041717625.png"alt="image-20220404171709580" /><figcaption aria-hidden="true">image-20220404171709580</figcaption></figure></li><li><p>更新系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure></li><li><p>安装cli-v8版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install cf8-cli<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204041722245.png"alt="image-20220404172248144" /><figcaption aria-hidden="true">image-20220404172248144</figcaption></figure></li><li><p>测试安装</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042132354.png"alt="image-20220404213210295" /><figcaption aria-hidden="true">image-20220404213210295</figcaption></figure></li><li><p>设置语言</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042136698.png"alt="image-20220404213645622" /><figcaption aria-hidden="true">image-20220404213645622</figcaption></figure></li></ul><h2 id="设置环境并登录">2 设置环境并登录</h2><ul><li><p>注册 Cloudfoundry试用账户</p><p><ahref="https://account.hanatrial.ondemand.com/cockpit#/home/trialhome">链接</a></p></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042207657.png"alt="image-20220404220724578" /><figcaption aria-hidden="true">image-20220404220724578</figcaption></figure><ul><li>设置API</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042213764.png"alt="image-20220404221356694" /><figcaption aria-hidden="true">image-20220404221356694</figcaption></figure><ul><li>登录</li></ul><p>因为某种原因登陆失败</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042214245.png"alt="image-20220404221443087" /><figcaption aria-hidden="true">image-20220404221443087</figcaption></figure><p>使用短期验证码登录</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042220777.png"alt="image-20220404222010633" /><figcaption aria-hidden="true">image-20220404222010633</figcaption></figure><h2 id="测试命令">3 测试命令</h2><ul><li>列出组织名称</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042228192.png"alt="image-20220404222807113" /><figcaption aria-hidden="true">image-20220404222807113</figcaption></figure><ul><li>重命名</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042229618.png"alt="image-20220404222929544" /><figcaption aria-hidden="true">image-20220404222929544</figcaption></figure><ul><li>查看信息</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042230817.png"alt="image-20220404223008663" /><figcaption aria-hidden="true">image-20220404223008663</figcaption></figure><ul><li>显示用户</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042231986.png"alt="image-20220404223144864" /><figcaption aria-hidden="true">image-20220404223144864</figcaption></figure><h2 id="部署python-版的hello-world">4 部署Python 版的hello world</h2><h3 id="安装docker">4.1 安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://get.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042241275.png"alt="image-20220404224134678" /><figcaption aria-hidden="true">image-20220404224134678</figcaption></figure><p>docker可能并不是必备的，只是安装文档中说需要装，就装了<spanclass="github-emoji" data-alias="laughing" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><h3 id="使用cloud-foundry-cli-安装-cloud-foundry-本地插件">4.2 使用CloudFoundry CLI 安装 Cloud Foundry 本地插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf install-plugin cflocal<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042244912.png"alt="image-20220404224439713" /><figcaption aria-hidden="true">image-20220404224439713</figcaption></figure><h3 id="部署python-flask版的hello-world">4.3 部署python flask版的helloworld</h3><h4 id="克隆项目">4.3.1 克隆项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/YoheiFukuhara/cloudfoundry-python-flask-sample.git<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042249781.png"alt="image-20220404224917681" /><figcaption aria-hidden="true">image-20220404224917681</figcaption></figure><h4 id="部署">4.3.2 部署</h4><p>进入文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf push cf-helloworld<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042318346.png"alt="image-20220404231803170" /><figcaption aria-hidden="true">image-20220404231803170</figcaption></figure><p>更改文件:</p><ul><li><p>runtime.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">python-3.6.14<br></code></pre></td></tr></table></figure></li></ul><p>删除失败的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf delete py-helloworld<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042322290.png"alt="image-20220404232259210" /><figcaption aria-hidden="true">image-20220404232259210</figcaption></figure><p>重新push,成功</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042324836.png"alt="image-20220404232447652" /><figcaption aria-hidden="true">image-20220404232447652</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204042327333.png"alt="image-20220404232719291" /><figcaption aria-hidden="true">image-20220404232719291</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>环境配置</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 配置openstack</title>
    <link href="/2022/04/01/ubuntu-%E9%85%8D%E7%BD%AEopenstack/"/>
    <url>/2022/04/01/ubuntu-%E9%85%8D%E7%BD%AEopenstack/</url>
    
    <content type="html"><![CDATA[<h2 id="实验题目">实验题目</h2><p>面向IaaS的OpenStack部署</p><h2 id="实验目的">实验目的</h2><p>在Linux环境下，熟悉OpenStack环境。</p><p>具体包括：了解OpenStack编程环境的配置和部署，完成实验环境及实验工具的熟悉，撰写实验报告。</p><h2 id="实验环境">实验环境</h2><ul><li><p>硬件环境</p><p>Intel Core I5-8300H</p><p>Nvidia Geforce gtx1060</p></li><li><p>软件环境</p><p>VMware Workstation 16</p><p>ubuntu 20.04</p></li></ul><h2 id="实验步骤与内容">实验步骤与内容</h2><blockquote><p>选择安装MicroStack MicroStack是一个OpenStack上游发行版</p></blockquote><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo snap install microstack --beta<br></code></pre></td></tr></table></figure><p>按如下方式查看已安装信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snap list microstack<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529741.png" alt="image-20220328232126221" style="zoom:50%;" /></p><p>在这里，我们看到OpenStack Ussuri已经部署！</p><h3 id="初始化">初始化</h3><p>初始化步骤会自动部署、配置和启动 OpenStack 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo microstack init --auto --control<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529360.png" alt="image-20220328233234671" style="zoom:50%;" /></p><h3 id="验证">验证</h3><p>验证步骤的目的是确认云处于工作状态。验证将包括以下操作：</p><ul><li>执行各种 OpenStack 查询</li><li>创建实例</li><li>通过 SSH 连接到实例</li><li>访问云仪表板</li></ul><h4 id="列出默认的image">列出默认的image</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">microstack.openstack image list<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529907.png" alt="image-20220328233602010" style="zoom:67%;" /></p><h4 id="获取默认的实例列表">获取默认的实例列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">microstack.openstack flavor list<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529029.png" alt="image-20220328233752779" style="zoom:67%;" /></p><h4 id="创建实例">创建实例</h4><p>MicroStack附带了一个方便的实例创建命令<code>microstack launch</code>，它对其实例使用以下默认值：</p><ul><li>keypair <code>microstack</code></li><li>flavor <code>m1.tiny</code></li><li>floating IP address on subnet <code>10.20.20.0/24</code></li></ul><p>基于"cirros"映像创建名为"demo"的实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">microstack launch cirros -n demo<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529345.png" alt="image-20220328234855179" style="zoom: 50%;" /></p><p>使用与默认密钥对关联的私有 SSH 密钥访问实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i /home/feng/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.222<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529537.png" alt="image-20220328235122956" style="zoom:60%;" /></p><h4 id="访问云仪表盘">访问云仪表盘</h4><ul><li><p>访问: https://10.20.20.1:443</p></li><li><p>获得密码</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo snap get microstack config.credentials.keystone-password<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529297.png" alt="image-20220328235644333" style="zoom:67%;" /></p><ul><li><p>登录</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204011529574.png" style="zoom: 50%;" /></p></li></ul><h4 id="关闭">关闭</h4><p>openstack在启动时会占用大量cpu,启动后，会一直占据至少4g内存，让我们本来就性能羸弱的虚拟机不堪重负<spanclass="github-emoji" data-alias="crying_cat_face" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8">😿</span>。我们可以选择关闭它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭</span><br>sudo snap stop microstack<br><span class="hljs-comment"># 取消开机自启</span><br>sudo snap <span class="hljs-built_in">disable</span> microstack<br></code></pre></td></tr></table></figure><p>当然我们也可以重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo snap <span class="hljs-built_in">enable</span> microstack<br>sudo snap start microstack<br></code></pre></td></tr></table></figure><h2 id="结论分析与体会">结论分析与体会</h2><p>Openstack是一个非常流行的创建私有云的框架，但是对资源消耗过大，安装较为繁琐。</p><p>使用MicroStack安装过程较为简单，但是因为其版本还停留在beta阶段，可能存在问题，需要以后解决。</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>环境配置</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在vscode上使用clangd</title>
    <link href="/2022/03/28/%E5%9C%A8vscode%E4%B8%8A%E4%BD%BF%E7%94%A8clangd/"/>
    <url>/2022/03/28/%E5%9C%A8vscode%E4%B8%8A%E4%BD%BF%E7%94%A8clangd/</url>
    
    <content type="html"><![CDATA[<p>首先我们先明白一个概念LSP，额，当然不是老色批🤣</p><blockquote><p>LSP（Language Server Protocol）开源的语言服务器协定。由RedHat、Microsoft和 Codenvy 联合推出，可以让不同的程序编辑器与集成开发环境（IDE）方便嵌入各种程序语言，允许开发人员在最喜爱的工具中使用各种语言来撰写程序</p></blockquote><p>而C++的LSP有</p><ul><li>ms-vscode.cpptools</li><li>clangd</li><li>ccls</li></ul><p>visual studio code 中微软官方的C&#x2F;C++插件使用的是第一个，经常出现各种各样的问题，同时代码补全不是跟好用，例如C++ STL 在使用时无法使用括号补全。同时经常出现更新不及时，更改代码前出现的报错有时需要重新打开项目才会消失<span class="github-emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">&amp;#x1f622;</span>,就很烦，所以这里使用官方推荐的clangd插件进行C&#x2F;C++补全，静态检查，高亮功能。</p><h2 id="1-备份原有的配置文件"><a href="#1-备份原有的配置文件" class="headerlink" title="1. 备份原有的配置文件"></a>1. 备份原有的配置文件</h2><p>在Windows 10上使用 C&#x2F;C++调试时默认会自动生成<code>task.json</code>和<code>launch.json</code>文件，但有的时候会抽风无法生成<code>launch.json</code>，这里做一个备份，基本上官方配置复制下来更改一下安装的工具链地址就可以用：<a href="https://code.visualstudio.com/docs/cpp/config-mingw">配置地址</a>，我做了一些个性化配置。</p><p><strong>task.json 相当于输入一段g++命令，对一段C++代码进行编译和执行，launch.json 会每次调用tasks.json</strong></p><p>使用这个配置可以在调试的时候自动聚焦到终端，生成的二进制文件会出现在根目录的build文件夹</p><ul><li><code>task.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-std=c++20&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>launch.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\mingw64\\bin\\gdb.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-在Ubuntu中设置"><a href="#2-在Ubuntu中设置" class="headerlink" title="2. 在Ubuntu中设置"></a>2. 在Ubuntu中设置</h2><h3 id="2-1-安装包"><a href="#2-1-安装包" class="headerlink" title="2.1 安装包"></a>2.1 安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install g++ gcc gdb cmake make llvm clangd lldb<br></code></pre></td></tr></table></figure><h3 id="2-2-安装vscode-插件"><a href="#2-2-安装vscode-插件" class="headerlink" title="2.2 安装vscode 插件"></a>2.2 安装vscode 插件</h3><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203281106759.png" alt="image-20220328110618664"></p><p>在安装C&#x2F;C++和clangd插件后，会出现<strong>冲突问题</strong>，是两个插件补全出现冲突，在<code>setting.json</code>中添加，关闭自动补全</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 只第一个其实就可以</span><br><span class="hljs-attr">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;C_Cpp.autocomplete&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;C_Cpp.errorSquiggles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="2-3-使用clang-lldb"><a href="#2-3-使用clang-lldb" class="headerlink" title="2.3 使用clang++,lldb"></a>2.3 使用clang++,lldb</h3><p>配置方法与正常的配置差不多，有些许修改，需要注意在linux下，二进制文件没有“.exe后缀”</p><ul><li><code> tasks.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/clang++&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-std=c++20&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>launch.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: build active file&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-使用g-gdb"><a href="#2-4-使用g-gdb" class="headerlink" title="2.4 使用g++,gdb"></a>2.4 使用g++,gdb</h3><p>因为我们只关闭了C&#x2F;C++插件的自动补全功能，所以理论上我们是可以使用官方插件进行调试的，使用clangd写代码，C&#x2F;C++调试。官方的插件在调试上对内存断点上更加好用</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203281657632.png" alt="image-20220328165732579"></p><p><code>tasks.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/g++&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>launch.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;DEBUG&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build active file&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>由于编译和调试所依赖的工具和插件是不同的，我甚至可以使用clang++编译，gdb调试，只需要将<code>tasks.json</code>的内容更换为使用clang++时即可</p><h3 id="2-5-使用Cmake进行多文件编译"><a href="#2-5-使用Cmake进行多文件编译" class="headerlink" title="2.5 使用Cmake进行多文件编译"></a>2.5 使用Cmake进行多文件编译</h3><p>打开一个CMake项目，这是一个简单的项目，只有一个头文件和源文件构成</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203282106596.png" alt="image-20220328210628497"></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>.<span class="hljs-number">0</span>)<br><span class="hljs-keyword">project</span>(CppClangd)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">20</span>)<br><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">add_executable</span>(CppClangd  main.cpp  MyFunction.h)<br></code></pre></td></tr></table></figure><h4 id="2-5-1-生成compile-command-json"><a href="#2-5-1-生成compile-command-json" class="headerlink" title="2.5.1 生成compile_command.json"></a>2.5.1 生成compile_command.json</h4><p>clangd需要根据该文件获取各个文件的include path，以及编译警告错误之类的，必须要有这个文件</p><ul><li>在CMakeList.txt中添加即可</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>)<br></code></pre></td></tr></table></figure><ul><li>在build目录下</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES .<br></code></pre></td></tr></table></figure><h4 id="2-5-2-Debug配置"><a href="#2-5-2-Debug配置" class="headerlink" title="2.5.2 Debug配置"></a>2.5.2 Debug配置</h4><p>实际上，由于我们因为只禁用了C&#x2F;C++的自动补全功能(再次强调<span class="github-emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&amp;#x1f606;</span>),所以正常来讲可以忽略这个东西，但是如果完全不用官方这一套的话，还是需要的。我们只需要调试，所以只需要launch.json,将我们之前的launch.json根据<a href="https://github.com/microsoft/vscode-cmake-tools/blob/main/docs/debug-launch.md#debug-using-a-launchjson-file">Cmake Tools</a>官方文档改一改就可以了</p><ul><li>使用gdb</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;DEBUG&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,<br>            <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-string">&quot;program&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;command:cmake.launchTargetPath&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;args&quot;</span>: [],<br>            <span class="hljs-string">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;workspaceFolder&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;environment&quot;</span>: [],<br>            <span class="hljs-string">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;internalConsoleOptions&quot;</span>: <span class="hljs-string">&quot;neverOpen&quot;</span>,<br>            <span class="hljs-string">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,<br>            <span class="hljs-string">&quot;setupCommands&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span>,<br>                    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,<br>                    <span class="hljs-string">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span><br>                &#125;<br>            ],<br>            <span class="hljs-string">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用lldb</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;command:cmake.launchTargetPath&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-配置clangd"><a href="#3-配置clangd" class="headerlink" title="3. 配置clangd"></a>3. 配置clangd</h2><h3 id="3-1-setting-json"><a href="#3-1-setting-json" class="headerlink" title="3.1 setting.json"></a>3.1 setting.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot; --compile-commands-dir=$&#123;workspaceFold&#125;$/build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// clangd在创建索引使用的线程数</span><br>        <span class="hljs-string">&quot;-j=4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用 Clang-Tidy 以提供静态检查</span><br>        <span class="hljs-string">&quot;--clang-tidy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 建议风格：重载函数只会给出一个建议；反可以设置为detailed</span><br>        <span class="hljs-string">&quot;--completion-style=bundled&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用,补全函数时，将会给参数提供占位符</span><br>        <span class="hljs-string">&quot;--function-arg-placeholders=false&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span><br>        <span class="hljs-string">&quot;--header-insertion-decorators&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 补充头文件</span><br>        <span class="hljs-string">&quot;--header-insertion=iwyu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 让 Clangd 生成更详细的日志</span><br>        <span class="hljs-string">&quot;--log=verbose&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// pch存储在内存中，内存消耗更大，但是性能更优</span><br>        <span class="hljs-string">&quot;--pch-storage=memory&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输出的 JSON 文件更美观</span><br>        <span class="hljs-string">&quot;--pretty&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置项目，或者用户config</span><br>    <span class="hljs-string">&quot;--enable-config&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">// LLDB 指针显示解引用内容</span><br><span class="hljs-attr">&quot;lldb.dereferencePointers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 鼠标悬停在变量上时预览变量值</span><br><span class="hljs-attr">&quot;lldb.evaluateForHovers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 监视表达式的默认类型</span><br><span class="hljs-attr">&quot;lldb.launch.expressions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;simple&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 不显示汇编代码</span><br><span class="hljs-attr">&quot;lldb.showDisassembly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// LLDB 生成更详细的日志</span><br><span class="hljs-attr">&quot;lldb.verboseLogging&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">// 保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，不自动配置 CMake 项目目录</span><br><span class="hljs-attr">&quot;cmake.configureOnEdit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// 在 CMake 项目目录打开时自动对其进行配置</span><br><span class="hljs-attr">&quot;cmake.configureOnOpen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// 成功配置后，将 compile_commands.json 复制到此位置</span><br><span class="hljs-attr">&quot;cmake.copyCompileCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="3-2-clang-tidy"><a href="#3-2-clang-tidy" class="headerlink" title="3.2 .clang-tidy"></a>3.2 .clang-tidy</h3><p><code>Ctrl+Shft+p</code>配置如下内容,<a href="https://clangd.llvm.org/config.html">官网配置</a></p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203282252474.png" alt="image-20220328225226433"></p><h4 id="3-2-1-配置含义"><a href="#3-2-1-配置含义" class="headerlink" title="3.2.1 配置含义"></a>3.2.1 配置含义</h4><p>可能官网配置较为繁琐，这里列举了大部分的中文含义和示例代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br></pre></td><td class="code"><pre><code class="hljs c++">Checks:<br><span class="hljs-comment">// 从整数类型转换为字符串默认使用std::to_string</span><br><span class="hljs-number">1.</span> boost-use-to-string<br><br><span class="hljs-comment">// 参数注释</span><br><span class="hljs-number">2.</span> bugprone-argument-comment<br><span class="hljs-comment">// before</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> MeaningOfLife)</span></span>;<br><span class="hljs-built_in">foo</span>(<span class="hljs-number">42</span>);<br><span class="hljs-comment">// after</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> MeaningOfLife)</span></span>;<br><span class="hljs-built_in">foo</span>(<span class="hljs-comment">/*MeaningOfLife=*/</span><span class="hljs-number">42</span>);<br><br><span class="hljs-comment">// 要求相同分支合并</span><br><span class="hljs-number">3.</span> bugprone-branch-clone<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">switch</span> (ch) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">default</span>:<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">switch</span> (ch) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">default</span>:<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">test_value</span>(x) ? x : x;<br><br><span class="hljs-comment">// 基类拷贝构造函数初始化</span><br><span class="hljs-number">4.</span> bugprone-copy-constructor-init<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Copyable</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Copyable</span>() = <span class="hljs-keyword">default</span>;<br>  <span class="hljs-built_in">Copyable</span>(<span class="hljs-type">const</span> Copyable &amp;) = <span class="hljs-keyword">default</span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">X2</span> : <span class="hljs-keyword">public</span> Copyable &#123;<br>  <span class="hljs-built_in">X2</span>(<span class="hljs-type">const</span> X2 &amp;other) &#123;&#125; <span class="hljs-comment">// Copyable(other) is missing</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">X4</span> : <span class="hljs-keyword">public</span> Copyable &#123;<br>  <span class="hljs-built_in">X4</span>(<span class="hljs-type">const</span> X4 &amp;other) : <span class="hljs-built_in">Copyable</span>() &#123;&#125; <span class="hljs-comment">// other is missing</span><br>&#125;;<br><br><span class="hljs-comment">// 禁止返回动态初始化的静态变量</span><br><span class="hljs-number">5.</span> bugprone-dynamic-<span class="hljs-type">static</span>-<span class="hljs-function">initializers</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> k = <span class="hljs-built_in">bar</span>();<br>  <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-comment">// 禁止在一些函数内抛出异常，避免带来一些风险（析构函数、移动构造函数、移动赋值运算符、main函数、swap函数等）</span><br><span class="hljs-number">6.</span> bugprone-exception-escape<br><br><span class="hljs-comment">// 检查截断和溢出的情况</span><br><span class="hljs-number">7.</span> bugprone-fold-init-type<br><span class="hljs-keyword">auto</span> a = &#123;<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>&#125;;<br><span class="hljs-keyword">return</span> std::<span class="hljs-built_in">accumulate</span>(std::<span class="hljs-built_in">begin</span>(a), std::<span class="hljs-built_in">end</span>(a), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">auto</span> a = &#123;<span class="hljs-number">65536LL</span> * <span class="hljs-number">65536</span> * <span class="hljs-number">65536</span>&#125;;<br><span class="hljs-keyword">return</span> std::<span class="hljs-built_in">accumulate</span>(std::<span class="hljs-built_in">begin</span>(a), std::<span class="hljs-built_in">end</span>(a), <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 检查同名但未定义的命名空间</span><br><span class="hljs-number">8.</span> bugprone-forward-declaration-<span class="hljs-keyword">namespace</span><br><span class="hljs-keyword">namespace</span> na &#123; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>; &#125;<br><span class="hljs-keyword">namespace</span> nb &#123; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;&#125;; &#125;<br>nb::A a;<br><br><span class="hljs-comment">// 排除不正确舍入问题</span><br><span class="hljs-number">9.</span> bugprone-incorrect-<span class="hljs-built_in">roundings</span><br>(<span class="hljs-type">int</span>)(double_expression + <span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment">// 检查容易出错的无限循环</span><br><span class="hljs-number">10.</span> bugprone-infinite-loop<br><br><span class="hljs-comment">// 检查会导致精度损失的整数除法</span><br><span class="hljs-number">11.</span> bugprone-integer-division<br><br><span class="hljs-comment">// 查找由于缺少括号而可能具有意外行为的宏</span><br><span class="hljs-number">12.</span> bugprone-macro-parentheses<br><br><span class="hljs-comment">// 检查字符串操作的不当行为</span><br><span class="hljs-number">13.</span> bugprone-misplaced-<span class="hljs-keyword">operator</span>-in-strlen-in-alloc<br><br><span class="hljs-comment">// 检查错误的指针动态分配内存</span><br><span class="hljs-number">14.</span> bugprone-misplaced-pointer-arithmetic-in-alloc<br><span class="hljs-comment">// before</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bad_malloc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(n) + <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(n + <span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// 类型转换造成的精度损失</span><br><span class="hljs-number">15.</span> bugprone-misplaced-widening-cast<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">return</span> (<span class="hljs-type">long</span>)(x * <span class="hljs-number">1000</span>);<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">return</span> (<span class="hljs-type">long</span>)x * <span class="hljs-number">1000</span>;<br><br><span class="hljs-comment">// 检查std::move()的错误使用</span><br><span class="hljs-number">16.</span> bugprone-move-forwarding-reference<br><br><span class="hljs-comment">// 检查多语句宏定义</span><br><span class="hljs-number">17.</span> bugprone-multiple-statement-macro<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INCREMENT_TWO(x, y) (x)++; (y)++</span><br><span class="hljs-keyword">if</span> (do_increment)<br>  <span class="hljs-built_in">INCREMENT_TWO</span>(a, b);  <span class="hljs-comment">// (b)++ will be executed unconditionally.</span><br><br><span class="hljs-comment">// 查找容易出错的noescape</span><br><span class="hljs-number">18.</span> bugprone-no-<span class="hljs-function">escape</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(__attribute__((noescape)) <span class="hljs-type">int</span> *p)</span> </span>&#123;<br>  <span class="hljs-built_in">dispatch_async</span>(queue, ^&#123;<br>    *p = <span class="hljs-number">123</span>;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// 检查可能导致非空终止结果的函数调用，使用strcpy()、strncpy()、strcpy_s()、 strncpy_s()代替memcpy()和memcpy_s()</span><br><span class="hljs-number">19.</span> bugprone-<span class="hljs-keyword">not</span>-null-terminated-<span class="hljs-function">result</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">char</span> *<span class="hljs-title">stringCpy</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;str)</span> </span>&#123;<br>  <span class="hljs-type">char</span> *result = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">char</span> *&gt;(<span class="hljs-built_in">malloc</span>(str.<span class="hljs-built_in">size</span>()));<br>  <span class="hljs-built_in">memcpy</span>(result, str.<span class="hljs-built_in">data</span>(), str.<span class="hljs-built_in">size</span>());<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">char</span> *<span class="hljs-title">stringCpy</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;str)</span> </span>&#123;<br>  <span class="hljs-type">char</span> *result = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">char</span> *&gt;(<span class="hljs-built_in">malloc</span>(str.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>));<br>  <span class="hljs-built_in">strcpy</span>(result, str.<span class="hljs-built_in">data</span>());<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 检查对父虚函数的调用</span><br><span class="hljs-number">20.</span> bugprone-parent-<span class="hljs-keyword">virtual</span>-call<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-keyword">virtual</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;...&#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A &#123;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;...&#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">C</span>: <span class="hljs-keyword">public</span> B &#123;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; A::<span class="hljs-built_in">foo</span>(); &#125;<br><span class="hljs-comment">//                     ^^^^^^^^</span><br>&#125;;<br><br><span class="hljs-comment">// 检查对pthread_*或posix_*函数调用是否判断负返回值</span><br><span class="hljs-number">21.</span> bugprone-posix-<span class="hljs-keyword">return</span><br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">posix_fadvise</span>(...) &lt; <span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">posix_fadvise</span>(...) &gt; <span class="hljs-number">0</span>) &#123;&#125;<br><br><span class="hljs-comment">// 检查逻辑if的重复判断冗余</span><br><span class="hljs-number">22.</span> bugprone-redundant-branch-condition<br><span class="hljs-keyword">if</span> (onFire) &#123;<br>  <span class="hljs-keyword">if</span> (onFire &amp;&amp; peopleInTheBuilding &gt; <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">scream</span>();<br>&#125;<br><br><span class="hljs-comment">// 检查不规范的下划线使用</span><br><span class="hljs-number">23.</span> bugprone-reserved-identifier<br><br><span class="hljs-comment">// 检查容易出错的信号处理程序</span><br><span class="hljs-number">24.</span> bugprone-signal-handler<br><br><span class="hljs-comment">// 检查错误的字符型与字符型、整型之间的强制转换和比较</span><br><span class="hljs-number">25.</span> bugprone-<span class="hljs-type">signed</span>-<span class="hljs-type">char</span>-misuse<br><br><span class="hljs-comment">// 检查可能出错的sizeof使用</span><br><span class="hljs-number">26.</span> bugprone-<span class="hljs-keyword">sizeof</span>-container<br><span class="hljs-number">27.</span> bugprone-<span class="hljs-keyword">sizeof</span>-expression<br>std::string s;<br><span class="hljs-type">int</span> a = <span class="hljs-number">47</span> + <span class="hljs-built_in">sizeof</span>(s); <span class="hljs-comment">// 报错</span><br><span class="hljs-type">int</span> b = <span class="hljs-built_in">sizeof</span>(std::string); <span class="hljs-comment">// 允许</span><br><br>std::string array_of_strings[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">sizeof</span>(array_of_strings) / <span class="hljs-built_in">sizeof</span>(array_of_strings[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 允许</span><br><br>std::array&lt;<span class="hljs-type">int</span>, 3&gt; std_array;<br><span class="hljs-type">int</span> d = <span class="hljs-built_in">sizeof</span>(std_array); <span class="hljs-comment">// 允许</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  [...]<br>  <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>); &#125;  <span class="hljs-comment">// 不允许，可能是sizeof(*this)</span><br>  [...]<br>&#125;;<br><br><span class="hljs-comment">// 检查唤醒函数的错误使用</span><br><span class="hljs-number">28.</span> bugprone-spuriously-wake-up-functions<br><br><span class="hljs-comment">// 检查容易出错的字符串初始化</span><br><span class="hljs-number">29.</span> bugprone-string-<span class="hljs-function">constructor</span><br><span class="hljs-function">std::string <span class="hljs-title">str</span><span class="hljs-params">(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-number">50</span>)</span></span>; <span class="hljs-comment">// should be str(50, &#x27;x&#x27;)</span><br><br><span class="hljs-comment">// 检查容易出错的字符串赋值(可能导致误判)</span><br><span class="hljs-number">30.</span> bugprone-string-integer-assignment<br>std::string s;<br><span class="hljs-type">int</span> x = <span class="hljs-number">5965</span>;<br>s = <span class="hljs-number">6</span>;<br>s = x;<br><br><span class="hljs-comment">// 检查带有嵌入\0字符的字符串</span><br><span class="hljs-number">31.</span> bugprone-string-literal-with-embedded-nul<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *Bytes[] = <span class="hljs-string">&quot;\x03\0x02\0x01\0x00\0xFF\0xFF\0xFF&quot;</span>;<br><span class="hljs-function">std::string <span class="hljs-title">str</span><span class="hljs-params">(<span class="hljs-string">&quot;abc\0def&quot;</span>)</span></span>; <br><br><span class="hljs-comment">// 容易出错的枚举用法</span><br><span class="hljs-number">32.</span> bugprone-suspicious-<span class="hljs-keyword">enum</span>-usage<br><br><span class="hljs-comment">// 检查错误的文件包含（只包含头文件）</span><br><span class="hljs-number">33.</span> bugprone-suspicious-include.HeaderFileExtensions<br><br><span class="hljs-comment">// 检查错误的memset的使用</span><br><span class="hljs-number">34.</span> bugprone-suspicious-memset-<span class="hljs-function">usage</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> i[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>  <span class="hljs-type">int</span> *ip = i;<br>  <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;1&#x27;</span>;<br>  <span class="hljs-type">char</span> *cp = &amp;c;<br>  <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// Case 1</span><br>  <span class="hljs-built_in">memset</span>(ip, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// suspicious</span><br>  <span class="hljs-built_in">memset</span>(cp, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// OK</span><br><br>  <span class="hljs-comment">// Case 2</span><br>  <span class="hljs-built_in">memset</span>(ip, <span class="hljs-number">0xabcd</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// fill value gets truncated</span><br>  <span class="hljs-built_in">memset</span>(ip, <span class="hljs-number">0x00</span>, <span class="hljs-number">1</span>);   <span class="hljs-comment">// OK</span><br><br>  <span class="hljs-comment">// Case 3</span><br>  <span class="hljs-built_in">memset</span>(ip, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), v); <span class="hljs-comment">// zero length, potentially swapped</span><br>  <span class="hljs-built_in">memset</span>(ip, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);           <span class="hljs-comment">// OK</span><br>&#125;<br><br><span class="hljs-comment">// 检查可疑的逗号丢失</span><br><span class="hljs-number">35.</span> bugprone-suspicious-missing-comma<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* B[] = <span class="hljs-string">&quot;This&quot;</span> <span class="hljs-string">&quot; is a &quot;</span>    <span class="hljs-string">&quot;test&quot;</span>; <span class="hljs-comment">// 允许</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* Test[] = &#123;<br>  <span class="hljs-string">&quot;line 1&quot;</span>,<br>  <span class="hljs-string">&quot;line 2&quot;</span>     <span class="hljs-comment">// 报错</span><br>  <span class="hljs-string">&quot;line 3&quot;</span>,<br>  <span class="hljs-string">&quot;line 4&quot;</span>,<br>  <span class="hljs-string">&quot;line 5&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 检查容易出错的可以分号</span><br><span class="hljs-number">36.</span> bugprone-suspicious-<span class="hljs-function">semicolon</span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(x &lt; y)</span></span>;<br>&#123;<br>  x++;<br>&#125;<br><br><span class="hljs-comment">// 检查可疑的字符串比较</span><br><span class="hljs-number">37.</span> bugprone-suspicious-string-<span class="hljs-function">compare</span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(strcmp(...))</span>       <span class="hljs-comment">// 建议显式比较</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(!strcmp(...))</span>      <span class="hljs-comment">// 允许</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(strcmp(...) != <span class="hljs-number">0</span>)</span>  <span class="hljs-comment">// 允许</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(strcmp(...) == <span class="hljs-number">-1</span>)</span> <span class="hljs-comment">// 错误</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(strcmp(...) &lt; <span class="hljs-number">0.</span>)</span>  <span class="hljs-comment">// 错误</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 检查容易出错的交换参数</span></span><br><span class="hljs-function">38. bugprone-swapped-arguments</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 检查do-while常为false时的continue使用</span></span><br><span class="hljs-function">39. bugprone-terminating-<span class="hljs-keyword">continue</span></span><br><span class="hljs-function"><span class="hljs-keyword">do</span> </span>&#123;<br>  ...<br>  <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 直接终止循环</span><br>  ...<br>&#125; <span class="hljs-keyword">while</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 检查可能缺失的throw关键字</span><br><span class="hljs-number">40.</span> bugprone-<span class="hljs-keyword">throw</span>-keyword-missing<br><span class="hljs-type">void</span> <span class="hljs-built_in">f</span>(<span class="hljs-type">int</span> i) &#123;<br>  <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// Exception is created but is not thrown.</span><br>    std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Unexpected argument&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 检查容易出错的循环变量</span><br><span class="hljs-number">41.</span> bugprone-too-small-loop-<span class="hljs-function">variable</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">long</span> size = <span class="hljs-number">294967296l</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">short</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&amp; items)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">short</span> i = <span class="hljs-number">0</span>; i &lt; items.<span class="hljs-built_in">size</span>(); ++i) &#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 查找容易出错的未定义内存操作</span><br><span class="hljs-number">42.</span> bugprone-undefined-memory-manipulation<br><br><span class="hljs-comment">// 检查容易出错的委托构造函数</span><br><span class="hljs-number">43.</span> bugprone-undelegated-constructor<br><br><span class="hljs-comment">// 检查未对new进行异常处理</span><br><span class="hljs-number">44.</span> bugprone-unhandled-exception-at-<span class="hljs-keyword">new</span><br><span class="hljs-type">int</span> *<span class="hljs-built_in">f</span>() <span class="hljs-keyword">noexcept</span> &#123;<br>  <span class="hljs-type">int</span> *p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">1000</span>];<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// std::bad_alloc</span><br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 检查容易出错的未处理自赋值</span><br><span class="hljs-number">55.</span> bugprone-unhandled-self-assignment<br><br><span class="hljs-comment">// 检查看起来像RAII对象的临时对象。</span><br><span class="hljs-number">56.</span> bugprone-unused-raii<br><br><span class="hljs-comment">// 检查未使用的一些返回值（如返回指针）</span><br><span class="hljs-number">57.</span> bugprone-unused-<span class="hljs-keyword">return</span>-value<br><br><span class="hljs-comment">// 禁止使用std::move之后的对象仍被使用</span><br><span class="hljs-number">58.</span> bugprone-use-after-move<br><br><span class="hljs-comment">// 检查函数名与基类虚函数类似的函数声明</span><br><span class="hljs-number">59.</span> bugprone-<span class="hljs-keyword">virtual</span>-near-miss<br><br><span class="hljs-comment">// 会报未知的警告</span><br><span class="hljs-number">60.</span> cert-dcl21-cpp<br><span class="hljs-number">61.</span> cert-dcl50-cpp<br><span class="hljs-number">62.</span> cert-env33-c<br><br><span class="hljs-comment">// 检查对std posix等命名空间的修改</span><br><span class="hljs-number">61.</span> cert-dcl58-cpp<br><br><span class="hljs-comment">// 检查不验证转换字符串到数字的有效性的代码，如c语言atoi()</span><br><span class="hljs-number">62.</span> cert-err34-c<br><br><span class="hljs-comment">// 检查浮点类型的循环</span><br><span class="hljs-number">63.</span> cert-flp30-c<br><br><span class="hljs-comment">// 生成动态类型信息</span><br><span class="hljs-number">64.</span> clang-analyzer-core.DynamicTypePropagation<br><br><span class="hljs-comment">// 检查未初始化的块</span><br><span class="hljs-number">65.</span> clang-analyzer-core.uninitialized.CapturedBlockVariable<br><br><span class="hljs-comment">// 检查释放后的内部指针的使用</span><br><span class="hljs-number">66.</span> clang-analyzer-cplusplus.InnerPointer<br><br><span class="hljs-comment">// 检查从非空返回类型 返回 可能空的指针</span><br><span class="hljs-number">67.</span> clang-analyzer-nullability.NullableReturnedFromNonnull<br><br><span class="hljs-number">68.</span> clang-analyzer-optin.osx.OSObjectCStyleCast<br><span class="hljs-number">69.</span> clang-analyzer-optin.performance.GCDAntipattern<br><span class="hljs-number">70.</span> clang-analyzer-osx.MIG<br><br><span class="hljs-comment">// 检查过度填充的结构</span><br><span class="hljs-number">71.</span> clang-analyzer-optin.performance.Padding<br><br><span class="hljs-number">72.</span> clang-analyzer-osx.OSObjectRetainCount<br><br><span class="hljs-comment">// 检查objc</span><br><span class="hljs-number">73.</span> clang-analyzer-osx.ObjCProperty <br><span class="hljs-number">74.</span> clang-analyzer-osx.cocoa.AutoreleaseWrite<br><br><span class="hljs-comment">// cocoa相关</span><br><span class="hljs-number">75.</span> -clang-analyzer-osx.cocoa-*<br><br><span class="hljs-comment">// va_lists相关</span><br><span class="hljs-number">76.</span> clang-analyzer-valist-<br><br><span class="hljs-comment">// mt安全</span><br><span class="hljs-number">77.</span> concurrency-mt-unsafe<br><br><span class="hljs-comment">// 并发线程</span><br><span class="hljs-number">78.</span> concurrency-thread-canceltype-asynchronous<br><br><span class="hljs-comment">// 避免使用goto</span><br><span class="hljs-number">79.</span> cppcoreguidelines-avoid-<span class="hljs-keyword">goto</span><br><br><span class="hljs-comment">// 禁止非常量全局变量</span><br><span class="hljs-number">80.</span> cppcoreguidelines-avoid-non-<span class="hljs-type">const</span>-global-variables<br><br><span class="hljs-comment">// 检查extern对象的全局变量的初始值设定项初始化顺序问题</span><br><span class="hljs-number">81.</span> cppcoreguidelines-interfaces-global-init<br><br><span class="hljs-comment">// 检查可能被认为有问题的宏用法</span><br><span class="hljs-number">82.</span> -cppcoreguidelines-macro-usage<br><br><span class="hljs-number">83.</span> -cppcoreguidelines-narrowing-conversions<br><br><span class="hljs-comment">// 对c风格内存分配的检查</span><br><span class="hljs-number">84.</span> cppcoreguidelines-no-malloc<br><br><span class="hljs-comment">// 检查内存分配时是否使用gsl的方法</span><br><span class="hljs-number">85.</span> -cppcoreguidelines-owning-memory<br><br><span class="hljs-number">86.</span> cppcoreguidelines-prefer-member-initializer<br><span class="hljs-number">87.</span> cppcoreguidelines-pro-bounds-array-to-pointer-decay<br><span class="hljs-number">88.</span> cppcoreguidelines-pro-bounds-constant-array-index<br><br><span class="hljs-comment">// 标记指针的算法使用</span><br><span class="hljs-number">89.</span> -cppcoreguidelines-pro-bounds-pointer-arithmetic<br><br><span class="hljs-comment">// 标记const_cast的使用</span><br><span class="hljs-number">90.</span> -cppcoreguidelines-pro-type-<span class="hljs-type">const</span>-cast<br><span class="hljs-number">91.</span> -cppcoreguidelines-pro-type-cstyle-cast<br><br><span class="hljs-number">92.</span> -cppcoreguidelines-pro-type-member-init<br><br><span class="hljs-comment">// 标记reinterpret_cast的使用</span><br><span class="hljs-number">93.</span> -cppcoreguidelines-pro-type-reinterpret-cast<br><br><span class="hljs-comment">// 标记static_cast的使用</span><br><span class="hljs-number">94.</span> -cppcoreguidelines-pro-type-<span class="hljs-type">static</span>-cast-downcast <br><br><span class="hljs-comment">// 标记union成员的访问权限</span><br><span class="hljs-number">95.</span> -cppcoreguidelines-pro-type-<span class="hljs-keyword">union</span>-access<br><br><span class="hljs-comment">// 标记对c样式可变参数函数调用以及对va_arg的使用</span><br><span class="hljs-number">96.</span> cppcoreguidelines-pro-type-vararg<br><br><span class="hljs-comment">// 检查导致slice的情况</span><br><span class="hljs-number">97.</span> cppcoreguidelines-slicing<br><span class="hljs-keyword">struct</span> B &#123; <span class="hljs-type">int</span> a; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>; &#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">D</span> : B &#123; <span class="hljs-type">int</span> b; <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>; &#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(B b)</span> </span>&#123;  <span class="hljs-comment">// Missing reference, intended?</span><br>  b.<span class="hljs-built_in">f</span>();  <span class="hljs-comment">// Calls B::f.</span><br>&#125;<br><br>D d;<br><span class="hljs-built_in">use</span>(d);  <span class="hljs-comment">// Slice</span><br><br><span class="hljs-number">98.</span> cppcoreguidelines-special-member-functions<br><span class="hljs-number">99.</span> darwin-avoid-spinlock<br><span class="hljs-number">100.</span> darwin-dispatch-once-nonstatic<br><br><span class="hljs-comment">// 使用默认参数时发出警告</span><br><span class="hljs-number">101.</span> -fuchsia-<span class="hljs-keyword">default</span>-arguments-calls<br><br><span class="hljs-comment">// 函数定义默认参数时发出警告</span><br><span class="hljs-number">102.</span> -fuchsia-<span class="hljs-keyword">default</span>-arguments-declarations<br><br><span class="hljs-comment">// 继承自多个非纯虚类发出警告</span><br><span class="hljs-number">103.</span> -fuchsia-multiple-inheritance<br><br><span class="hljs-comment">// 检查已被重载的运算符</span><br><span class="hljs-number">104.</span> -fuchsia-overloaded-<span class="hljs-keyword">operator</span><br><br><span class="hljs-comment">// 限制创建静态对象（除非构造函数是constexpr类型或没有显式构造函数）</span><br><span class="hljs-number">105.</span> fuchsia-statically-constructed-objects<br><br><span class="hljs-number">106.</span> fuchsia-trailing-<span class="hljs-keyword">return</span><br><br><span class="hljs-comment">// 对虚继承类发出警告(报错)</span><br><span class="hljs-number">107.</span> fuchsia-<span class="hljs-keyword">virtual</span>-inheritance<br><span class="hljs-keyword">class</span> B : <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> A &#123;&#125;;<br><br><span class="hljs-comment">// 检查make_pair是否推断出模板类型</span><br><span class="hljs-number">108.</span> google-build-<span class="hljs-keyword">explicit</span>-make-pair<br><br><span class="hljs-comment">// 在标头中查找匿名命名空间</span><br><span class="hljs-number">109.</span>google-build-namespaces<br>- key:google-build-namespaces.HeaderFileExtensions<br>    value:h,hh,hpp,hxx<br><br><span class="hljs-comment">// 检查是否使用using namespace</span><br><span class="hljs-number">110.</span> google-build-<span class="hljs-keyword">using</span>-<span class="hljs-keyword">namespace</span><br><br><span class="hljs-comment">// 为虚函数参数添加默认值</span><br><span class="hljs-number">111.</span> google-<span class="hljs-keyword">default</span>-arguments<br><br><span class="hljs-comment">// 检查显式构造函数，避免隐式转换带来的风险</span><br><span class="hljs-number">112.</span> -google-<span class="hljs-keyword">explicit</span>-constructor<br><br><span class="hljs-comment">// 在头文件中标记全局命名空间污染</span><br><span class="hljs-number">113.</span> google-global-names-in-headers<br>  - key: google-global-names-in-headers.HeaderFileExtensions<br>    value: h<br><br><span class="hljs-comment">// objc</span><br><span class="hljs-number">114.</span> -google-objc-avoid-nsobject-<span class="hljs-keyword">new</span><br><span class="hljs-number">115.</span> -google-objc-avoid-throwing-exception<br><span class="hljs-number">116.</span> -google-objc-function-naming<br><span class="hljs-number">117.</span> -google-objc-global-variable-declaration<br><br><span class="hljs-comment">// 检查googletest的测试以及测试示例名称是否有下划线（测试名称和测试用例名称中不允许使用下划线）</span><br><span class="hljs-number">118.</span> google-readability-avoid-underscore-in-googletest-name<br><br><span class="hljs-comment">// 查找 C 风格强制转换的用法</span><br><span class="hljs-number">119.</span> google-readability-casting<br><br><span class="hljs-comment">// 查找TODO有没有署用户名、邮件等</span><br><span class="hljs-number">120.</span> google-readability-todo<br><span class="hljs-comment">// TODO(kl@gmail.com): Use a &quot;*&quot; here for concatenation operator.</span><br><span class="hljs-comment">// TODO(Zeke) change this to use relations.</span><br><span class="hljs-comment">// TODO(bug 12345): remove the &quot;Last visitors&quot; feature.</span><br><br><span class="hljs-comment">// 检查整数定义，将short, long，long long改为intxx_类型</span><br><span class="hljs-number">121.</span> -google-runtime-<span class="hljs-type">int</span><br><br><span class="hljs-comment">// 检查用户自定义表述的重载运算符</span><br><span class="hljs-number">121.</span> google-runtime-<span class="hljs-keyword">operator</span><br><br><span class="hljs-comment">// 用户自定义函数名中，将带有case字符改为suite</span><br><span class="hljs-number">122.</span> google-upgrade-googletest-<span class="hljs-keyword">case</span><br><br><span class="hljs-comment">// 要求goto只跳过块的一部分（不使用goto）</span><br><span class="hljs-number">123.</span> -hicpp-avoid-<span class="hljs-keyword">goto</span><br><br><span class="hljs-comment">// 确保throw表达式中的每个值都是std::exception的实例</span><br><span class="hljs-number">124.</span> hicpp-exception-baseclass<br><br><span class="hljs-comment">// 有if和else if一定要包含else（即使内容为空），有switch要包含default，少量case用if代替。</span><br><span class="hljs-number">125.</span> hicpp-multiway-paths-covered<br><br><span class="hljs-comment">// 检查汇编语句</span><br><span class="hljs-number">126.</span> hicpp-no-assembler<br><br><span class="hljs-comment">// 检查对有符号整数类型的按位运算的使用，避免风险</span><br><span class="hljs-number">127.</span> hicpp-<span class="hljs-type">signed</span>-bitwise<br><br><span class="hljs-comment">// 检查linux内核代码</span><br><span class="hljs-number">128.</span> linuxkernel-must-use-errs<br><br><span class="hljs-comment">// 检查不符合LLVM风格的头文件</span><br><span class="hljs-number">129.</span> llvm-header-guard<br>  - key: llvm-header-guard.HeaderFileExtensions<br>    value: <span class="hljs-string">&#x27;,h,hh,hpp,hxx&#x27;</span><br><br><span class="hljs-comment">// 检查include的正确顺序（llvm风格）</span><br><span class="hljs-number">130.</span> llvm-include-order<br><br><span class="hljs-comment">// 长命名空间结束注释</span><br><span class="hljs-number">131.</span> llvm-<span class="hljs-keyword">namespace</span>-comment<br><br><span class="hljs-comment">// cast的一些变换</span><br><span class="hljs-number">132.</span> llvm-prefer-isa-<span class="hljs-keyword">or</span>-dyn-cast-in-conditionals<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">cast</span>&lt;X&gt;(y)) &#123;&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">dyn_cast</span>&lt;X&gt;(y)) &#123;&#125;<br><span class="hljs-comment">// befo</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">cast</span>&lt;X&gt;(y)) &#123;&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isa</span>&lt;X&gt;(y)) &#123;&#125;<br><br><span class="hljs-comment">// unsigned用Register代替</span><br><span class="hljs-number">133.</span> llvm-prefer-<span class="hljs-keyword">register</span>-over-<span class="hljs-type">unsigned</span><br><br><span class="hljs-comment">// Twine方法使用后面加.str()</span><br><span class="hljs-number">134.</span> llvm-twine-local<br><span class="hljs-comment">// before</span><br><span class="hljs-type">static</span> Twine Moo = <span class="hljs-built_in">Twine</span>(<span class="hljs-string">&quot;bark&quot;</span>) + <span class="hljs-string">&quot;bah&quot;</span>;<br><span class="hljs-comment">// after</span><br><span class="hljs-type">static</span> std::string Moo = (<span class="hljs-built_in">Twine</span>(<span class="hljs-string">&quot;bark&quot;</span>) + <span class="hljs-string">&quot;bah&quot;</span>).<span class="hljs-built_in">str</span>();<br><br><span class="hljs-comment">// 检查调用解析为__llvm_libc命名空间内的函数</span><br><span class="hljs-number">135.</span> llvmlibc-callee-<span class="hljs-keyword">namespace</span><br><br><span class="hljs-number">136.</span> llvmlibc-implementation-in-<span class="hljs-keyword">namespace</span><br><br><span class="hljs-comment">// 查找编译器未提供的系统 libc 头文件,如stdio.h</span><br><span class="hljs-number">137.</span> llvmlibc-restrict-system-libc-headers<br><br><span class="hljs-comment">// 在头文件中查找非 extern 非内联函数和变量定义</span><br><span class="hljs-number">138.</span> -misc-definitions-in-headers<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>; <span class="hljs-comment">//全局，不允许</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">e</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//允许</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 检查const的错误使用</span><br><span class="hljs-number">139.</span> misc-misplaced-<span class="hljs-type">const</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> *int_ptr;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> int_ptr ptr)</span> </span>&#123;<br>  *ptr = <span class="hljs-number">0</span>; <span class="hljs-comment">// 意外的修改了数值</span><br>  ptr = <span class="hljs-number">0</span>; <span class="hljs-comment">// 编译不通过</span><br>&#125;<br><br><span class="hljs-comment">// 检查new和delete</span><br><span class="hljs-number">140.</span> misc-<span class="hljs-keyword">new</span>-<span class="hljs-keyword">delete</span>-overloads<br><br><span class="hljs-comment">// 检查函数递归错误</span><br><span class="hljs-number">141.</span> misc-no-recursion<br><br><span class="hljs-comment">// 检查一些对象，不允许复制，比如FILE</span><br><span class="hljs-number">142.</span> misc-non-copyable-objects<br><br><span class="hljs-comment">// 规定类成员变量必须为private</span><br><span class="hljs-number">143.</span> -misc-non-<span class="hljs-keyword">private</span>-member-variables-in-classes <br><br><span class="hljs-comment">// 检查冗余表达式</span><br><span class="hljs-number">144.</span> misc-redundant-<span class="hljs-built_in">expression</span><br>(p-&gt;x == p-&gt;x);<br>(p-&gt;x &lt; p-&gt;x);<br><br><span class="hljs-comment">// 用static_assert()代替assert()</span><br><span class="hljs-number">145.</span> misc-<span class="hljs-type">static</span>-assert<br><br><span class="hljs-comment">// 查找违反“按值抛出，按引用捕捉”的规则</span><br><span class="hljs-number">146.</span> misc-<span class="hljs-keyword">throw</span>-by-value-<span class="hljs-keyword">catch</span>-by-reference<br><br><span class="hljs-comment">// 检查重载运算符的错误返回类型</span><br><span class="hljs-number">147.</span> misc-unconventional-assign-<span class="hljs-keyword">operator</span><br><br><span class="hljs-comment">// 将unique_ptr::reset(release())替换为std::move()</span><br><span class="hljs-number">148.</span> misc-uniqueptr-reset-release<br><br><span class="hljs-comment">// 查找未使用的命名空间别名声明</span><br><span class="hljs-number">149.</span> misc-unused-alias-decls<br><br><span class="hljs-comment">// 查找未使用的参数并报错（可能代码有误）</span><br><span class="hljs-number">150.</span> misc-unused-parameters<br><br><span class="hljs-comment">// 查找未使用的using声明</span><br><span class="hljs-number">151.</span> misc-unused-<span class="hljs-keyword">using</span>-decls<br><br><span class="hljs-comment">// 替换std::bind()的使用</span><br><span class="hljs-number">152.</span> modernize-avoid-bind<br><br><span class="hljs-comment">// 避免使用c语言的array</span><br><span class="hljs-number">153.</span> modernize-avoid-c-arrays<br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<span class="hljs-comment">//报错</span><br><br><span class="hljs-comment">// 嵌套命名空间的简化（可以简化时）</span><br><span class="hljs-number">154.</span> modernize-concat-nested-namespaces<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">namespace</span> n1 &#123;<br><span class="hljs-keyword">namespace</span> n2 &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">t</span><span class="hljs-params">()</span></span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">namespace</span> n1::n2 &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">t</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 检查c++中弃用的c头文件</span><br><span class="hljs-number">155.</span> modernize-deprecated-headers<br><br><span class="hljs-comment">// 检查弃用的类方法</span><br><span class="hljs-number">156.</span> modernize-deprecated-ios-base-aliases<br>弃用替代<br>std::ios_base::io_statestd::ios_base::iostate<br>std::ios_base::open_modestd::ios_base::openmode<br>std::ios_base::seek_dirstd::ios_base::seekdir<br>std::ios_base::streamoff <br>std::ios_base::streampos <br><br><span class="hljs-comment">// 避免有风险的循环，替换为c++11风格</span><br><span class="hljs-number">157.</span> modernize-loop-convert<br><br><span class="hljs-comment">// 对于share_ptr的一些更改</span><br><span class="hljs-number">158.</span> modernize-make-shared<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">auto</span> my_ptr = std::<span class="hljs-built_in">shared_ptr</span>&lt;MyPair&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyPair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>my_ptr.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyPair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">auto</span> my_ptr = std::<span class="hljs-built_in">make_shared</span>&lt;MyPair&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>my_ptr = std::<span class="hljs-built_in">make_shared</span>&lt;MyPair&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 对于unique_ptr的一些更改</span><br><span class="hljs-number">159.</span> modernize-make-unique<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">auto</span> my_ptr = std::<span class="hljs-built_in">unique_ptr</span>&lt;MyPair&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyPair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>my_ptr.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyPair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">auto</span> my_ptr = std::<span class="hljs-built_in">make_unique</span>&lt;MyPair&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>my_ptr = std::<span class="hljs-built_in">make_unique</span>&lt;MyPair&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-number">160.</span> modernize-pass-by-value<br><br><span class="hljs-comment">// 字符串初始化的风格检查</span><br><span class="hljs-number">161.</span> modernize-raw-string-literal<br><br><span class="hljs-comment">// 检查冗余的void</span><br><span class="hljs-number">162.</span> modernize-redundant-<span class="hljs-type">void</span>-<span class="hljs-function">arg</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 用unique_ptr替换auto_ptr</span></span><br><span class="hljs-function">163. modernize-replace-<span class="hljs-keyword">auto</span>-ptr</span><br><span class="hljs-function"></span><br><span class="hljs-function">164. modernize-replace-disallow-copy-<span class="hljs-keyword">and</span>-assign-macro</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 将std::random_shuffle替换为std::shuffle</span></span><br><span class="hljs-function">165. modernize-replace-random-shuffle</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 用花括号初始化器列表替换返回中对构造函数的显式调用</span></span><br><span class="hljs-function">166. modernize-<span class="hljs-keyword">return</span>-braced-init-list</span><br><span class="hljs-function"><span class="hljs-comment">// before</span></span><br><span class="hljs-function">Foo <span class="hljs-title">bar</span><span class="hljs-params">()</span> </span>&#123;<br>  Baz baz;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Foo</span>(baz);<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-function">Foo <span class="hljs-title">bar</span><span class="hljs-params">()</span> </span>&#123;<br>  Baz baz;<br>  <span class="hljs-keyword">return</span> &#123;baz&#125;;<br>&#125;<br><br><span class="hljs-comment">// 关于缩放的使用</span><br><span class="hljs-number">167.</span> modernize-shrink-to-fit<br><br><span class="hljs-comment">// 关于static_assert空字符串的检查</span><br><span class="hljs-number">168.</span> modernize-unary-<span class="hljs-type">static</span>-assert<br><br><span class="hljs-comment">// 检查auto的使用风格</span><br><span class="hljs-number">169.</span> modernize-use-<span class="hljs-keyword">auto</span><br><br><span class="hljs-comment">// 检查bool类型，用true和false表示</span><br><span class="hljs-number">170.</span> modernize-use-<span class="hljs-type">bool</span>-literals<br><br><span class="hljs-comment">// 构造函数初始化的设定值风格</span><br><span class="hljs-number">171.</span> modernize-use-<span class="hljs-keyword">default</span>-member-init<br><span class="hljs-comment">// before</span><br><span class="hljs-built_in">A</span>() : <span class="hljs-built_in">i</span>(<span class="hljs-number">5</span>), <span class="hljs-built_in">j</span>(<span class="hljs-number">10.0</span>)<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">double</span> j;<br><span class="hljs-comment">// after</span><br><span class="hljs-built_in">A</span>() &#123;&#125;<br><span class="hljs-type">int</span> i&#123;<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">double</span> j&#123;<span class="hljs-number">10.0</span>&#125;;<br><br><span class="hljs-comment">// 在std::vector、std::deque、std::list中插入的使用限制</span><br><span class="hljs-number">172.</span> -modernize-use-emplace<br><br><span class="hljs-comment">// 将特殊成员函数的默认主体替换为显式默认函数声明</span><br><span class="hljs-number">173.</span> modernize-use-equals-<span class="hljs-keyword">default</span><br><span class="hljs-comment">// before</span><br><span class="hljs-built_in">A</span>() &#123;&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-built_in">A</span>() = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-comment">// 将删除的特殊成员函数显式表示</span><br><span class="hljs-number">174.</span> modernize-use-equals-<span class="hljs-function"><span class="hljs-keyword">delete</span></span><br><span class="hljs-function"><span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-type">const</span> A&amp;)</span> </span>= <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-comment">// const成员函数的使用风格</span><br><span class="hljs-number">175.</span> -modernize-use-nodiscard<br><br><span class="hljs-comment">// 函数定义的throw替换为noexcept</span><br><span class="hljs-number">176.</span> modernize-use-<span class="hljs-keyword">noexcept</span><br><span class="hljs-comment">// before</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-title">throw</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// after</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;<br><br><span class="hljs-comment">// 将空指针NULL改为nullptr</span><br><span class="hljs-number">177.</span> -modernize-use-<span class="hljs-literal">nullptr</span><br><br><span class="hljs-comment">// 在重载虚函数中添加override声明</span><br><span class="hljs-number">178.</span> modernize-use-<span class="hljs-keyword">override</span><br><br><span class="hljs-comment">// 使用尾随返回类型</span><br><span class="hljs-number">179.</span> -modernize-use-trailing-<span class="hljs-keyword">return</span>-type<br><br><span class="hljs-number">180.</span> modernize-use-transparent-functors<br><span class="hljs-number">181.</span> modernize-use-uncaught-exceptions<br><br><span class="hljs-comment">// 将typedef转换为using</span><br><span class="hljs-number">182.</span> modernize-use-<span class="hljs-keyword">using</span><br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> variable;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">using</span> variable = <span class="hljs-type">int</span>;<br><br><span class="hljs-comment">// 关于消息传递接口的检查</span><br><span class="hljs-number">183.</span> mpi-buffer-deref<br><br><span class="hljs-comment">// 检查消息传递接口不匹配问题</span><br><span class="hljs-number">184.</span> mpi-type-mismatch<br><br><span class="hljs-comment">// objc相关</span><br><span class="hljs-number">185.</span> objc-avoid-nserror-init <br><span class="hljs-number">186.</span> objc-dealloc-in-category <br><span class="hljs-number">187.</span> objc-forbidden-subclassing <br><span class="hljs-number">188.</span> objc-missing-hash <br><span class="hljs-number">189.</span> objc-nsinvocation-argument-lifetime<br><span class="hljs-number">190.</span> objc-property-declaration<br><span class="hljs-number">191.</span> objc-super-self<br><br><span class="hljs-comment">// openmp相关</span><br><span class="hljs-number">192.</span> openmp-exception-escape <br><span class="hljs-number">193.</span> openmp-use-<span class="hljs-keyword">default</span>-none<br><br><span class="hljs-comment">// 优化find的效率</span><br><span class="hljs-number">194.</span> performance-faster-string-find<br><span class="hljs-comment">// before</span><br>str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-comment">// after</span><br>str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<br><br><span class="hljs-comment">// 不使用for循环里使用auto的警告</span><br><span class="hljs-number">195.</span> performance-<span class="hljs-keyword">for</span>-range-copy<br>  - key:             performance-<span class="hljs-keyword">for</span>-range-copy.WarnOnAllAutoCopies<br>    value:           <span class="hljs-string">&#x27;0&#x27;</span><br><br><span class="hljs-comment">// for循环中，变量的隐式表示（auto）代替显式表示</span><br><span class="hljs-number">196.</span> performance-implicit-conversion-in-loop<br><br><span class="hljs-comment">// 检查关联容器中的低效使用</span><br><span class="hljs-number">197.</span> performance-inefficient-algorithm<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), <span class="hljs-number">43</span>);<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">auto</span> it = s.<span class="hljs-built_in">find</span>(<span class="hljs-number">43</span>);<br><br><span class="hljs-comment">// 检查性能低效的字符串连接，字符串拼接改为append，而不是操作符+</span><br><span class="hljs-number">198.</span> performance-inefficient-string-concatenation<br><br><span class="hljs-comment">// 查找可能导致不必要的内存重新分配的低效vector操作</span><br><span class="hljs-number">199.</span> -performance-inefficient-vector-operation<br><br><span class="hljs-comment">// 关于std::move的一些警告</span><br><span class="hljs-number">200.</span> performance-move-<span class="hljs-type">const</span>-arg<br><br><span class="hljs-comment">// 标记移动构造函数初始化</span><br><span class="hljs-number">201.</span> performance-move-constructor-init<br><br><span class="hljs-number">202.</span> performance-no-automatic-move<br><br><span class="hljs-comment">// 限制整数到指针的转换</span><br><span class="hljs-number">203.</span> performance-no-<span class="hljs-type">int</span>-to-ptr<br><br><span class="hljs-comment">// 检查移动构造函数没有标记noexcept或者为false的情况</span><br><span class="hljs-number">204.</span> performance-<span class="hljs-keyword">noexcept</span>-move-constructor<br><br><span class="hljs-comment">// 检查外部可破坏析构函数的情况</span><br><span class="hljs-number">205.</span> performance-trivially-destructible<br><br><span class="hljs-comment">// 数学库，从c到c++的转换</span><br><span class="hljs-number">206.</span> performance-type-promotion-in-math-fn<br><br><span class="hljs-number">207.</span> performance-unnecessary-copy-initialization<br><br><span class="hljs-comment">// 使用参数的移动(std::move)，而不是复制</span><br><span class="hljs-number">208.</span> performance-unnecessary-value-param<br><br><span class="hljs-comment">// 检查以选择性地允许或禁止系统标头的可配置列表</span><br><span class="hljs-number">209.</span> portability-restrict-system-includes<br><br><span class="hljs-number">210.</span> portability-simd-intrinsics<br><br><span class="hljs-comment">// 检查函数声明是否具有顶级参数 const</span><br><span class="hljs-number">211.</span> -readability-avoid-<span class="hljs-type">const</span>-params-in-decls<br><br><span class="hljs-comment">// 在逻辑语句是否添加大括号</span><br><span class="hljs-number">212.</span> readability-braces-around-statements<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">if</span> (condition)<br>  statement;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">if</span> (condition) &#123;<br>  statement;<br>&#125;<br><br><span class="hljs-comment">// 常量返回值的限制</span><br><span class="hljs-number">213.</span> readability-<span class="hljs-type">const</span>-<span class="hljs-keyword">return</span>-type<br><br><span class="hljs-comment">// 检查对size()调用是否可以用empty()来代替</span><br><span class="hljs-number">214.</span> readability-container-size-empty<br><br><span class="hljs-comment">// 将不使用this的非静态成员函数转换为静态成员函数</span><br><span class="hljs-number">215.</span> readability-convert-member-functions-to-<span class="hljs-type">static</span><br><br><span class="hljs-comment">// 查找检查指针是否存在的语句</span><br><span class="hljs-number">216.</span> -readability-<span class="hljs-keyword">delete</span>-null-pointer<br><br><span class="hljs-comment">// 检查多余的else使用</span><br><span class="hljs-number">217.</span> readability-<span class="hljs-keyword">else</span>-after-<span class="hljs-keyword">return</span><br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">if</span> (Value == <span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  Local++;<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">if</span> (Value == <span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br>Local++;<br><br><span class="hljs-comment">// 检查功能认知复杂性指标</span><br><span class="hljs-number">218.</span> readability-function-cognitive-complexity<br><br><span class="hljs-comment">// 根据各种指标检查大型函数</span><br><span class="hljs-number">219.</span> readability-function-size<br><span class="hljs-comment">// 限制函数的控制语句数</span><br>- key:             readability-function-size.BranchThreshold<br>value:           <span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-comment">// 限制函数的行数</span><br>- key:             readability-function-size.LineThreshold<br>value:           <span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-comment">// 限制函数的参数数量</span><br>- key:             readability-function-size.ParameterThreshold<br>value:           <span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-comment">// 限制函数的语句数</span><br>- key:             readability-function-size.StatementThreshold<br>value:           <span class="hljs-string">&#x27;800&#x27;</span><br><br><span class="hljs-comment">// 标识符命名方式限制</span><br><span class="hljs-number">220.</span> readability-identifier-naming<br><br><span class="hljs-comment">// 检查bool与int之间的转换</span><br><span class="hljs-number">221.</span> readability-implicit-<span class="hljs-type">bool</span>-conversion<br><br><span class="hljs-comment">// 查找参数名称不一致的声明</span><br><span class="hljs-number">222.</span> readability-inconsistent-declaration-parameter-name<br><span class="hljs-comment">// in foo.hpp:</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span>;<br><span class="hljs-comment">// in foo.cpp:</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> d, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> f)</span></span>; <br><br><span class="hljs-comment">// 将连续的变量声明拆分成逐一声明</span><br><span class="hljs-number">223.</span> readability-isolate-declaration<br><span class="hljs-comment">// before</span><br><span class="hljs-type">int</span> * pointer = <span class="hljs-literal">nullptr</span>, value = <span class="hljs-number">42</span>, * <span class="hljs-type">const</span> const_ptr = &amp;value;<br><span class="hljs-comment">// after</span><br><span class="hljs-type">int</span> * pointer = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span> value = <span class="hljs-number">42</span>;<br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> const_ptr = &amp;value;<br><br><span class="hljs-comment">// magic numbers检查</span><br><span class="hljs-number">224.</span> readability-magic-numbers<br><br><span class="hljs-comment">// 检查可以被定义为const的非静态成员函数</span><br><span class="hljs-number">225.</span> readability-make-member-function-<span class="hljs-type">const</span><br><br><span class="hljs-comment">// 检查误导性缩进</span><br><span class="hljs-number">226.</span> readability-misleading-indentation<br><span class="hljs-comment">// Dangling else:</span><br><span class="hljs-keyword">if</span> (cond1)<br>  <span class="hljs-keyword">if</span> (cond2)<br>    <span class="hljs-built_in">foo1</span>();<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">foo2</span>();<br><br><span class="hljs-comment">// 检查出错的索引</span><br><span class="hljs-number">227.</span> readability-misplaced-array-<span class="hljs-function">index</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> *X, <span class="hljs-type">int</span> Y)</span> </span>&#123;<br>  Y[X] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 查找带有未命名参数的函数</span><br><span class="hljs-number">228.</span> readability-named-parameter<br><br><span class="hljs-comment">// 检查可以更改为指向常量类型的指针类型的函数参数</span><br><span class="hljs-number">229.</span> readability-non-<span class="hljs-type">const</span>-parameter<br><br><span class="hljs-comment">// 将指针限定添加到auto推导为指针的类型变量</span><br><span class="hljs-number">230.</span> readability-qualified-<span class="hljs-keyword">auto</span><br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> Data : MutatablePtrContainer) &#123;<br>  <span class="hljs-built_in">change</span>(*Data);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> Data : ConstantPtrContainer) &#123;<br>  <span class="hljs-built_in">observe</span>(*Data);<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> *Data : MutatablePtrContainer) &#123;<br>  <span class="hljs-built_in">change</span>(*Data);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> *Data : ConstantPtrContainer) &#123;<br>  <span class="hljs-built_in">observe</span>(*Data);<br>&#125;<br><br><span class="hljs-comment">// 删除冗余的访问类型说明</span><br><span class="hljs-number">231.</span> readability-redundant-access-specifiers<br><br><span class="hljs-comment">// 删除无用的return和continue</span><br><span class="hljs-number">232.</span> readability-redundant-control-flow<br><br><span class="hljs-comment">// 删除冗余的变量和函数声明</span><br><span class="hljs-number">233.</span> readability-redundant-declaration<br><br><span class="hljs-comment">// 删除多余的指针冗余</span><br><span class="hljs-number">234.</span> readability-redundant-function-ptr-dereference<br><span class="hljs-comment">// before</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-built_in">int</span> (*p)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) = &amp;f;<br><span class="hljs-type">int</span> i = (**p)(<span class="hljs-number">10</span>, <span class="hljs-number">50</span>);<br><span class="hljs-comment">// after</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-built_in">int</span> (*p)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) = &amp;f;<br><span class="hljs-type">int</span> i = (*p)(<span class="hljs-number">10</span>, <span class="hljs-number">50</span>);<br><br><span class="hljs-comment">// 查找多余的成员初始化</span><br><span class="hljs-number">235.</span> readability-redundant-member-init<br><br><span class="hljs-comment">// 查找潜在的冗余预处理器指令</span><br><span class="hljs-number">236.</span> readability-redundant-preprocessor<br><br><span class="hljs-comment">// 删除对智能指针.get()方法的冗余调用</span><br><span class="hljs-number">237.</span> readability-redundant-smartptr-get<br><br><span class="hljs-comment">// 检查不必要的调用：std::string::c_str()和std::string::data()</span><br><span class="hljs-number">238.</span> readability-redundant-string-cstr<br><br><span class="hljs-comment">// 查找不必要的字符串初始化</span><br><span class="hljs-number">239.</span> readability-redundant-string-init<br><br><span class="hljs-comment">// 简化对bool类型的使用</span><br><span class="hljs-number">240.</span> readability-simplify-boolean-expr<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">if</span> (b == <span class="hljs-literal">true</span>)<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">if</span> (b)<br><br><span class="hljs-comment">// 简化下标表达式</span><br><span class="hljs-number">241.</span> readability-simplify-subscript-expr<br><span class="hljs-comment">// before</span><br><span class="hljs-type">char</span> c = s.<span class="hljs-built_in">data</span>()[i];  <br><span class="hljs-comment">// after</span><br><span class="hljs-type">char</span> c = s[i];<br><br><span class="hljs-comment">// 优化类静态成员的访问方式</span><br><span class="hljs-number">242.</span> readability-<span class="hljs-type">static</span>-accessed-through-instance<br><span class="hljs-comment">// before</span><br>C *c1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">C</span>();<br>c1-&gt;<span class="hljs-built_in">foo</span>();<br>c1-&gt;x;<br><span class="hljs-comment">// after</span><br>C *c1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">C</span>();<br>C::<span class="hljs-built_in">foo</span>();<br>C::x;<br><br><span class="hljs-comment">// 检查匿名命名空间中的静态成员定义</span><br><span class="hljs-number">243.</span> readability-<span class="hljs-type">static</span>-definition-in-anonymous-<span class="hljs-keyword">namespace</span><br><br><span class="hljs-comment">// 优化字符串比较的使用，尽量使用==或者!=</span><br><span class="hljs-number">244.</span> readability-string-<span class="hljs-function">compare</span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(str1.compare(str2))</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(!str1.compare(str2))</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 传参缩写检查</span></span><br><span class="hljs-function">245. readability-suspicious-call-argument</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 替换&lt;unique_ptr&gt;.release()为&lt;unique_ptr&gt; = nullptr</span></span><br><span class="hljs-function">246. readability-uniqueptr-<span class="hljs-keyword">delete</span>-release</span><br><span class="hljs-function"><span class="hljs-comment">// before</span></span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; P</span>;<br><span class="hljs-keyword">delete</span> P.<span class="hljs-built_in">release</span>();<br><span class="hljs-comment">// after</span><br>std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; P;<br>P = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">// 要求整数后缀为大写字符</span><br><span class="hljs-number">247.</span> readability-uppercase-literal-suffix<br><span class="hljs-comment">// before</span><br><span class="hljs-keyword">auto</span> x = <span class="hljs-number">1u</span>;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">auto</span> x = <span class="hljs-number">1U</span>;<br><br><span class="hljs-number">248.</span> readability-use-anyofallof<br><span class="hljs-number">249.</span> zircon-temporary-objects<br></code></pre></td></tr></table></figure><h4 id="3-2-2-导出Clion-2022-1"><a href="#3-2-2-导出Clion-2022-1" class="headerlink" title="3.2.2 导出Clion 2022.1"></a>3.2.2 导出Clion 2022.1</h4><p><code>.clangd</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># https://youtrack.jetbrains.com/articles/CPP-A-90276519/Clang-Tidy-in-CLion-20213-default-configuration</span><br><span class="hljs-attr">CompileFlags:</span>                             <br>    <span class="hljs-attr">Add:</span> <br>      [<br>        <span class="hljs-string">-std=c++20</span>,<br>        <span class="hljs-string">-Wno-documentation</span>,<br>        <span class="hljs-string">-Wno-missing-prototypes</span>,<br>        <span class="hljs-string">-Wno-unused-variable</span>,<br>        <span class="hljs-string">-Wno-infinite-recursion</span>,<br>        <span class="hljs-string">-Werror=implicit-function-declaration</span>,<br>        <span class="hljs-string">-Wshadow</span>,<br>        <span class="hljs-string">-Wno-shadow-field-in-constructor-modified</span>,<br>        <span class="hljs-string">-Wno-shadow-ivar</span>,<br>        <span class="hljs-string">-Wuninitialized</span>,<br>        <span class="hljs-string">-Wunused-label</span>,<br>        <span class="hljs-string">-Wunused-lambda-capture</span><br>      ]<br><span class="hljs-attr">Diagnostics:</span><br>  <span class="hljs-attr">ClangTidy:</span><br>    <span class="hljs-attr">Add:</span><br>    [<br>        <span class="hljs-string">bugprone-argument-comment</span>,<br>        <span class="hljs-string">bugprone-assert-side-effect</span>,<br>        <span class="hljs-string">bugprone-bad-signal-to-kill-thread</span>,<br>        <span class="hljs-string">bugprone-branch-clone</span>,<br>        <span class="hljs-string">bugprone-copy-constructor-init</span>,<br>        <span class="hljs-string">bugprone-dangling-handle</span>,<br>        <span class="hljs-string">bugprone-dynamic-static-initializers</span>,<br>        <span class="hljs-string">bugprone-fold-init-type</span>,<br>        <span class="hljs-string">bugprone-forward-declaration-namespace</span>,<br>        <span class="hljs-string">bugprone-forwarding-reference-overload</span>,<br>        <span class="hljs-string">bugprone-incorrect-roundings</span>,<br>        <span class="hljs-string">bugprone-inaccurate-erase</span>,<br>        <span class="hljs-string">bugprone-integer-division</span>,<br>        <span class="hljs-string">bugprone-lambda-function-name</span>,<br>        <span class="hljs-string">bugprone-macro-parentheses</span>,<br>        <span class="hljs-string">bugprone-macro-repeated-side-effects</span>,<br>        <span class="hljs-string">bugprone-misplaced-operator-in-strlen-in-alloc</span>,<br>        <span class="hljs-string">bugprone-misplaced-pointer-arithmetic-in-alloc</span>,<br>        <span class="hljs-string">bugprone-misplaced-widening-cast</span>,<br>        <span class="hljs-string">bugprone-move-forwarding-reference</span>,<br>        <span class="hljs-string">bugprone-multiple-statement-macro</span>,<br>        <span class="hljs-string">bugprone-narrowing-conversions</span>,<br>        <span class="hljs-string">bugprone-no-escape</span>,<br>        <span class="hljs-string">bugprone-not-null-terminated-result</span>,<br>        <span class="hljs-string">bugprone-parent-virtual-call</span>,<br>        <span class="hljs-string">bugprone-posix-return</span>,<br>        <span class="hljs-string">bugprone-reserved-identifier</span>,<br>        <span class="hljs-string">bugprone-sizeof-container</span>,<br>        <span class="hljs-string">bugprone-sizeof-expression</span>,<br>        <span class="hljs-string">bugprone-string-constructor</span>,<br>        <span class="hljs-string">bugprone-string-integer-assignment</span>,<br>        <span class="hljs-string">bugprone-string-literal-with-embedded-nul</span>,<br>        <span class="hljs-string">bugprone-suspicious-enum-usage</span>,<br>        <span class="hljs-string">bugprone-suspicious-include</span>,<br>        <span class="hljs-string">bugprone-suspicious-memory-comparison</span>,<br>        <span class="hljs-string">bugprone-suspicious-memset-usage</span>,<br>        <span class="hljs-string">bugprone-suspicious-missing-comma</span>,<br>        <span class="hljs-string">bugprone-suspicious-semicolon</span>,<br>        <span class="hljs-string">bugprone-suspicious-string-compare</span>,<br>        <span class="hljs-string">bugprone-swapped-arguments</span>,<br>        <span class="hljs-string">bugprone-terminating-continue</span>,<br>        <span class="hljs-string">bugprone-throw-keyword-missing</span>,<br>        <span class="hljs-string">bugprone-too-small-loop-variable</span>,<br>        <span class="hljs-string">bugprone-undefined-memory-manipulation</span>,<br>        <span class="hljs-string">bugprone-undelegated-constructor</span>,<br>        <span class="hljs-string">bugprone-unhandled-self-assignment</span>,<br>        <span class="hljs-string">bugprone-unused-raii</span>,<br>        <span class="hljs-string">bugprone-unused-return-value</span>,<br>        <span class="hljs-string">bugprone-use-after-move</span>,<br>        <span class="hljs-string">bugprone-virtual-near-miss</span>,<br>        <span class="hljs-string">boost-use-to-string</span>,<br>        <span class="hljs-string">cert-dcl03-c</span>,<br>        <span class="hljs-string">cert-dcl21-cpp</span>,<br>        <span class="hljs-string">cert-dcl58-cpp</span>,<br>        <span class="hljs-string">cert-err34-c</span>,<br>        <span class="hljs-string">cert-err52-cpp</span>,<br>        <span class="hljs-string">cert-err58-cpp</span>,<br>        <span class="hljs-string">cert-err60-cpp</span>,<br>        <span class="hljs-string">cert-flp30-c</span>,<br>        <span class="hljs-string">cert-msc50-cpp</span>,<br>        <span class="hljs-string">cert-msc51-cpp</span>,<br>        <span class="hljs-string">cert-oop54-cpp</span>,<br>        <span class="hljs-string">cert-str34-c</span>,<br>        <span class="hljs-string">cppcoreguidelines-interfaces-global-init</span>,<br>        <span class="hljs-string">cppcoreguidelines-narrowing-conversions</span>,<br>        <span class="hljs-string">cppcoreguidelines-pro-type-static-cast-downcast</span>,<br>        <span class="hljs-string">cppcoreguidelines-slicing</span>,<br>        <span class="hljs-string">google-default-arguments</span>,<br>        <span class="hljs-string">google-explicit-constructor</span>,<br>        <span class="hljs-string">google-runtime-operator</span>,<br>        <span class="hljs-string">hicpp-exception-baseclass</span>,<br>        <span class="hljs-string">hicpp-multiway-paths-covered</span>,<br>        <span class="hljs-string">hicpp-signed-bitwise</span>,<br>        <span class="hljs-string">misc-misplaced-const</span>,<br>        <span class="hljs-string">misc-new-delete-overloads</span>,<br>        <span class="hljs-string">misc-no-recursion</span>,<br>        <span class="hljs-string">misc-non-copyable-objects</span>,<br>        <span class="hljs-string">misc-redundant-expression</span>,<br>        <span class="hljs-string">misc-static-assert</span>,<br>        <span class="hljs-string">misc-throw-by-value-catch-by-reference</span>,<br>        <span class="hljs-string">misc-unconventional-assign-operator</span>,<br>        <span class="hljs-string">misc-uniqueptr-reset-release</span>,<br>        <span class="hljs-string">modernize-avoid-bind</span>,<br>        <span class="hljs-string">modernize-concat-nested-namespaces</span>,<br>        <span class="hljs-string">modernize-deprecated-headers</span>,<br>        <span class="hljs-string">modernize-deprecated-ios-base-aliases</span>,<br>        <span class="hljs-string">modernize-loop-convert</span>,<br>        <span class="hljs-string">modernize-make-shared</span>,<br>        <span class="hljs-string">modernize-make-unique</span>,<br>        <span class="hljs-string">modernize-pass-by-value</span>,<br>        <span class="hljs-string">modernize-raw-string-literal</span>,<br>        <span class="hljs-string">modernize-redundant-void-arg</span>,<br>        <span class="hljs-string">modernize-replace-auto-ptr</span>,<br>        <span class="hljs-string">modernize-replace-disallow-copy-and-assign-macro</span>,<br>        <span class="hljs-string">modernize-replace-random-shuffle</span>,<br>        <span class="hljs-string">modernize-return-braced-init-list</span>,<br>        <span class="hljs-string">modernize-shrink-to-fit</span>,<br>        <span class="hljs-string">modernize-unary-static-assert</span>,<br>        <span class="hljs-string">modernize-use-auto</span>,<br>        <span class="hljs-string">modernize-use-bool-literals</span>,<br>        <span class="hljs-string">modernize-use-emplace</span>,<br>        <span class="hljs-string">modernize-use-equals-default</span>,<br>        <span class="hljs-string">modernize-use-equals-delete</span>,<br>        <span class="hljs-string">modernize-use-nodiscard</span>,<br>        <span class="hljs-string">modernize-use-noexcept</span>,<br>        <span class="hljs-string">modernize-use-nullptr</span>,<br>        <span class="hljs-string">modernize-use-override</span>,<br>        <span class="hljs-string">modernize-use-transparent-functors</span>,<br>        <span class="hljs-string">modernize-use-uncaught-exceptions</span>,<br>        <span class="hljs-string">openmp-use-default-none</span>,<br>        <span class="hljs-string">performance-faster-string-find</span>,<br>        <span class="hljs-string">performance-for-range-copy</span>,<br>        <span class="hljs-string">performance-implicit-conversion-in-loop</span>,<br>        <span class="hljs-string">performance-inefficient-algorithm</span>,<br>        <span class="hljs-string">performance-inefficient-string-concatenation</span>,<br>        <span class="hljs-string">performance-inefficient-vector-operation</span>,<br>        <span class="hljs-string">performance-move-const-arg</span>,<br>        <span class="hljs-string">performance-move-constructor-init</span>,<br>        <span class="hljs-string">performance-no-automatic-move</span>,<br>        <span class="hljs-string">performance-noexcept-move-constructor</span>,<br>        <span class="hljs-string">performance-trivially-destructible</span>,<br>        <span class="hljs-string">performance-type-promotion-in-math-fn</span>,<br>        <span class="hljs-string">performance-unnecessary-copy-initialization</span>,<br>        <span class="hljs-string">performance-unnecessary-value-param</span>,<br>        <span class="hljs-string">portability-simd-intrinsics</span>,<br>        <span class="hljs-string">readability-avoid-const-params-in-decls</span>,<br>        <span class="hljs-string">readability-const-return-type</span>,<br>        <span class="hljs-string">readability-container-size-empty</span>,<br>        <span class="hljs-string">readability-convert-member-functions-to-static</span>,<br>        <span class="hljs-string">readability-delete-null-pointer</span>,<br>        <span class="hljs-string">readability-inconsistent-declaration-parameter-name</span>,<br>        <span class="hljs-string">readability-make-member-function-const</span>,<br>        <span class="hljs-string">readability-misleading-indentation</span>,<br>        <span class="hljs-string">readability-misplaced-array-index</span>,<br>        <span class="hljs-string">readability-non-const-parameter</span>,<br>        <span class="hljs-string">readability-redundant-control-flow</span>,<br>        <span class="hljs-string">readability-redundant-declaration</span>,<br>        <span class="hljs-string">readability-redundant-function-ptr-dereference</span>,<br>        <span class="hljs-string">readability-redundant-smartptr-get</span>,<br>        <span class="hljs-string">readability-redundant-string-cstr</span>,<br>        <span class="hljs-string">readability-redundant-string-init</span>,<br>        <span class="hljs-string">readability-simplify-subscript-expr</span>,<br>        <span class="hljs-string">readability-static-accessed-through-instance</span>,<br>        <span class="hljs-string">readability-static-definition-in-anonymous-namespace</span>,<br>        <span class="hljs-string">readability-string-compare</span>,<br>        <span class="hljs-string">readability-uniqueptr-delete-release</span>,<br>      <span class="hljs-string">readability-use-anyofallof</span><br>    ]<br>    <span class="hljs-attr">Remove:</span><br>    [<br><br>    ]<br><br><br></code></pre></td></tr></table></figure><h3 id="3-3-clang-format"><a href="#3-3-clang-format" class="headerlink" title="3.3 .clang-format"></a>3.3 .clang-format</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto</span><br><span class="hljs-attr">Language:</span> <span class="hljs-string">Cpp</span><br><span class="hljs-comment"># BasedOnStyle: LLVM</span><br><br><span class="hljs-comment"># 访问说明符(public、private等)的偏移</span><br><span class="hljs-attr">AccessModifierOffset:</span> <span class="hljs-number">-4</span><br><br><span class="hljs-comment"># 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)</span><br><span class="hljs-attr">AlignAfterOpenBracket:</span> <span class="hljs-string">Align</span><br><br><span class="hljs-comment"># 连续赋值时，对齐所有等号</span><br><span class="hljs-attr">AlignConsecutiveAssignments:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 连续声明时，对齐所有声明的变量名</span><br><span class="hljs-attr">AlignConsecutiveDeclarations:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 右对齐逃脱换行(使用反斜杠换行)的反斜杠</span><br><span class="hljs-attr">AlignEscapedNewlines:</span> <span class="hljs-string">Right</span><br><br><span class="hljs-comment"># 水平对齐二元和三元表达式的操作数</span><br><span class="hljs-attr">AlignOperands:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 对齐连续的尾随的注释</span><br><span class="hljs-attr">AlignTrailingComments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 不允许函数声明的所有参数在放在下一行</span><br><span class="hljs-attr">AllowAllParametersOfDeclarationOnNextLine:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 不允许短的块放在同一行</span><br><span class="hljs-attr">AllowShortBlocksOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许短的case标签放在同一行</span><br><span class="hljs-attr">AllowShortCaseLabelsOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All</span><br><span class="hljs-attr">AllowShortFunctionsOnASingleLine:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 允许短的if语句保持在同一行</span><br><span class="hljs-attr">AllowShortIfStatementsOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许短的循环保持在同一行</span><br><span class="hljs-attr">AllowShortLoopsOnASingleLine:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), </span><br><span class="hljs-comment"># AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)</span><br><span class="hljs-attr">AlwaysBreakAfterReturnType:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 总是在多行string字面量前换行</span><br><span class="hljs-attr">AlwaysBreakBeforeMultilineStrings:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 总是在template声明后换行</span><br><span class="hljs-attr">AlwaysBreakTemplateDeclarations:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># false表示函数实参要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">BinPackArguments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># false表示所有形参要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">BinPackParameters:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效</span><br><span class="hljs-attr">BraceWrapping:</span><br>  <span class="hljs-comment"># class定义后面</span><br>  <span class="hljs-attr">AfterClass:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 控制语句后面</span><br>  <span class="hljs-attr">AfterControlStatement:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># enum定义后面</span><br>  <span class="hljs-attr">AfterEnum:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 函数定义后面</span><br>  <span class="hljs-attr">AfterFunction:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 命名空间定义后面</span><br>  <span class="hljs-attr">AfterNamespace:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># struct定义后面</span><br>  <span class="hljs-attr">AfterStruct:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># union定义后面</span><br>  <span class="hljs-attr">AfterUnion:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># extern之后</span><br>  <span class="hljs-attr">AfterExternBlock:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># catch之前</span><br>  <span class="hljs-attr">BeforeCatch:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># else之前</span><br>  <span class="hljs-attr">BeforeElse:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 缩进大括号</span><br>  <span class="hljs-attr">IndentBraces:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分离空函数</span><br>  <span class="hljs-attr">SplitEmptyFunction:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分离空语句</span><br>  <span class="hljs-attr">SplitEmptyRecord:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 分离空命名空间</span><br>  <span class="hljs-attr">SplitEmptyNamespace:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)</span><br><span class="hljs-attr">BreakBeforeBinaryOperators:</span> <span class="hljs-string">NonAssignment</span><br><br><span class="hljs-comment"># 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似), </span><br><span class="hljs-comment">#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似), </span><br><span class="hljs-comment">#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom</span><br><span class="hljs-comment">#   注：这里认为语句块也属于函数</span><br><span class="hljs-attr">BreakBeforeBraces:</span> <span class="hljs-string">Custom</span><br><br><span class="hljs-comment"># 在三元运算符前换行</span><br><span class="hljs-attr">BreakBeforeTernaryOperators:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在构造函数的初始化列表的冒号后换行</span><br><span class="hljs-attr">BreakConstructorInitializers:</span> <span class="hljs-string">AfterColon</span><br><br><span class="hljs-comment">#BreakInheritanceList: AfterColon</span><br><br><span class="hljs-attr">BreakStringLiterals:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 每行字符的限制，0表示没有限制</span><br><span class="hljs-attr">ColumnLimit:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">CompactNamespaces:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 构造函数的初始化列表要么都在同一行，要么都各自一行</span><br><span class="hljs-attr">ConstructorInitializerAllOnOneLineOrOnePerLine:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 构造函数的初始化列表的缩进宽度</span><br><span class="hljs-attr">ConstructorInitializerIndentWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 延续的行的缩进宽度</span><br><span class="hljs-attr">ContinuationIndentWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 去除C++11的列表初始化的大括号&#123;后和&#125;前的空格</span><br><span class="hljs-attr">Cpp11BracedListStyle:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 继承最常用的指针和引用的对齐方式</span><br><span class="hljs-attr">DerivePointerAlignment:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 固定命名空间注释</span><br><span class="hljs-attr">FixNamespaceComments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 缩进case标签</span><br><span class="hljs-attr">IndentCaseLabels:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">IndentPPDirectives:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 缩进宽度</span><br><span class="hljs-attr">IndentWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 函数返回类型换行时，缩进函数声明或函数定义的函数名</span><br><span class="hljs-attr">IndentWrappedFunctionNames:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 保留在块开始处的空行</span><br><span class="hljs-attr">KeepEmptyLinesAtTheStartOfBlocks:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 连续空行的最大数量</span><br><span class="hljs-attr">MaxEmptyLinesToKeep:</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All</span><br><span class="hljs-attr">NamespaceIndentation:</span> <span class="hljs-string">None</span><br><br><span class="hljs-comment"># 指针和引用的对齐: Left, Right, Middle</span><br><span class="hljs-attr">PointerAlignment:</span> <span class="hljs-string">Right</span><br><br><span class="hljs-comment"># 允许重新排版注释</span><br><span class="hljs-attr">ReflowComments:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 允许排序#include</span><br><span class="hljs-attr">SortIncludes:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 允许排序 using 声明</span><br><span class="hljs-attr">SortUsingDeclarations:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在C风格类型转换后添加空格</span><br><span class="hljs-attr">SpaceAfterCStyleCast:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在Template 关键字后面添加空格</span><br><span class="hljs-attr">SpaceAfterTemplateKeyword:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在赋值运算符之前添加空格</span><br><span class="hljs-attr">SpaceBeforeAssignmentOperators:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># SpaceBeforeCpp11BracedList: true</span><br><br><span class="hljs-comment"># SpaceBeforeCtorInitializerColon: true</span><br><br><span class="hljs-comment"># SpaceBeforeInheritanceColon: true</span><br><br><span class="hljs-comment"># 开圆括号之前添加一个空格: Never, ControlStatements, Always</span><br><span class="hljs-attr">SpaceBeforeParens:</span> <span class="hljs-string">ControlStatements</span><br><br><span class="hljs-comment"># SpaceBeforeRangeBasedForLoopColon: true</span><br><br><span class="hljs-comment"># 在空的圆括号中添加空格</span><br><span class="hljs-attr">SpaceInEmptyParentheses:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在尾随的评论前添加的空格数(只适用于//)</span><br><span class="hljs-attr">SpacesBeforeTrailingComments:</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 在尖括号的&lt;后和&gt;前添加空格</span><br><span class="hljs-attr">SpacesInAngles:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在C风格类型转换的括号中添加空格</span><br><span class="hljs-attr">SpacesInCStyleCastParentheses:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格</span><br><span class="hljs-attr">SpacesInContainerLiterals:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在圆括号的(后和)前添加空格</span><br><span class="hljs-attr">SpacesInParentheses:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响</span><br><span class="hljs-attr">SpacesInSquareBrackets:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 标准: Cpp03, Cpp11, Auto</span><br><span class="hljs-attr">Standard:</span> <span class="hljs-string">Auto</span><br><br><span class="hljs-comment"># tab宽度</span><br><span class="hljs-attr">TabWidth:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always</span><br><span class="hljs-attr">UseTab:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="4-Windows上配置"><a href="#4-Windows上配置" class="headerlink" title="4. Windows上配置"></a>4. Windows上配置</h2><h3 id="4-1-工具链安装"><a href="#4-1-工具链安装" class="headerlink" title="4.1 工具链安装"></a>4.1 工具链安装</h3><p>不知道大家有没有注意过自己用的工具链版本</p><p>较为知名的几个项目:</p><ul><li>MinGW-w64项目多年不更新，gcc版本停留在8.1,与linux下ubuntu20.04 LTS 9.0 ,Arch 11.2差的很远；</li><li>tdm-gcc在停更了好多年之后，更新了10.0版本</li></ul><p>推荐以下两种方式</p><ul><li><p><a href="https://winlibs.com/">Winlib</a> 主要提供GCC 和 LLVM 在windows下的 使用 基本上上游更新，作者就会编译发布</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203301905350.png" alt="image-20220330190524242" style="zoom:67%;" /><p>因为是LLVM官方在windows上似乎只提供了MSVC版本的，所以可能存在问题，我目前使用的版本lldb就存在python依赖问题</p></li><li><p><a href="https://www.msys2.org/">MYSY2</a> 模拟Linux环境，使用Pacman 作为包管理器，作为一个曾经在物理机上安装Arch Linux 的人，Pacman 的强大让我念念不忘，可惜的是Linux下没有好用的QQ,微信。Pacman 中有最新的软件包和几乎永远不需要担心依赖和编译问题，在配置环境中带来巨大痛苦的OpenGL,OpenCV,Eigen，甚至是hadoop的安装只需要一条命令，已经有人为你做好了一切，包管理器让更新变得十分容易。</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205081312305.png" alt="image-20220508131232171" style="zoom:67%;" /></li></ul><p>使用msys2安装工具链的时候，<code>因为clang 和 mingw-w64是两套完全不同的工具链，分别在mingw64，clang64目录下，而且第三方包并不共享，因此推荐安装mingw-w64版的clang,llvm</code></p><p>例如使用tdmgcc64（一个mingw-w64的windows发行版） 编译的opencv在使用clang64文件夹下的clang++是无法通过编译的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mingw-w64工具链</span><br>pacman -S --needed base-devel mingw-w64-x86_64-toolchain<br><span class="hljs-comment"># 包含clang,clang++等工具</span><br>mingw-w64-x86_64-clang<br><span class="hljs-comment"># clangd clang-tidy等工具</span><br>mingw-w64-x86_64-clang-tools-extra<br><span class="hljs-comment"># llvm相关</span><br>mingw-w64-x86_64-llvm<br></code></pre></td></tr></table></figure><p>安装后发现clang,clang++,clangd都在<code>./mingw64/bin</code>目录下,<code>./clang64</code>下都是空目录</p><p>记得添加环境变量</p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202205081323254.png" alt="image-20220508131557192" style="zoom:67%;" /><h3 id="4-2-json配置"><a href="#4-2-json配置" class="headerlink" title="4.2 json配置"></a>4.2 json配置</h3><p>因为上述安装的包都是为了mingw-w64工具链而服务，所以我们可以使用clang++编译，gdb调试；正常安装clang,mingw-w64则不能如此。</p><p>同时还有意外惊喜<span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&amp;#x1f604;</span>，就是可以将cpp文件命名为中文，只用g++,gdb不能正常打断点调试，而用clang++是可以的。</p><p>以下是<code>使用c/c++ 插件</code>的配置，分别表示使用g++编译，和clang++编译。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\msys\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-Wall&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;presentation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;echo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;panel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shared&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;reveal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;focus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang++ build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\msys\\mingw64\\bin\\clang++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-Wall&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\bin\\leetcode.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;presentation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;echo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;panel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shared&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;reveal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;focus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gcc debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\msys\\mingw64\\bin\\gdb.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++ build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\bin\\leetcode.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\FengisZZZ\\ServerTools\\msys\\mingw64\\bin\\gdb.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang++ build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>未完 待续</code></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p><code>参考链接:</code></p><ul><li>Bilibili</li></ul><p><a href="https://www.bilibili.com/video/BV1sW411v7VZ?p=1"> VS Code + Clangd + CMake 搭建 C&#x2F;C++开发环境</a></p><ul><li>CSDN:</li></ul><p><a href="https://blog.csdn.net/tyKuGengty/article/details/120119820">VSCode 配置 C&#x2F;C++：VSCode + Clang + Clangd + LLDB + CMake + Git</a></p><p><a href="https://blog.csdn.net/weixin_43862847/article/details/119274382">vscode + clangd 开发 c&#x2F;c++</a></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>环境配置</tag>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算作业2</title>
    <link href="/2022/03/19/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A2/"/>
    <url>/2022/03/19/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A2/</url>
    
    <content type="html"><![CDATA[<h2 id="列举威胁作用者有哪些并简要说明">1.列举威胁作用者有哪些，并简要说明</h2><p>威胁作用者是引发威胁的实体，因为与它能够实施攻击。云安全威胁可能来自内部也可以来自外部，可能来自于软件程序。相对于漏洞、威胁和风险以及安全策略和安全机制建立起来的保护措施而言，威胁作用者所承担的角色，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261332978.png" alt="202203191834094" style="zoom:50%;" /></p><ul><li><p><strong>匿名攻击者</strong>匿名攻击者是云中没有权限、不被信任的云服务用户，它通常是一个外部软件程序，通过公网发动网络攻击。当匿名攻击者对安全策略和防护所致有限时，这会抑制它们形成有效攻击的能力。因此，匿名攻击者往往诉诸绕过账号或窃取用户证书的手段，同时使用能够确保匿名性或需要大量资源才能被检举的方法。</p></li><li><p><strong>恶意服务作用者</strong>恶意服务作用者能截取并转发云内的网络流量。它通常是带有被损害的或恶意逻辑的服务代理或伪装成服务代理的程序，也有可能是能够远程截取并破坏消息内容的外部程序。</p></li><li><p><strong>授信的攻击者</strong>授信的攻击者与同意云环境中的云用户共享IT资源，试图利用合法的证书来把云提供者以及它们共享IT资源的云租户作为攻击目标。不同匿名攻击者（它们是非授权的），授信的攻击者通常滥用合法的证书或通过挪用敏感和保密的信息，在云的信任边界内部发动攻击。</p></li><li><p><strong>恶意的内部人员</strong>恶意的内部人员是人为的威胁作用者，它们的行为代表云提供者或者与之有关。它们通常是现任或前任雇员，或是能够访问云提供者资源范围的第三方。这种类型的威胁作用者会带来极大的破坏可能性，因为恶意的内部人员可能拥有访问云用户IT资源的管理特权。</p></li></ul><h2 id="列举云安全威胁有哪些并简要说明">2.列举云安全威胁有哪些，并简要说明</h2><p>云安全威胁可能来自内部也可以来自外部，可能来自于人也可能来自于软件程序。</p><ul><li><p><strong>流量窃听</strong></p><p>流量窃听是指当数据在传输到云中或在云内部传输时（通常是从云用户到云提供者）被恶意的服务作用者被动地截获，用于非法的信息收集之目的，这种攻击的目的就是直接破坏数据的保密性，可能也破坏了云用户和云提供者之间关系的保密性。由于这种攻击被动的本质，这种攻击更容易长时间进行而不被发现。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261333111.png"alt="202203191837611" /><figcaption aria-hidden="true">202203191837611</figcaption></figure></li><li><p><strong>恶意媒介</strong></p><p>恶意媒介威胁是指消息被恶意服务作用者截获并且被篡改，因此可能会被破坏消息的保密性和完整性。它还有可能在把消息转发到目的地之前插入有害的数据。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261333056.png"alt="202203191838726" /><figcaption aria-hidden="true">202203191838726</figcaption></figure></li><li><p><strong>拒绝服务</strong></p><p>拒绝服务（Dos）攻击的目标是使IT资源过载至无法正确运行。这种形式的攻击通过是以以下方式之一发起的：</p><ul><li><p>云服务上的负载由于伪造的消息或重复的通信请求不正常地增加。</p></li><li><p>网络流量过载，降低了响应性，性能下降。</p></li><li><p>发出多个云服务请求，每个请求都设计成消耗过量的内存和处理资源。</p></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261334487.png"alt="202203191840953" /><figcaption aria-hidden="true">202203191840953</figcaption></figure></li><li><p><strong>授权不足</strong></p><p>授权不足攻击是指错误地授予攻击者访问权限或是授权太宽泛，导致攻击者能够访问到本应该受到保护的IT资源。通常结果就是攻击者获得了对某些IT资源的直接访问的权利，这些资源实现的时候是假设只能是授信的用户程序才能访问的。这种攻击的一种变种称为弱认证，如果用弱密码或共享来保持IT资源就可能导致这种攻击</p></li><li><p><strong>虚拟化攻击</strong></p><p>虚拟化攻击利用的是虚拟化环境中的漏洞，获得了对底层物理硬件未被授权的访问</p></li><li><p><strong>信任边界重叠</strong></p><p>重叠的信任边界潜藏了一种威胁，攻击者可以利用多个云用户共享的、基于云的IT资源</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题优化</title>
    <link href="/2022/03/17/fluid%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <url>/2022/03/17/fluid%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>虽然fluid主题已经非常好看了，但我依旧可以通过一些简单的操作，让你的博客更加易用（更花里胡哨和装逼）<spanclass="github-emoji" data-alias="smile" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="fluid-页脚增加网站运行时长">1. Fluid 页脚增加网站运行时长</h2><p>主题预览网站中有了很详细的介绍，这里就不在重复了</p><p><ahref="https://hexo.fluid-dev.com/posts/fluid-footer-custom/">配置链接</a>，效果如下：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261337892.png"alt="202203172342237" /><figcaption aria-hidden="true">202203172342237</figcaption></figure><h2 id="markdown-使用emoji">2. markdown 使用emoji</h2><p>默认不支持输入emoji表情，我们可以通过hexo-filter-emoji插件实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-emoji<br></code></pre></td></tr></table></figure><p>之后在hexo配置文件，_config.html中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">## hexo-filter-emoji</span><br><span class="hljs-attr">emoji:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure><p>效果如下<span class="github-emoji" data-alias="thumbsup" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span>:</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261338900.png"alt="202203172346789" /><figcaption aria-hidden="true">202203172346789</figcaption></figure><h2 id="使用tidio进行实时交流">3. 使用Tidio进行实时交流</h2><p>Tidio是一个客服服务平台，可以在blog中实现LiveChat,存在网页端和移动端，可以及时回复消息，同时免费功能足够我们使用，效果如下：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261337746.png"alt="202203191703130" /><figcaption aria-hidden="true">202203191703130</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261338806.png"alt="202203191703265" /><figcaption aria-hidden="true">202203191703265</figcaption></figure><ul><li><p>首先进入 <a href="https://www.tidio.com/">Tidio 官网</a>进行注册，可能需要魔法上网</p></li><li><p>选择live chat 在settings 中调整自己的语句和外观</p></li><li><p>在setting-&gt;developver中复制public key</p><p><img src="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203191711294.png" alt="image-20220319171101114" style="zoom: 50%;" /></p></li><li><p>在主题的配置文件中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Tidio online chat</span><br><span class="hljs-attr">tidio:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">your</span> <span class="hljs-string">public</span> <span class="hljs-string">key</span><br></code></pre></td></tr></table></figure></li><li><p>更改主题文件</p><p>/hexo-theme-fluid/layout_partials/footer.ejs中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 在线通讯Tidio --&gt;<br>&lt;% if (theme.tidio.enable)&#123; %&gt;<br>&lt;script src=&quot;//code.tidio.co/your_public_key.js&quot;&gt;&lt;/script&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure></li><li><p>重新部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算小于等于N的质数的并行算法</title>
    <link href="/2022/03/17/%E8%AE%A1%E7%AE%97%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EN%E7%9A%84%E8%B4%A8%E6%95%B0%E7%9A%84%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/"/>
    <url>/2022/03/17/%E8%AE%A1%E7%AE%97%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EN%E7%9A%84%E8%B4%A8%E6%95%B0%E7%9A%84%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="遍历每一个数判断是否是质数">1. 遍历每一个数，判断是否是质数</h2><h3 id="朴素方法-是否可以被整除">朴素方法 是否可以被整除</h3><p>我们判断<spanclass="math inline">\(N\)</span>是否是质数时，不选要考虑<spanclass="math inline">\(\leq N\)</span>的所有情况,只需要考虑<spanclass="math inline">\(N\)</span>是否可以被小于等于<spanclass="math inline">\(\sqrt{N}\)</span>的数整除就可以了，因此代码如下(此时不考虑并行情况)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ifprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-built_in">sqrt</span>(n); k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % k == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">long</span>&gt; &amp;prime)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= SIZE; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ifprime(i))<br>            prime.<span class="hljs-built_in">emplace_back</span>(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">long</span>&gt; prime;<br>    <span class="hljs-type">double</span> t = <span class="hljs-built_in">omp_get_wtime</span>();<br>    <span class="hljs-comment">// add your codes begin</span><br>    <span class="hljs-built_in">getPrime</span>(prime);<br>    <span class="hljs-comment">// add your codes end</span><br>    t = <span class="hljs-built_in">omp_get_wtime</span>() - t;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;time %f %ld\n&quot;</span>, t, <span class="hljs-built_in">long</span>(SIZE));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nsize %ld\n&quot;</span>, prime.<span class="hljs-built_in">size</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.477831</p></blockquote><p>时间后的1000000时参数SIZE，含义是<span class="math inline">\(\leq1000000\)</span>中有78498个质数</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261347360.png"alt="202203171647230" /><figcaption aria-hidden="true">202203171647230</figcaption></figure><p>而在使用openmp并行后，从2-SIZE，每个线程分配一部分，判断是否为质数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ifprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-built_in">sqrt</span>(n); k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % k == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">long</span>&gt; &amp;prime)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 并行的写入vector</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel</span><br>    &#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; vec_private;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for nowait schedule(static)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= SIZE; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ifprime(i))<br>                vec_private.<span class="hljs-built_in">emplace_back</span>(i);<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical</span><br>        prime.<span class="hljs-built_in">insert</span>(prime.<span class="hljs-built_in">end</span>(), vec_private.<span class="hljs-built_in">begin</span>(), vec_private.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.033235</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261348208.png"alt="202203171651834" /><figcaption aria-hidden="true">202203171651834</figcaption></figure><h3 id="优化判断质数函数">优化判断质数函数</h3><p>首先，我们应该知道一个关于质数分布的规律：<strong>大于等于5的质数一定和6的倍数相邻</strong>。例如5和7，11和13,17和19,<strong>反之是不一定成立的</strong></p><p>证明：令x≥1，将大于等于5的自然数表示如下：···6x-1，6x，6x+1，6x+2，6x+3，6x+4，6x+5，6(x+1），6(x+1)+1 ···</p><p>可以看到，不和6的倍数相邻的数为6x+2，6x+3，6x+4，由于2(3x+1)，3(2x+1)，2(3x+2)，所以它们一定不是素数，再除去6x本身，显然，素数要出现只可能出现在6x的相邻两侧。因此在5到<spanclass="math inline">\(\sqrt{n}\)</span>中每6个数只判断2个，时间复杂度O(<spanclass="math inline">\(\frac{\sqrt{n}}{3}\)</span>),C++代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ifprime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span> || n == <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">6</span> != <span class="hljs-number">1</span> &amp;&amp; n % <span class="hljs-number">6</span> != <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">5</span>; k &lt;= <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">sqrt</span>(n)); k += <span class="hljs-number">6</span>)<br>        <span class="hljs-keyword">if</span> (n % k == <span class="hljs-number">0</span> || n % (k + <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>串行 <strong>此时运行时间为</strong></p><blockquote><p>time=0.156363</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261348573.png"alt="202203171659060" /><figcaption aria-hidden="true">202203171659060</figcaption></figure><p>并行 <strong>此时运行时间为</strong></p><blockquote><p>time=0.015401</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261348471.png"alt="202203171713716" /><figcaption aria-hidden="true">202203171713716</figcaption></figure><h2 id="使用筛法">2. 使用筛法</h2><p>我们可以标记所有合数，然后求质数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">long</span> sign[SIZE + <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getPrime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">long</span>&gt; &amp;prime)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> N = <span class="hljs-built_in">sqrt</span>(SIZE);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!sign[i])<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= SIZE / i; j++)<br>        sign[i * j] = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>sign[i]=true表示i为合数，当一个数i是质数时，我们标记<spanclass="math inline">\(i*j\)</span>为合数，<spanclass="math inline">\(i*j\leq SIZE\)</span></p><h3 id="串行">串行</h3><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.021131</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261349127.png"alt="202203171712942" /><figcaption aria-hidden="true">202203171712942</figcaption></figure><h3 id="在遍历时并行">在遍历时并行</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">  <span class="hljs-type">int</span> N = <span class="hljs-built_in">sqrt</span>(SIZE);<br>  <span class="hljs-comment">// 并行的使用筛法找出所有合数</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for num_threads(NUM_THREADS)</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!sign[i])<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= SIZE / i; j++)<br>        sign[i * j] = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.012204</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261349515.png"alt="202203171716363" /><figcaption aria-hidden="true">202203171716363</figcaption></figure><h3 id="在寻找合数时并行">在寻找合数时并行</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">  <span class="hljs-type">int</span> N = <span class="hljs-built_in">sqrt</span>(SIZE);<br><span class="hljs-comment">// 并行的使用筛法找出所有合数</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!sign[i])<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for num_threads(NUM_THREADS)</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= SIZE / i; j++)<br>        sign[i * j] = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>此时运行时间为</strong></p><blockquote><p>time=0.006109</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261349256.png"alt="202203171718941" /><figcaption aria-hidden="true">202203171718941</figcaption></figure><h2 id="时间对比">3. 时间对比</h2><table><thead><tr class="header"><th>方法</th><th>时间</th></tr></thead><tbody><tr class="odd"><td>朴素方法 串行</td><td>0.477831</td></tr><tr class="even"><td>朴素方法 并行</td><td>0.033235</td></tr><tr class="odd"><td>优化判断质数 串行</td><td>0.156363</td></tr><tr class="even"><td>优化判断质数 并行</td><td>0.015401</td></tr><tr class="odd"><td>筛法 串行</td><td>0.021131</td></tr><tr class="even"><td>筛法 遍历时并行</td><td>0.012204</td></tr><tr class="odd"><td>筛法 寻找合数时并行</td><td>0.006109</td></tr></tbody></table><h2 id="多线程写入vector">4. 多线程写入vector</h2><p>在完成上述问题时，遇到过循环中多线程无法对同一个vector进行写操作，有以下几种解决方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel</span><br>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec_private;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for nowait <span class="hljs-comment">//fill vec_private in parallel</span></span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>        vec_private.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical</span><br>    vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">end</span>(), vec_private.<span class="hljs-built_in">begin</span>(), vec_private.<span class="hljs-built_in">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>OpenMP 4.0允许使用reduction</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp declare reduction (merge : std::vector<span class="hljs-string">&lt;int&gt;</span> : omp_out.insert(omp_out.end(), omp_in.begin(), omp_in.end()))</span><br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel for reduction(merge: vec)</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) <br>    vec.<span class="hljs-built_in">push_back</span>(i);<br></code></pre></td></tr></table></figure><p>较为详细的可以这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel</span><br>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec_private;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for nowait schedule(static)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123; <br>        vec_private.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for schedule(static) ordered</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">omp_get_num_threads</span>(); i++) &#123;<br>        <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp ordered</span><br>        vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">end</span>(), vec_private.<span class="hljs-built_in">begin</span>(), vec_private.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>并行计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算作业1</title>
    <link href="/2022/03/13/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A1/"/>
    <url>/2022/03/13/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A1/</url>
    
    <content type="html"><![CDATA[<h2id="一云使能技术主要包括哪些技术组件简要说明其关键特征">一、云使能技术主要包括哪些技术组件？简要说明其关键特征。</h2><h4 id="数据中心技术">1. 数据中心技术</h4><p>一种特殊的IT基础设施，用于集中放置IT资源，包括服务器、数据库、网络与通信设备以及软件系统。数据中心是全球协作的特定设备网络，用来在因特网上传递、加速、展示、计算、存储数据信息。数据中心大部分电子元件都是由低直流电源驱动运行的。数据中心的产生致使人们的认识从定量、结构的世界进入到不确定和非结构的世界中，它将和交通、网络通讯一样逐渐成为现代社会基础设施的一部分，进而对很多产业都产生了积极影响。不过数据中心的发展不能仅凭经验，还要真正的结合实践，促使数据中心发挥真正的价值作用，促使社会的快速变革。</p><h3 id="虚拟化技术">2. 虚拟化技术</h3><p>是将物理IT资源转换为虚拟IT资源的过程，虚拟服务器使用自己的客户操作系统，独立于创建虚拟服务器的操作系统，在虚拟服务器上运行的客户操作系统和应用软件，都不会感知到虚拟化的过程。</p><h3 id="web技术">3. web技术</h3><p>Web是一种典型的分布式应用结构。Web应用中的每一次信息交换都要涉及客户端和服务端。因此，Web开发技术大体上也可以被分为客户端技术和服务端技术两大类。Web客户端的主要任务是展现信息内容。Web客户端设计技术主要包括HTML语言、JavaApplets、脚本程序、CSS、DHTML、插件技术以及VRML技术。与Web客户端技术从静态向动态的演进过程类似，Web服务端的开发技术也是由静态向动态逐渐发展、完善起来的。Web服务器技术主要包括服务器、CGI、PHP、ASP、ASP.NET、Servlet和JSP技术。</p><h3 id="多租户技术">4. 多租户技术</h3><p>多租户简单来说是指一个单独的实例可以为多个组织服务。多租户技术为共用的数据中心内如何以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。一个支持多租户技术的系统需要在设计上对它的数据和配置进行虚拟分区，从而使系统的每个租户或称组织都能够使用一个单独的系统实例，并且每个租户都可以根据自己的需求对租用的系统实例进行个性化配置。多租户技术可以实现多个租户之间共享系统实例，同时又可以实现租户的系统实例的个性化定制。通过使用多租户技术可以保证系统共性的部分被共享，个性的部分被单独隔离。通过在多个租户之间的资源复用，运营管理维护资源，有效节省开发应用的成本。而且，在租户之间共享应用程序的单个实例，可以实现当应用程序升级时，所有租户可以同时升级。同时，因为多个租户共享一份系统的核心代码，因此当系统升级时，只需要升级相同的核心代码即可。</p><h3 id="服务技术">5. 服务技术</h3><p>基于Web的服务(如Web服务和REST服务)依靠非专有通信和技术接口定义来建立基于Web技术的标准通信框架，服务代理提供事件驱动运行时处理，适用于云中大量的功能。许多代理都自动部署在操作系统和基于云的产品中，服务中间件(如ESB和业务流程平台)可以在云上部署。</p><h2id="二列举至少3种虚拟化软件并概括其特点">二、列举至少3种虚拟化软件，并概括其特点。</h2><ul><li><p>VMware ESXi侧重于服务器虚拟化，技术较成熟，功能也多，支持虚机系统多。</p></li><li><p>Xenserver重点在于桌面虚拟化，性价比高，网络性能好，适用于快速与大规模部署，支持系统也相对较多。</p></li><li><p>Hype-V 微软开发，起步相对较晚，对于MS的系统较为支持。</p></li><li><p>Oracle VM VirtualBox 开源，支持的系统种类繁多。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将hexo源码上传github</title>
    <link href="/2022/03/11/%E5%B0%86hexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0github/"/>
    <url>/2022/03/11/%E5%B0%86hexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0github/</url>
    
    <content type="html"><![CDATA[<p>在将博客部署在github后，因为仓库的默认分支中存储的是静态html，而不是源码，所以在重新部署时会非常麻烦，需要重新配置。因为本身是一个喜欢折腾的人，为了防止某一天环境搞乱后追悔莫及，也为了方便查看配置文件更改了什么内容，所以使用版本控制是十分必要的。（额。。每个主题config不同，而我未来换主题的次数可能有辣么一点点多。)</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261340923.png" alt="202203112113312" style="zoom:50%;" /></p><p>网上的教程挺多的，但是有点过程十分繁琐而且没有必要。在尝试后，我总结了相对简单的步骤，使用vscode进行图形化git操作，因为我身边的大部分人可能只会git clone</p><h3 id="新建分支">1. 新建分支</h3><p>一般来说，hexo生成的静态html文件都保存在master分支，我们需要新建一个分支用来存储源代码，我新建了source分支</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261341357.png" alt="202203112044392" style="zoom:50%;" /></p><p>然后把source设置为默认分支</p><p><strong>Settings-&gt;Branches-&gt;Default branches</strong></p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261341110.png" alt="202203112047709" style="zoom:67%;" /></p><h3 id="本地操作">2. 本地操作</h3><p>将仓库克隆到本地，使用vscode打开，左下角应该显示source分支</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261342795.png" alt="202203112051236" style="zoom:80%;" /></p><p>把里边的东西删掉，因为source是从master clone过来的静态html我们并不需要这些东西，保留.git文件夹</p><p>然后将你的hexo文件夹下的所有内容复制到该文件下(执行hexo clean &amp; g&amp;s 的目录) 如果主题是clone下来的，删除主题文件夹下的.git文件夹</p><p><img src="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203112054538.png" alt="image-20220311205410479" style="zoom: 67%;" /></p><p>一般来说在初始化会自己有.gitignore文件，没有的话就自己新建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br>_multiconfig.yml<br></code></pre></td></tr></table></figure><p>这样的目的是把无关的内容去掉，因为我们只需要config以及博客.md，npm依赖包和生成的静态html我们并不需要</p><p>再次确定<strong>博客是部署在非source分支</strong>，一般在_config.yml文件下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h3 id="推送">3. 推送</h3><p>将更改提交，并且推送到github</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261345221.png"alt="202203112104237" /><figcaption aria-hidden="true">202203112104237</figcaption></figure><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261346720.png" alt="202203112106897" style="zoom:67%;" /></p><p>这时我们就成功了，在本地做更改时，我们会将更改的config文件和md文件推送到source分支</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261346277.png" alt="202203112109311" style="zoom:67%;" /></p><p>而执行hexo d 会部署在master分支</p><p><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261346698.png"alt="202203112110969" /><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261347781.png"alt="202203112110060" /></p><p>至此我们的目的就达到了，这样在弄些花里胡哨的东西时就不用担心出现错误无法回退了。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>准备考研有感</title>
    <link href="/2022/03/11/%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/"/>
    <url>/2022/03/11/%E5%87%86%E5%A4%87%E8%80%83%E7%A0%94%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="之前">之前</h3><p>基本上大家对学习的态度，你拉着我走，我也不想走：</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261335384.png" alt="202203111547111" style="zoom:67%;" /></p><h3 id="现在">现在</h3><p>上课到处都是拿着考研书籍的人，图书馆也都是熟人，这让躺在床上的我很难啊</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261335500.png"alt="202203111549187" /><figcaption aria-hidden="true">202203111549187</figcaption></figure><p>争取努力努力，拼搏9个月，我要有学上 <span class="github-emoji"data-alias="muscle" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">💪</span></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/09/hello-world/"/>
    <url>/2022/03/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 笔记</title>
    <link href="/2022/03/08/LeetCode-%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/08/LeetCode-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="两数之和">1. 两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案 <imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261329962.png"alt="202203021820930" /></p><p>链接：https://leetcode-cn.com/problems/two-sum</p><h3 id="解法">解法：</h3><p>常规思路是使用两个for循环，遍历数组中的组合方式，返回满足结果的答案；</p><p>时间复杂度是<span class="math inline">\(O(n^2)\)</span>;</p><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numslength; i++)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; numslength; j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(nums[i]+nums[j]==target &amp;&amp; i!=j)<br>        &#123;<br>            res.<span class="hljs-built_in">emplace_back</span>(i);<br>            res.<span class="hljs-built_in">emplace_back</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种解法，使用map数据结构，&lt;key,value&gt;=&lt;nums[i],index&gt;;遍历数组，使用count();计算target-nums[i]的个数，使用map在<spanclass="math inline">\(O(1)\)</span>的时间复杂度内找到taget-nums[i]的index;</p><p>因为count()函数时间复杂度为<span class="math inline">\(O(\log^{n})\)</span>,总的时间复杂度为<spanclass="math inline">\(O(n\log{n})\)</span>;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; M;<br>    <span class="hljs-type">int</span> numslength = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numslength;++i)&#123;<br>        M.<span class="hljs-built_in">insert</span>(&#123;nums[i], i&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numslength;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> numsOfOther = M.<span class="hljs-built_in">count</span>(target - nums[i]);<br>        <span class="hljs-keyword">if</span>(numsOfOther&gt;<span class="hljs-number">0</span>&amp;&amp;(M[target - nums[i]]!=i))&#123;<br>            res.<span class="hljs-built_in">emplace_back</span>(i);<br>            res.<span class="hljs-built_in">emplace_back</span>(M[target - nums[i]]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="两数相加">2.两数相加</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261330735.png"alt="202203021937657" />链接：https://leetcode-cn.com/problems/add-two-numbers</p><h3 id="解题">解题</h3><p>难点在于返回的是一个指针</p><p>建立一个头节点，使用while循环，遍历两个数组，对应数字相加，mod10放入新链表，、10与下一组累加；同时在循环外判断最后一个数在/10是否大于0，如果大于0，新加一个节点；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span><br>&#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function">ListNode *<span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode *l1, ListNode *l2)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    ListNode *prehead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>    ListNode *cur = prehead;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l1 || l2)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (l1)<br>            t += l1-&gt;val, l1 = l1-&gt;next;<br>        <span class="hljs-keyword">if</span> (l2)<br>            t += l2-&gt;val, l2 = l2-&gt;next;  <span class="hljs-comment">// 一般情况下 t += (A[i] + B[i])后是一个0-19大的数字，个位push到当前位，而十位只有0和1作为进位继续后面的加法</span><br>        cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t % <span class="hljs-number">10</span>); <span class="hljs-comment">// t % 10 是 t的个位</span><br>        cur = cur-&gt;next;<br>        t /= <span class="hljs-number">10</span>; <span class="hljs-comment">// t/=10，计算是否有进位，并更新t, 在下一轮继续 t += (A[i] + B[i])</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (t)<br>    &#123;<br>        cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t);<br>    &#125; <span class="hljs-comment">// 别忘了如果最后一位加法完成后，还得考虑进位</span><br>    <span class="hljs-keyword">return</span> prehead-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无重复字符的最长字串">3. 无重复字符的最长字串</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong> 的长度。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261330085.png"alt="202203021951814" /><figcaption aria-hidden="true">202203021951814</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261331174.png"alt="202203021952737" /><figcaption aria-hidden="true">202203021952737</figcaption></figure><h3 id="解题-1">解题：</h3><p>使用滑动数组解决</p><p>定义一个数组numOfCha用来记录每种字母与空格的数量，定义leftIndex标记子串的左界</p><p>使用for循环遍历字符串：如果遍历到的字符已出现次数为0,子串向右加一，numOfCha更新，计算长度(i-letIndex+1)，更新最大长度；否则不断弹出最左侧的字符，leftIndex++,相当于向右滑动；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> leftIndex=<span class="hljs-number">0</span>, maxLength=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> numOfCha[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">memset</span>(numOfCha, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(numOfCha));<br>    set&lt;<span class="hljs-type">char</span>&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len;i++)<br>    &#123;<br>      <span class="hljs-keyword">while</span> (numOfCha[s[i]-<span class="hljs-string">&#x27; &#x27;</span>]!=<span class="hljs-number">0</span>)<br>      &#123;<br>          numOfCha[s[leftIndex] - <span class="hljs-string">&#x27; &#x27;</span>]--;<br>          leftIndex++;<br>      &#125;<br>      maxLength = <span class="hljs-built_in">max</span>(maxLength, i - leftIndex + <span class="hljs-number">1</span>);<br>      numOfCha[s[i] - <span class="hljs-string">&#x27; &#x27;</span>]++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLength;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最长回文子串">5. 最长回文子串</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code>中最长的回文子串</p><figure><imgsrc="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203022141480.png"alt="image-20220302214119440" /><figcaption aria-hidden="true">image-20220302214119440</figcaption></figure><h3 id="解法-1">解法：</h3><ul><li><p>扩展中心</p><p>我们知道字符串一定是对称的，所以我们可以每次循环的时候选择一个中心，进行左右扩展，判断新扩展的字符是否相等。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261331315.png"alt="202203041856092" /><figcaption aria-hidden="true">202203041856092</figcaption></figure><p>因为存在奇数的字符串或者偶数的字符串，所以我们需要从一个字符开始扩展，或者两个连续的字符开始扩展，所以共有n+ (n-1)个中心。</p><p>时间复杂度：O(<span class="math inline">\(n^2\)</span>）O(<spanclass="math inline">\(n^2\)</span>）。</p><p>空间复杂度：O(1）O(1）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">expendAroundCenter</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> lef, <span class="hljs-type">int</span> rig)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> subLef = lef;<br>    <span class="hljs-type">int</span> subRig = rig;<br>    <span class="hljs-comment">// 左界应该在大于等于0，右界应当小于字符串的长度，同时新扩展的两个字符应当相等</span><br>    <span class="hljs-keyword">while</span> ((subLef &gt;= <span class="hljs-number">0</span>) &amp;&amp; (subRig &lt; s.<span class="hljs-built_in">length</span>()) &amp;&amp; (s[subLef] == s[subRig]))<br>    &#123;<br>        subLef--;<br>        subRig++;<br>    &#125;<br>    <span class="hljs-comment">//返回的是以s[lef,rig]为中心的回文子串长度</span><br>    <span class="hljs-keyword">return</span> subRig - subLef + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//如果S是空，则返回空</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;&quot;</span> || s.<span class="hljs-built_in">length</span>() &lt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//用来标记最长回文子串的左右界</span><br>    <span class="hljs-type">int</span> strStart = <span class="hljs-number">0</span>, strEnd = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">int</span> strLen = s.<span class="hljs-built_in">length</span>();<br><span class="hljs-comment">//遍历每一个字符</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; strLen; i++)<br>    &#123;<br>        <span class="hljs-comment">//以该字符为中心，或者连续两个字符为中心</span><br>        <span class="hljs-type">int</span> len1 = <span class="hljs-built_in">expendAroundCenter</span>(s, i, i);<br>        <span class="hljs-type">int</span> len2 = <span class="hljs-built_in">expendAroundCenter</span>(s, i, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">max</span>(len1, len2);<br>        <span class="hljs-comment">//如果长度大于我们标记的，更新左右界</span><br>        <span class="hljs-keyword">if</span> (len &gt; strEnd - strStart + <span class="hljs-number">1</span>)<br>        &#123;<br>            strStart = i - (len - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            strEnd = i + len / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(strStart, strEnd - strStart + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="字符串转整数">8. 字符串转整数</h2><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><p>函数 myAtoi(string s) 的算法如下：</p><ol type="1"><li>读入字符串并丢弃无用的前导空格</li><li>读入下一个字符，确定正负号，若不存在假定为正</li><li>读入数字转化为整数，无数字则为0</li><li>若溢出int,则截断整数</li></ol><hr /><p>输入: s=“ -42 akkk”</p><p>输出: -42</p><p>输入: s="-2147483648"</p><p>输出: -2147483648</p><p>输入: s=“ 2147483648”</p><p>输出: 2147483648</p><p>链接：https://leetcode-cn.com/problems/string-to-integer-atoi</p><h3 id="解法-2">解法：</h3><p>思路较为清晰和明确，整体是遍历一遍字符串</p><p>首先去除开头的空格，index++;</p><p>如果index==len,全是空格，则返回0；</p><p>之后判断正负，使用sign标定</p><p>转化数字时因为只能使用32位，所以判断时应该与INT_MAX/10比较，因为INT数字范围是<spanclass="math inline">\(\left[ -2^{32},2^{32}-1\right]\)</span>，所以在判断个位数时应该使用大于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>, sign = <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//如果是空格，索引向后</span><br>    <span class="hljs-keyword">while</span> (s[index] == <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; index &lt; len)<br>    &#123;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index == len)<br>    &#123; <span class="hljs-comment">//整个字符串都是空格</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[index] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#123; <span class="hljs-comment">//是否为负数</span><br>            sign = <span class="hljs-number">-1</span>;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[index] == <span class="hljs-string">&#x27;+&#x27;</span>)<br>        &#123; <span class="hljs-comment">//是否为正数</span><br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (index &lt; len &amp;&amp; s[index] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s[index] &gt;= <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> curDigit = s[index] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (res &gt; INT_MAX / <span class="hljs-number">10</span> || ((res == INT_MAX / <span class="hljs-number">10</span>) &amp;&amp; (curDigit &gt; INT_MAX % <span class="hljs-number">10</span>)))<br>            &#123;<br>                <span class="hljs-keyword">return</span> sign==<span class="hljs-number">1</span>?INT_MAX:INT_MIN;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                res = res * <span class="hljs-number">10</span> + curDigit;<br>            &#125;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sign * res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最长公共前缀">14. 最长公共前缀</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>""</code></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203151519386.png"alt="image-20220315151908284" /><figcaption aria-hidden="true">image-20220315151908284</figcaption></figure><p>题目链接：https://leetcode-cn.com/problems/longest-common-prefix/</p><h3 id="解法-3">解法：</h3><h5 id="暴力">1. 暴力</h5><p>首先，我们可以找到最短串的长度minStrLen，这样在比较每个字母是就不用担心会溢出</p><p>然后，遍历每个字符串，当同一index的字母相同时，res加上该字母，否则break</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>       string res = <span class="hljs-string">&quot;&quot;</span>;<br>       <span class="hljs-type">int</span> minStrLen = <span class="hljs-number">300</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; strs.<span class="hljs-built_in">size</span>(); i++)<br>       &#123;<br>           <span class="hljs-type">int</span> indexLen = strs[i].<span class="hljs-built_in">size</span>();<br>           <span class="hljs-keyword">if</span> (indexLen &lt; minStrLen)<br>           &#123;<br>               minStrLen = indexLen;<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; minStrLen; i++)<br>       &#123;<br>           <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; strs.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; j++)<br>           &#123;<br>               <span class="hljs-keyword">if</span>(strs[j][i]!=strs[j+<span class="hljs-number">1</span>][i])<br>               &#123;<br>                   flag = <span class="hljs-literal">false</span>;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(flag)<br>               res += strs[<span class="hljs-number">0</span>][i];<br>           <span class="hljs-keyword">else</span><br>               <span class="hljs-keyword">break</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的结果为</p><h5 id="image-20220315161954911"><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203151619970.png"alt="image-20220315161954911" /></h5><h5 id="字典序排序">2. 字典序排序</h5><p>在对字符串进行sort时，是按照字典序，所以我们完全可以在排序后比较第一个和最后一个的公共前缀子串，这样就可以省去比较每一个字符串的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt; &amp;strs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(strs.<span class="hljs-built_in">begin</span>(), strs.<span class="hljs-built_in">end</span>());<br>    string res;<br>    string first = strs.<span class="hljs-built_in">front</span>();<br>    string end = strs.<span class="hljs-built_in">back</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; first.<span class="hljs-built_in">size</span>() &amp;&amp; i &lt; end.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(first[i]!=end[i])&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        res += first[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203151624701.png"alt="image-20220315162405643" /><figcaption aria-hidden="true">image-20220315162405643</figcaption></figure><p>这样极大的缩短了代码量，大佬们的脑洞太大了</p><h2 id="三数之和">15. 三数之和</h2><h3 id="题目描述">题目描述</h3><p>给定一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断<code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b +c =</em> 0 ？找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><h4 id="示例">示例</h4><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs inform7">给定数组 nums = <span class="hljs-comment">[-1, 0, 1, 2, -1, -4]</span>，<br><br>满足要求的三元组集合为：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[-1, 0, 1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[-1, -1, 2]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><h3 id="题目解析">题目解析</h3><p>最容易想到的就是三重循环暴力法搜索，时间复杂度为 <code>O(n^3)</code>.有点高啊，优化一下.</p><p>通过题目我们了解到，主要问题在于 <code>搜索所有满足条件的情况</code>和 <code>避免重复项</code>，那么我们可以使用<code>升序数组 + 双指针</code> 有效处理问题并降低时间复杂度.</p><p>你可能想知道为啥会选择使用这个方案 ？</p><p>首先数组排序时间复杂度可以达到<code>O(NlogN)</code>，这点时间消耗我们是能接受的，另外根据有序数组的特性，数组重复项会挨在一起，不需要额外的空间存储就能跳过重复项，由于是升序，当发现最左边的数值大于0，就可以及时跳出来结束运算.</p><p>双指针可以用来<code>降维</code>.通过遍历数组，取当前下标值为<code>定值</code>，双指针代表<code>定值</code>后面子数组的<code>首尾数值</code>，通过不断靠近双指针来判断三个值的和。</p><p>具体算法流程如下：</p><ol type="1"><li>特判：对于数组长度 <code>n</code>，如果数组为 <code>null</code>或者数组长度小于 <code>3</code>，返回<code>[ ]</code> ;</li><li>数组升序排序；</li><li>遍历数组：<ul><li>若<code>num[i] &gt; 0</code>：因为是升序，所以结果不可能等于0，直接返回结果；</li><li>令左指针 <code>L = i + 1</code>，右指针 <code>R = n - 1</code>，当<code>L &lt; R</code> 时，执行循环：<ul><li>当 <code>nums[i] + nums[L] + nums[R] == 0</code>，执行循环，判断左指针和右指针是否和下一位置重复，<code>去除重复解</code>。并同时将<code>L,R</code> 移到下一位置，寻找新的解；</li><li>若<code>和</code>大于 <code>0</code>，说明 <code>nums[R]</code>太大，<code>R指针</code> 左移</li><li>若<code>和</code>小于 <code>0</code>，说明 <code>nums[L]</code>太小，<code>L指针</code> 右移</li></ul></li></ul></li></ol><h3 id="参考代码">参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums)<br>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; res;<br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> || nums.<span class="hljs-built_in">back</span>() &lt; <span class="hljs-number">0</span> || nums.<span class="hljs-built_in">front</span>() &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; nums.<span class="hljs-built_in">size</span>(); k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums[k] &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//去重操作，如果是nums[k]==nums[k+1],会忽略-1，-1，2这样的情况</span><br>        <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span> &amp;&amp; nums[k] == nums[k - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> target = <span class="hljs-number">0</span> - nums[k];<br>        <span class="hljs-type">int</span> i = k + <span class="hljs-number">1</span>, j = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target)<br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(&#123;nums[k], nums[i], nums[j]&#125;);<br>                <span class="hljs-comment">//因为返回的是数组中的数，所以相同的数我们只需要一个</span><br>                <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i] == nums[i + <span class="hljs-number">1</span>])<br>                    ++i;<br>                <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>])<br>                    --j;<br>                ++i;<br>                --j;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[j] &lt; target)<br>                ++i;<br>            <span class="hljs-keyword">else</span><br>                --j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除链表的倒数第-n-个节点">19 删除链表的倒数第 N 个节点</h2><h3 id="题目描述-1">题目描述</h3><p>给定一个链表，删除链表的倒数第 <em>n</em>个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">给定一个链表: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>, 和 n = <span class="hljs-number">2.</span><br><br>当删除了倒数第二个节点后，链表变为 <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5.</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><p><strong>进阶：</strong></p><p>你能尝试使用一趟扫描实现吗？</p><h3 id="题目解析-1">题目解析</h3><p>采取双重遍历肯定是可以解决问题的，但题目要求我们一次遍历解决问题</p><h3 id="解法一-两次遍历">解法一 两次遍历</h3><p>这也是最naive的解法，第一次遍历找到链表的长度，第二次遍历到需要删除节点的前一个节点，使用next指针将所需要删掉的节点绕过。</p><p>需要考虑只存在一个节点或者删除的就是头节点的特殊情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        ListNode *cur = head;<br>        <span class="hljs-type">int</span> nums = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (cur-&gt;next != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            cur = cur-&gt;next;<br>            nums++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums==<span class="hljs-number">1</span>||nums-n==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> head-&gt;next;<br>        <span class="hljs-comment">// 到删除节点的前一个</span><br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (index &lt; (nums - n))<br>        &#123;<br>            cur = cur-&gt;next;<br>            index++;<br>        &#125;<br><br>        ListNode *ptr = cur-&gt;next;<br>        cur-&gt;next = ptr-&gt;next;<br>        <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解法二-快慢指针">解法二 快慢指针</h3><p>很容易就可以想到我们何不声明一个快慢指针，快指针比慢指针领先n个进度，当快指针指向最后一个时，慢指针指向我们需要删掉的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//无节点或者只有一个头节点</span><br>        <span class="hljs-keyword">if</span>(!head | !head -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode * fast = head, *slow = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            fast = fast -&gt; next;<br>        &#125;<br>        <span class="hljs-comment">//链表长度小于n时，相当于删掉头节点</span><br>        <span class="hljs-keyword">if</span>(!fast)&#123;<br>            <span class="hljs-keyword">return</span> head -&gt; next;    <br>        &#125;<br>        <span class="hljs-comment">//找到我们需要的节点</span><br>        <span class="hljs-keyword">while</span>(fast -&gt; next)&#123;<br>            fast = fast -&gt; next;<br>            slow = slow -&gt; next;<br>        &#125;<br>        slow -&gt; next = slow -&gt; next -&gt; next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="解法三-递归">解法三 递归</h3><p>因为递归过程，所以我们实际上首先找到的是链表的最后一个，并向前回溯，回溯过程中cur++；当找到我们应该删掉的节点时，返回的实际上是next指针，相当于返回了下一个节点，等价于删除操作；正常应该返回的是当前节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>;<br><span class="hljs-function">ListNode *<span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode *head, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!head)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    head-&gt;next = <span class="hljs-built_in">removeNthFromEnd</span>(head-&gt;next, n);<br>    cur++;<br>    <span class="hljs-keyword">if</span> (n == cur)<br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有效的括号">20. 有效的括号</h2><h3 id="题目描述-2">题目描述</h3><p>给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul><h3 id="样例">样例</h3><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261453024.png" alt="image-20220326142418796" style="zoom: 67%;" /></p><p>链接：https://leetcode-cn.com/problems/valid-parentheses</p><h3 id="思路">思路</h3><p>这是一道栈的经典题型</p><p>这道题让我们验证输入的字符串是否为括号字符串，包括大括号，中括号和小括号。我们使用<strong>栈</strong>来存储括号</p><ul><li>遍历输入字符串</li><li>如果当前字符为左半边括号时，则将其压入栈中</li><li>如果遇到右半边括号时，<strong>分类讨论：</strong></li><li>1）如栈不为空且为对应的左半边括号，则取出栈顶元素，继续循环<br /></li><li>2）若此时栈为空，则直接返回false</li><li>3）若不为对应的左半边括号，反之返回false</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    stack&lt;<span class="hljs-type">char</span>&gt; brackets;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-comment">//遇到左括号压入栈</span><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || s[i] == <span class="hljs-string">&#x27;(&#x27;</span> || s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(s[i]);<br>        <span class="hljs-comment">//右括号分情况</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//情况1:栈为空，没有与右括号匹配，返回false</span><br>            <span class="hljs-keyword">if</span> (!brackets.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">char</span> cur = brackets.<span class="hljs-built_in">top</span>(), match;<br>            brackets.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">//匹配的左括号</span><br>            <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>                match = <span class="hljs-string">&#x27;(&#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;]&#x27;</span>)<br>                match = <span class="hljs-string">&#x27;[&#x27;</span>;<br>            <span class="hljs-keyword">else</span><br>                match = <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>            <span class="hljs-comment">//情况2:扫描到的右括号所匹配的左括号！= 栈顶括号</span><br>            <span class="hljs-keyword">if</span>(match !=cur)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br>    &#125;<br>    <span class="hljs-comment">// 扫描完字符串，是否清空栈</span><br>    <span class="hljs-keyword">return</span> brackets.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 第二种代码写法</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    stack&lt;<span class="hljs-type">char</span>&gt; brackets;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-comment">// 将左括号匹配的右括号压入栈</span><br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            brackets.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br>        <span class="hljs-comment">// 扫描遇到右括号</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!brackets.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (brackets.<span class="hljs-built_in">top</span>() != s[i])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span><br>                brackets.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>     <span class="hljs-keyword">return</span> brackets.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="合并两个有序链表">21 合并两个有序链表</h2><h3 id="题目描述-3">题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><img src="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261438672.png" alt="image-20220326143806602" style="zoom:67%;" /></p><h3 id="一般思路">一般思路</h3><ol type="1"><li>比较链表1和链表2的第一个结点的值，将值小的结点保存下来为合并后的第一个结点。并且把第一个结点为最小的链表向后移动一个元素。</li><li>继续在剩下的元素中选择小的值，连接到第一个结点后面，并不断next将值小的结点连接到第一个结点后面，直到某一个链表为空。</li><li>当两个链表长度不一致时，也就是比较完成后其中一个链表为空，此时需要把另外一个链表剩下的元素都连接到第一个结点的后面。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *list1, ListNode *list2)</span></span><br><span class="hljs-function"></span>&#123;<br>    ListNode *newList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>    ListNode *dummyhead = newList, *p = list1, *q = list2;<br>    <span class="hljs-keyword">while</span> (p &amp;&amp; q)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;val &lt;= q-&gt;val)<br>        &#123;<br>            newList-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(p-&gt;val);<br>            p = p-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            newList-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(q-&gt;val);<br>            q = q-&gt;next;<br>        &#125;<br>        newList = newList-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p)<br>        newList-&gt;next = p;<br>    <span class="hljs-keyword">else</span><br>        newList-&gt;next = q;<br>    <span class="hljs-keyword">return</span> dummyhead-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归实现">递归实现</h3><p>（1）对空链表存在的情况进行处理，假如 list1 为空则返回 list2 ，list2为空则返回 list1。 （2）比较两个链表第一个结点的大小，确定头结点的位置（3）头结点确定后，继续在剩下的结点中选出下一个结点去链接到第二步选出的结点后面，然后在继续重复（2）（3） 步，直到有链表为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode *<span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode *list1, ListNode *list2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (list1 == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> list2;<br>    <span class="hljs-keyword">if</span> (list2 == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> list1;<br>    <span class="hljs-keyword">if</span> (list1-&gt;val &lt; list2-&gt;val)<br>    &#123;<br>        list1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(list1-&gt;next, list2);<br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        list2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(list1, list2-&gt;next);<br>        <span class="hljs-keyword">return</span> list2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生成括号">25 生成括号</h2><h3 id="题目描述-4">题目描述</h3><p>数字 <code>n</code>代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且<strong>有效的</strong> 括号组合。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202204071625432.png"alt="image-20220407162502848" /><figcaption aria-hidden="true">image-20220407162502848</figcaption></figure><h3 id="动态规划">动态规划</h3><p>核心思路：<strong>考虑 <code>i=n</code> 时相比 <code>n-1</code>组括号增加的那一组括号的位置</strong></p><p>i&lt;n 的情况，那我们就可以对所有情况进行遍历：</p><p>"(" + [i=p时所有括号的排列组合] + ")" +[i=q时所有括号的排列组合]，其中 p + q = n-1，且 p q 均为非负整数。</p><p>事实上，当上述 p 从 0 取到 n-1，q 从 n-1 取到 0后，所有情况就遍历完了。</p><p>注：上述遍历是没有重复情况出现的，即当 (p1,q1)≠(p2,q2)时，按上述方式取的括号组合一定不同。</p><p>因为我们实际上是得出了从2-n的所有答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;()&quot;</span>&#125;;<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>);<br>    dp[<span class="hljs-number">0</span>] = &#123;<span class="hljs-string">&quot;&quot;</span>&#125;;<br>    dp[<span class="hljs-number">1</span>] = &#123;<span class="hljs-string">&quot;()&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123; <span class="hljs-comment">//从2-n一步步向上迭代</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;value1 : dp[j]) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;value2 : dp[i - <span class="hljs-number">1</span> - j]) &#123;<br>                    dp[i].<span class="hljs-built_in">emplace_back</span>(<span class="hljs-string">&#x27;(&#x27;</span> + value1 + <span class="hljs-string">&#x27;)&#x27;</span> += value2);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归">递归</h3><p>使用dfs进行，每次递归的时候，先一直加上<code>(</code>，再一直加上<code>)</code></p><p>需要注意的是，在进行递归的时候，对于string类型的参数，<code>当传参的时候，不能传入引用</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;string&gt; &amp;res, string s, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; n || r &gt; n)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> ((l == r) &amp;&amp; (l == n)) &#123;<br>        res.<span class="hljs-built_in">emplace_back</span>(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(res, s + <span class="hljs-string">&quot;(&quot;</span>, l + <span class="hljs-number">1</span>, r, n);<br>    <span class="hljs-built_in">dfs</span>(res, s + <span class="hljs-string">&quot;)&quot;</span>, l, r + <span class="hljs-number">1</span>, n);<br>&#125;<br><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    vector&lt;string&gt; res;<br>    <span class="hljs-built_in">dfs</span>(res, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, n);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算实验1-使用github,hexo搭建个人博客</title>
    <link href="/2022/03/08/%E9%85%8D%E7%BD%AEhexo/"/>
    <url>/2022/03/08/%E9%85%8D%E7%BD%AEhexo/</url>
    
    <content type="html"><![CDATA[<h1 id="山东大学-计算机科学与技术-学院-云计算技术-课程实验报告">山东大学计算机科学与技术 学院 云计算技术 课程实验报告</h1><h2 id="姓名学号">1. 姓名学号</h2><p>201900130128 冯子恺 数据19</p><h2 id="实验题目">2. 实验题目</h2><p>Github + Hexo搭建个人博客系统</p><h2 id="实验目的">3. 实验目的</h2><p>熟悉个人博客系统的搭建</p><h2 id="实验环境">4. 实验环境</h2><ul><li><p>硬件环境</p><p>Intel Core I5-8300H</p><p>Nvidia Geforce gtx1060</p></li><li><p>软件环境</p><p>Windows10 21H2</p></li></ul><h2 id="实验步骤与内容">5. 实验步骤与内容</h2><h3 id="注册github账号下载gitnode">5.1注册github账号，下载git，node</h3><p>之前已经做过，而且较为简单，这里不再重复</p><h3 id="新建一个仓库">5.2 新建一个仓库</h3><p>新建一个公共仓库，作为博客的部署的位置</p><h3 id="配置ssh-key">5.3 配置ssh key</h3><p>由于椭圆加密相同密钥长度下，安全性能更高同时计算量小，处理速度快，在私钥的处理速度上比RSA快的多，所以在生成密钥对时，使用ECC加密</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> ecdsa<br></code></pre></td></tr></table></figure><p>将公钥上传到github,测试连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh <span class="hljs-literal">-T</span> git@github.com<br></code></pre></td></tr></table></figure><p>连接成功</p><p><imgsrc="https://gitee.com/Fantastic-Feng/picgo/raw/master/202203072016135.png" /></p><h3 id="配置hexo">5.4 配置hexo</h3><ul><li>安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo<br></code></pre></td></tr></table></figure><ul><li>新建一个文件夹,初始化博客</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><ul><li>安装依赖包，确保git部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>此时本地已经配置好博客</p><p>使用命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h3 id="更换主题">5.5 更换主题</h3><p>依据个人喜好更换主题，这里使用Aurora</p><h3 id="博客部署在github.io">5.6 博客部署在github.io</h3><ul><li><p>复制SSH链接</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261339219.png"alt="202203072023291" /><figcaption aria-hidden="true">202203072023291</figcaption></figure></li><li><p>编辑 config_yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:Fantastic-Feng/Fantastic-Feng.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>配置Deploy keys</p><p>与SSH配置方法相同，存在bug，添加后不显示，不过可以使用</p></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261339347.png"alt="202203072028743" /><figcaption aria-hidden="true">202203072028743</figcaption></figure></li></ul><h3 id="访问">5.7 访问</h3><p>https://f7kyyy.github.io/</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203261340471.png"alt="202203072031185" /><figcaption aria-hidden="true">202203072031185</figcaption></figure><h3 id="添加一篇博客">5.7 添加一篇博客</h3><p>生成一个新的md文件，在 ./source/_posts文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;new article&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g     //生成静态页面<br>hexo s    //启动本地服务器进行查看<br>hexo d   //查看后没有问题即可部署到github上<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/F7kyyy/picture@main/img/202203311340069.png"alt="202203072055102" /><figcaption aria-hidden="true">202203072055102</figcaption></figure><h2 id="结论分析与体会">6. 结论分析与体会</h2><p>网络上程序员好像人手一个博客，之前想过用java 和vue自己实现一个博客项目，太麻烦了就一直没弄</p><p>hexo还是比较方便的，同时有各种主题可以选择，还是很不错的</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>云计算</tag>
      
      <tag>环境配置</tag>
      
      <tag>实验报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
